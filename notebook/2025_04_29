{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "81040818d3cd466085818df25d72cb11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e5e4e0929dc0428ab0641d4e6e4ce056",
              "IPY_MODEL_08c7b43de8d24c38a24bd3ffce74425f",
              "IPY_MODEL_e5727b6fb4ab417b86807a96abb0e51a",
              "IPY_MODEL_7454f5dc1f5844119fe45b781fb7b069",
              "IPY_MODEL_2f56f671ab224815a1a66e2c4b98b8f1",
              "IPY_MODEL_5734643e385f46ea811b65e533693091",
              "IPY_MODEL_642faf3583274717a49734763db8ed34",
              "IPY_MODEL_f786f47ed862430a93ace9917d5ccdeb"
            ],
            "layout": "IPY_MODEL_93eecc0a3fd3435eb78b0dee6f14651a"
          }
        },
        "e5e4e0929dc0428ab0641d4e6e4ce056": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TabModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TabModel",
            "_titles": {
              "0": "Time Period",
              "1": "Assets",
              "2": "Performance Period",
              "3": "Trading Settings",
              "4": "Output Settings"
            },
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TabView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8442bb5219744a9d936654658d03229f",
              "IPY_MODEL_3907ebf917744e008b699bc46ca2b199",
              "IPY_MODEL_5cb36cfb0c43437fbaf23f12508aceb7",
              "IPY_MODEL_e4b5403ee738450ea2006a987ba35ac6",
              "IPY_MODEL_eb808614270c47319200d61adb12af9e"
            ],
            "layout": "IPY_MODEL_0fd681ca6b90450cbff0c468a4109770",
            "selected_index": 3
          }
        },
        "08c7b43de8d24c38a24bd3ffce74425f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4c1e29e777c24b9587f4d5e2f61b489d",
            "placeholder": "​",
            "style": "IPY_MODEL_8c799154cfd24cad84522bd24f81f758",
            "value": "<div style='color: green; margin-bottom: 10px;'><strong>✅ 全ての入力が有効です</strong></div>"
          }
        },
        "e5727b6fb4ab417b86807a96abb0e51a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_90a14abdffb849a59f46bbbd638a3507",
              "IPY_MODEL_71fbaeae6e5244e5a4b9ee4750be74a9"
            ],
            "layout": "IPY_MODEL_bcd860968473440dbec706e1de64a626"
          }
        },
        "7454f5dc1f5844119fe45b781fb7b069": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "バックテスト後にエクセル出力",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_ca5adc23a2cd461a8c3f2c6516fc4670",
            "style": "IPY_MODEL_bd900c2f230a4f7495ad428e4700289d",
            "value": false
          }
        },
        "2f56f671ab224815a1a66e2c4b98b8f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_34a897fc896743fd9e6a0e8bf16b5ec3",
              "IPY_MODEL_504f2521ebb64b349e10df84340b4ca6",
              "IPY_MODEL_9c007fe8f00349d9a701581f177b1c93"
            ],
            "layout": "IPY_MODEL_cf985d40ba3b4b8ea969b22098317aec"
          }
        },
        "5734643e385f46ea811b65e533693091": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextareaModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextareaModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextareaView",
            "continuous_update": true,
            "description": "Config JSON:",
            "description_tooltip": null,
            "disabled": true,
            "layout": "IPY_MODEL_6007533af46f4f0095459176ab9c92b7",
            "placeholder": "​",
            "rows": null,
            "style": "IPY_MODEL_d639fb1a36cc4be59975cb4920cc818a",
            "value": ""
          }
        },
        "642faf3583274717a49734763db8ed34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f5b641ed56774768af0b5fa5d54df1cd",
            "placeholder": "​",
            "style": "IPY_MODEL_6256dca97c434fbab2a12a500bcf0669",
            "value": "<b>Uploaded Portfolios:</b><br>None"
          }
        },
        "f786f47ed862430a93ace9917d5ccdeb": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_4d891ccc79084b6a95dbc9347e182d86",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "After configuring settings, click 'Fetch Data' to download price data.\n"
                ]
              }
            ]
          }
        },
        "93eecc0a3fd3435eb78b0dee6f14651a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8442bb5219744a9d936654658d03229f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_02fa1bbc300e4a66a0b5f580619ee28e",
              "IPY_MODEL_ecae879df81d49fe98e1c2478c480ae4"
            ],
            "layout": "IPY_MODEL_b9f2ab7c71ef40c8bb73092ae70566e9"
          }
        },
        "3907ebf917744e008b699bc46ca2b199": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d1f84ff24fdb4070bcc17e34e45fecfe",
              "IPY_MODEL_d91bdd615424438c8963990552d3fcfe",
              "IPY_MODEL_0e3b5bebaaad4617a7ef1b8ec79ad09b",
              "IPY_MODEL_59f7ef1cd16142dbb08f9b2aaba6e18a",
              "IPY_MODEL_a1cfe324311544739242e8a62610ccd5",
              "IPY_MODEL_481a312a5b9d477e9c77464e561ea52c",
              "IPY_MODEL_92a8f113259d452990272ada4f1c3335",
              "IPY_MODEL_8924415e69fd4434ba509ff9776fb618",
              "IPY_MODEL_af43cc6337ff4faeb56e5ff73b1122fa"
            ],
            "layout": "IPY_MODEL_d105a3f406cc4427947e012951fa9bb5"
          }
        },
        "5cb36cfb0c43437fbaf23f12508aceb7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_20ee8086490743eaa11acb56331fd518",
              "IPY_MODEL_b1b4506faa24467fab20b1ca5759e052",
              "IPY_MODEL_4fb7d38ff59342acb78ee11956a32210",
              "IPY_MODEL_19b8618f99234af6bb77f03599e79c2d"
            ],
            "layout": "IPY_MODEL_53f6d2f8dfe74e09836af8d3a9e8eeae"
          }
        },
        "e4b5403ee738450ea2006a987ba35ac6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_58906274b4c54ea1a7be96c7a8445d47",
              "IPY_MODEL_8b363e1183954d86a94944d4a4b2b5e6",
              "IPY_MODEL_de02d4d18082499ca6f2d1aaeb2b849e",
              "IPY_MODEL_8fe2fc6a4baf4faeaeb91481d55d5d39",
              "IPY_MODEL_c3fd692626f44b9d883760e7b5dde0fc",
              "IPY_MODEL_fae1b0ae9c4e46118a6ab5101bfedffd",
              "IPY_MODEL_d34acffd12a34256b2018d043267da7c",
              "IPY_MODEL_ceffb532775f41a180151a7d18ff2479"
            ],
            "layout": "IPY_MODEL_0b7f8bc6c4084fd29248ef10be635ca6"
          }
        },
        "eb808614270c47319200d61adb12af9e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_32edeb6bf8b245b184274c7eba07fc51",
              "IPY_MODEL_88edf01bc00a4f30874a2725e1f04766",
              "IPY_MODEL_695795cf98704de7ae7a44d8099a8ac9",
              "IPY_MODEL_225e106d39794d5c9f6d96a266055d41",
              "IPY_MODEL_3d78248ba0df44cfbebb65801c25b49e",
              "IPY_MODEL_0b8dbead31b74d6fb813cf44ac6f22d3",
              "IPY_MODEL_7bade3bcb17d421ca440d9485da1616e",
              "IPY_MODEL_97c9f5c1b89143f8bd76a38fdb5f89e8"
            ],
            "layout": "IPY_MODEL_4982315db6754d7d9bdfb9cbe938bac0"
          }
        },
        "0fd681ca6b90450cbff0c468a4109770": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4c1e29e777c24b9587f4d5e2f61b489d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8c799154cfd24cad84522bd24f81f758": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "90a14abdffb849a59f46bbbd638a3507": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Fetch Data",
            "disabled": false,
            "icon": "download",
            "layout": "IPY_MODEL_fee466dfd79d430a84db41dd1d8c5d38",
            "style": "IPY_MODEL_cc3a928123434d9d8bd74763658c83b6",
            "tooltip": ""
          }
        },
        "71fbaeae6e5244e5a4b9ee4750be74a9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "Run Backtest",
            "disabled": false,
            "icon": "play",
            "layout": "IPY_MODEL_e610df47ca87437da949fc5563dcc13c",
            "style": "IPY_MODEL_04973611a4a04bbcb469729023a1d120",
            "tooltip": ""
          }
        },
        "bcd860968473440dbec706e1de64a626": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ca5adc23a2cd461a8c3f2c6516fc4670": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bd900c2f230a4f7495ad428e4700289d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "34a897fc896743fd9e6a0e8bf16b5ec3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "info",
            "description": "Save Settings",
            "disabled": false,
            "icon": "save",
            "layout": "IPY_MODEL_a328c228200c40cb85cd96d52501e870",
            "style": "IPY_MODEL_bffb50d847414d85af58daa28c59b108",
            "tooltip": ""
          }
        },
        "504f2521ebb64b349e10df84340b4ca6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "warning",
            "description": "Load Settings",
            "disabled": false,
            "icon": "upload",
            "layout": "IPY_MODEL_2689c913e12a4e7dbfd10e2319edf542",
            "style": "IPY_MODEL_5bc66c8d7901409abaf3a4f147649e43",
            "tooltip": ""
          }
        },
        "9c007fe8f00349d9a701581f177b1c93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FileUploadModel",
          "model_module_version": "1.5.0",
          "state": {
            "_counter": 0,
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FileUploadModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FileUploadView",
            "accept": ".json",
            "button_style": "",
            "data": [],
            "description": "Upload",
            "description_tooltip": null,
            "disabled": false,
            "error": "",
            "icon": "upload",
            "layout": "IPY_MODEL_7ef642e526ce44ac867db179531cc698",
            "metadata": [],
            "multiple": false,
            "style": "IPY_MODEL_dfb7df2251724c9facf201fe905abfef"
          }
        },
        "cf985d40ba3b4b8ea969b22098317aec": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6007533af46f4f0095459176ab9c92b7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": "150px",
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "d639fb1a36cc4be59975cb4920cc818a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f5b641ed56774768af0b5fa5d54df1cd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6256dca97c434fbab2a12a500bcf0669": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "02fa1bbc300e4a66a0b5f580619ee28e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ceebf17ba5ed47d9abb1dbce60550e5d",
              "IPY_MODEL_2bc31e6d33694e678611d379e6d663f2"
            ],
            "layout": "IPY_MODEL_907d1fe29327479a80e1f833d92609e0"
          }
        },
        "ecae879df81d49fe98e1c2478c480ae4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_9f783e82947c4848b4591ab098bec5c8",
              "IPY_MODEL_7aa24d4c669a4008b652e027070cb591"
            ],
            "layout": "IPY_MODEL_3024532f548f40dfbeca0296c3e8e814"
          }
        },
        "b9f2ab7c71ef40c8bb73092ae70566e9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d1f84ff24fdb4070bcc17e34e45fecfe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SelectMultipleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SelectMultipleModel",
            "_options_labels": [
              "TQQQ",
              "TECL",
              "XLU",
              "SPXL",
              "QQQ"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "SelectMultipleView",
            "description": "Tickers:",
            "description_tooltip": null,
            "disabled": false,
            "index": [
              0,
              1
            ],
            "layout": "IPY_MODEL_87f0a4d49f264701827a7a6540a6324d",
            "rows": 5,
            "style": "IPY_MODEL_5e8142b43f6144a2b16542e36e59cdf4"
          }
        },
        "d91bdd615424438c8963990552d3fcfe": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Specify Tickers:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_465f271bb4494f3a98db95fe2b18810e",
            "placeholder": "例: TQQQ,TECL,UPRO",
            "style": "IPY_MODEL_ae0cc292028249b0bad35e6c89eefb4c",
            "value": ""
          }
        },
        "0e3b5bebaaad4617a7ef1b8ec79ad09b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "RadioButtonsModel",
            "_options_labels": [
              "Yes",
              "No"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "RadioButtonsView",
            "description": "Single absolute momentum:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_116c20137c9844ff8c14d17bca81c32f",
            "style": "IPY_MODEL_9683fa1e64b442baba78ea7698eb8668"
          }
        },
        "59f7ef1cd16142dbb08f9b2aaba6e18a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "RadioButtonsModel",
            "_options_labels": [
              "Yes",
              "No"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "RadioButtonsView",
            "description": "Negative relative momentum:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_a5fcf6da512242adb6601c30041b10ee",
            "style": "IPY_MODEL_6269c0e8d8af45b5924fd8e243b7a81b"
          }
        },
        "a1cfe324311544739242e8a62610ccd5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "LQD",
              "^VIX",
              "TMF"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Absolute momentum asset:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_a464d120299d4fb6ab5898d8c2ef377d",
            "style": "IPY_MODEL_ae7df6c1992f4a82a92d97d20049f875"
          }
        },
        "481a312a5b9d477e9c77464e561ea52c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Specify absolute momentum asset:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_184374cc907e4e0a8d041e473d054e0e",
            "placeholder": "例: TLT",
            "style": "IPY_MODEL_fbee48561c4345aa9ba5dd50e7df5fb8",
            "value": ""
          }
        },
        "92a8f113259d452990272ada4f1c3335": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SelectMultipleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SelectMultipleModel",
            "_options_labels": [
              "XLU",
              "GLD",
              "SHY",
              "TMV",
              "TQQQ",
              "Cash"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "SelectMultipleView",
            "description": "Out of Market Assets:",
            "description_tooltip": null,
            "disabled": false,
            "index": [
              0,
              1
            ],
            "layout": "IPY_MODEL_24b5d97b8c17445fb9203152c1e0ed31",
            "rows": 5,
            "style": "IPY_MODEL_18bf948d277d43a3b92b03c9bb97e8c9"
          }
        },
        "8924415e69fd4434ba509ff9776fb618": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Specify out of market asset:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_93a4b36d566c409fb63faf5ff6532aee",
            "placeholder": "例: TQQQ,IEF",
            "style": "IPY_MODEL_654a1645f2f742388fdccebd9f87b4d5",
            "value": ""
          }
        },
        "af43cc6337ff4faeb56e5ff73b1122fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "RadioButtonsModel",
            "_options_labels": [
              "Equal Weight",
              "Top 1"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "RadioButtonsView",
            "description": "退避先資産の選択:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_c8ffba920b634c6c851b939481e9c491",
            "style": "IPY_MODEL_1386d64387ce496ca524488f4191934b"
          }
        },
        "d105a3f406cc4427947e012951fa9bb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "20ee8086490743eaa11acb56331fd518": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "RadioButtonsModel",
            "_options_labels": [
              "Single Period",
              "Multiple Periods"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "RadioButtonsView",
            "description": "Performance Periods:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_6bc1cb31427248f59c460db8c6d0e16c",
            "style": "IPY_MODEL_a1fb639309f3453f9b8e8f07c022bc3b"
          }
        },
        "b1b4506faa24467fab20b1ca5759e052": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1bfd2ad18a7f4ab280010edd936d7131",
              "IPY_MODEL_296c34f590314f62a291829878691a2b",
              "IPY_MODEL_c6b864904a3c4877aeeba6bdbf6bbcdd",
              "IPY_MODEL_59fa4c57fcc34c9685eda040a0dfbf05"
            ],
            "layout": "IPY_MODEL_6babd3add649409da2a99ccaa4b54828"
          }
        },
        "4fb7d38ff59342acb78ee11956a32210": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a59e1dff4b01451bbdcac55bad12b593",
              "IPY_MODEL_9e5b0faf0ec6455caa43a7329b1fed05",
              "IPY_MODEL_09dfc6499c71434aa9aa3e30c30486ad",
              "IPY_MODEL_ae125c8770db4145a57e656820976655",
              "IPY_MODEL_168ef2e3e62347789b21d546ec9128aa",
              "IPY_MODEL_ed2a20303b634fa1abcccbccbdd2803a",
              "IPY_MODEL_cd543e08453f48b188be9e8e165d79e4",
              "IPY_MODEL_804cf11a24084add8c43cfd95bb9a7e8"
            ],
            "layout": "IPY_MODEL_87df3a7792f7486d82bfc0829cfd0ee2"
          }
        },
        "19b8618f99234af6bb77f03599e79c2d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Assets to hold:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_32f8efe1d7f54f6e9c9724c35ec2eb52",
            "style": "IPY_MODEL_6d91d5b8d3264b7d85a87b44e8037825"
          }
        },
        "53f6d2f8dfe74e09836af8d3a9e8eeae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "58906274b4c54ea1a7be96c7a8445d47": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Monthly",
              "Bimonthly (hold: 1,3,5,7,9,11)",
              "Bimonthly (hold: 2,4,6,8,10,12)",
              "Quarterly (hold: 1,4,7,10)",
              "Quarterly (hold: 2,5,8,11)",
              "Quarterly (hold: 3,6,9,12)"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Trading Frequency:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_51a7c828c4fe4b88bb13caae2d4a95c8",
            "style": "IPY_MODEL_c1b38f91f11c4d22bee49acc77d35f0d"
          }
        },
        "8b363e1183954d86a94944d4a4b2b5e6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e173737160fb4d89a4a673c32c152fd6",
            "placeholder": "​",
            "style": "IPY_MODEL_ea176a224ec444ef91634ef2508ff2c9",
            "value": "<p style=\"font-weight: bold;\">Trade Execution:</p>"
          }
        },
        "de02d4d18082499ca6f2d1aaeb2b849e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Trade at end of month price",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_7e52fe1f2a5c42f9ba5db4350d56350c",
            "style": "IPY_MODEL_3f408bfb1fbf4966986f928399512bc8",
            "value": false
          }
        },
        "8fe2fc6a4baf4faeaeb91481d55d5d39": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Trade at next close price",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_defe8d5c0b29402ba62534953304dec7",
            "style": "IPY_MODEL_7cf171146098465898a17c5e43bbdfea",
            "value": false
          }
        },
        "c3fd692626f44b9d883760e7b5dde0fc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Trade at next open price",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_c35c4cdd774f45d8a4d4a49b95fee1ff",
            "style": "IPY_MODEL_4bc46143a9ce40d59fec79156a307e93",
            "value": true
          }
        },
        "fae1b0ae9c4e46118a6ab5101bfedffd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Benchmark Ticker:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_56e966f85a574aa5ae899b7b1f2aa442",
            "placeholder": "​",
            "style": "IPY_MODEL_6b9c59fe79814c6992b7656985cfdc83",
            "value": "SPY"
          }
        },
        "d34acffd12a34256b2018d043267da7c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_99f0736433144e5797468191ad3f4f59",
            "placeholder": "​",
            "style": "IPY_MODEL_ce4079f743494b9a93c0593f7a343669",
            "value": "<br>"
          }
        },
        "ceffb532775f41a180151a7d18ff2479": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_207de5207a624b5fa535c5bef8c84302",
              "IPY_MODEL_97293c0f90de4098836d2bd6976858a6",
              "IPY_MODEL_9474fa7ca35e47a9882e1ec280653f15",
              "IPY_MODEL_9929a0569fa54ecd86093c02289d8232",
              "IPY_MODEL_391495adeed5404990c99f7de8d84d86"
            ],
            "layout": "IPY_MODEL_a92226768ccc4f209bde0bc6ae5ff301"
          }
        },
        "0b7f8bc6c4084fd29248ef10be635ca6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "32edeb6bf8b245b184274c7eba07fc51": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5d6cfb36151a4cd3a2ecc521e44a5a16",
            "placeholder": "​",
            "style": "IPY_MODEL_cd3d9821c6d740b3a5cde7c6c6ce9844",
            "value": "<b>出力オプション:</b>"
          }
        },
        "88edf01bc00a4f30874a2725e1f04766": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "パフォーマンスグラフ",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_ee58ea724ec24a26afd28630ae900081",
            "style": "IPY_MODEL_643ef27f685040bc981822856f666128",
            "value": true
          }
        },
        "695795cf98704de7ae7a44d8099a8ac9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "年次リターンテーブル",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_754d7baad0694b6c8d920fb14e4fce11",
            "style": "IPY_MODEL_8b50833556094ea19204ea5955005fb9",
            "value": true
          }
        },
        "225e106d39794d5c9f6d96a266055d41": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "月次リターンテーブル",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_241b0cfe496a47808e9f8e3b335c6c9a",
            "style": "IPY_MODEL_0e97034b539242ae965ec77222057267",
            "value": true
          }
        },
        "3d78248ba0df44cfbebb65801c25b49e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "モデルシグナル表示",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_ae57ef5ce9944811a3f4e4d9ee52125c",
            "style": "IPY_MODEL_58992a4aacb24012b27dc649be85718e",
            "value": true
          }
        },
        "0b8dbead31b74d6fb813cf44ac6f22d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "パフォーマンスサマリー",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_e0b835b0ebf2485680a472e9aae627e2",
            "style": "IPY_MODEL_de00c8b38ccc4fbb8779bba3a094b6b7",
            "value": true
          }
        },
        "7bade3bcb17d421ca440d9485da1616e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "取引履歴テーブル",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_05eebcb8759c4359b358d158dbd19094",
            "style": "IPY_MODEL_d710e3b45a924ec4af59133d625c226f",
            "value": true
          }
        },
        "97c9f5c1b89143f8bd76a38fdb5f89e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e6ba5383458245289497a8e1df6a7fbf",
              "IPY_MODEL_54484bb8aaa14880b1dd1c22d7bdc8ef",
              "IPY_MODEL_9609b193f967412fbc75e78484b91748",
              "IPY_MODEL_028d3f391a2d418c8fcc5901c3f6e287",
              "IPY_MODEL_a3948404786c4a25b60cc73cc62b1566",
              "IPY_MODEL_fca51d3f92f7422bac77b7ae58159103",
              "IPY_MODEL_e11fbe1c84694abca0a88ae6ce683800",
              "IPY_MODEL_eaa822d84e324dc69611507a5b270c53"
            ],
            "layout": "IPY_MODEL_c6012ca6587641d398cfb8ce113277e1"
          }
        },
        "4982315db6754d7d9bdfb9cbe938bac0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fee466dfd79d430a84db41dd1d8c5d38": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cc3a928123434d9d8bd74763658c83b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "e610df47ca87437da949fc5563dcc13c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "04973611a4a04bbcb469729023a1d120": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "a328c228200c40cb85cd96d52501e870": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bffb50d847414d85af58daa28c59b108": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "2689c913e12a4e7dbfd10e2319edf542": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5bc66c8d7901409abaf3a4f147649e43": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "7ef642e526ce44ac867db179531cc698": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dfb7df2251724c9facf201fe905abfef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "ceebf17ba5ed47d9abb1dbce60550e5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_70c2c91f112345218bdd1ea5918d81e7",
            "placeholder": "​",
            "style": "IPY_MODEL_eb445baa0f9f459f9425962d12fc98d4",
            "value": "<b>Start Year</b>"
          }
        },
        "2bc31e6d33694e678611d379e6d663f2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_464e42dd91284a999bec2758051fc015",
              "IPY_MODEL_eac1d09cbd2649018526337d87f9c7c7"
            ],
            "layout": "IPY_MODEL_3759be90bfa048139c8bcb03f78c7f9a"
          }
        },
        "907d1fe29327479a80e1f833d92609e0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9f783e82947c4848b4591ab098bec5c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ae5a0eda415b4896a9e7917a18e42a15",
            "placeholder": "​",
            "style": "IPY_MODEL_d8cc9ebcefcd414d933f836ff220497b",
            "value": "<b>End Year</b>"
          }
        },
        "7aa24d4c669a4008b652e027070cb591": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_45151555632d46b68482580053db5b84",
              "IPY_MODEL_b636bd3d370247e0af9ec4b003c8c32f"
            ],
            "layout": "IPY_MODEL_0278458bf3504c6a97c2da3433530e28"
          }
        },
        "3024532f548f40dfbeca0296c3e8e814": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "87f0a4d49f264701827a7a6540a6324d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4d01965b3ce345859235e7da5079586e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "465f271bb4494f3a98db95fe2b18810e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae0cc292028249b0bad35e6c89eefb4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "116c20137c9844ff8c14d17bca81c32f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9683fa1e64b442baba78ea7698eb8668": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "a5fcf6da512242adb6601c30041b10ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6269c0e8d8af45b5924fd8e243b7a81b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "a464d120299d4fb6ab5898d8c2ef377d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9ebbade587dd46fc9b47f6fb1fe7644d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "184374cc907e4e0a8d041e473d054e0e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fbee48561c4345aa9ba5dd50e7df5fb8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "24b5d97b8c17445fb9203152c1e0ed31": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "18bf948d277d43a3b92b03c9bb97e8c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "93a4b36d566c409fb63faf5ff6532aee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "654a1645f2f742388fdccebd9f87b4d5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "c8ffba920b634c6c851b939481e9c491": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1386d64387ce496ca524488f4191934b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "6bc1cb31427248f59c460db8c6d0e16c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a1fb639309f3453f9b8e8f07c022bc3b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "1bfd2ad18a7f4ab280010edd936d7131": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Lookback period:",
            "description_tooltip": null,
            "disabled": false,
            "index": 11,
            "layout": "IPY_MODEL_39f273e343f244369e5dec11209dadbc",
            "style": "IPY_MODEL_7d7f206b373e4a97bfbfd92f7d493e66"
          }
        },
        "296c34f590314f62a291829878691a2b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "RadioButtonsModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "RadioButtonsModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "RadioButtonsView",
            "description": "Unit:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_3ec42d19a66347219175b7fbf3c8b617",
            "style": "IPY_MODEL_92a79e52b2904a22b167a7f908cb3693"
          }
        },
        "c6b864904a3c4877aeeba6bdbf6bbcdd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_22afc6db129644b8a0e57fddc2f37667"
            ],
            "layout": "IPY_MODEL_813cc7925f5a4765b87551f9e1c98f4d"
          }
        },
        "59fa4c57fcc34c9685eda040a0dfbf05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4764015b018f4287a8cbc8ee70bdf316"
            ],
            "layout": "IPY_MODEL_770d009136404a16b02d6fc88f33de12"
          }
        },
        "6babd3add649409da2a99ccaa4b54828": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "none",
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a59e1dff4b01451bbdcac55bad12b593": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b9d4f28818914a2cb750bc5396dcb6ac",
            "placeholder": "​",
            "style": "IPY_MODEL_53f957a702a948eebad24754b07dec46",
            "value": "\n    <style>\n    .periods-table {\n        border-collapse: collapse;\n        width: 100%;\n    }\n    .periods-table th, .periods-table td {\n        text-align: left;\n        padding: 8px;\n        border-bottom: 1px solid #ddd;\n    }\n    </style>\n    \n    <div style=\"overflow-x: auto;\">\n      <table class=\"periods-table\">\n        <thead>\n          <tr>\n            <th>Period</th>\n            <th>Length</th>\n            <th>Unit</th>\n            <th>Weights (%)</th>\n          </tr>\n        </thead>\n      </table>\n    </div>\n    "
          }
        },
        "9e5b0faf0ec6455caa43a7329b1fed05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_aa13bc7e1dd04b95b530bcdedae63794",
              "IPY_MODEL_089dc7cd89cf49f0bb382a7c8b0cda92",
              "IPY_MODEL_99a956785d784dec8e45e7df20cb9f93",
              "IPY_MODEL_161cb9dc84d24bf59fae1ddf8ab05e19"
            ],
            "layout": "IPY_MODEL_a6a7b65e130d4bfba31b82bbbff65164"
          }
        },
        "09dfc6499c71434aa9aa3e30c30486ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_324eca29769f448881e30bff12fa278a",
              "IPY_MODEL_8a50b41b48204170a9a19d83f5a747f0",
              "IPY_MODEL_ea61d7c80490476da04a497f7b7a6fde",
              "IPY_MODEL_a5cc709c977d4daca5a58a33ba4fd557"
            ],
            "layout": "IPY_MODEL_d2588de92ee244dcb7d57215e263c2a1"
          }
        },
        "ae125c8770db4145a57e656820976655": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_303c2548cd154453bb890bd7adaaabc0",
              "IPY_MODEL_e1ddbd3c32954c9d88ee778e28348f6f",
              "IPY_MODEL_1281cbecdee74381a15d2ee4a13075b7",
              "IPY_MODEL_131e817d9aa14fceb4c8da5e23e51502"
            ],
            "layout": "IPY_MODEL_c25bd32e9484452aaf79c3d218863556"
          }
        },
        "168ef2e3e62347789b21d546ec9128aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4168aa9634df47c49aac893013cf767b",
              "IPY_MODEL_5f870ebce725420ca1f1576d11ccd73a",
              "IPY_MODEL_244d8b39fc9147ba85057372d47c1369",
              "IPY_MODEL_f7bd0cef1cce4de9bd38834ca105e60e"
            ],
            "layout": "IPY_MODEL_4ce555a20b3e466d8d261da74580f573"
          }
        },
        "ed2a20303b634fa1abcccbccbdd2803a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_4d9934de528c4c3d90edb89571f29fd2",
              "IPY_MODEL_31944974ede340eaa1ba19ad0ba60d97",
              "IPY_MODEL_550a43693d0f49949c57179963c4ae24",
              "IPY_MODEL_82baccfe9ad344bba545ca67721d2fa7"
            ],
            "layout": "IPY_MODEL_f71e96de9f794d5b8213f7273fc229ae"
          }
        },
        "cd543e08453f48b188be9e8e165d79e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2f052d13c1c542a091f7600aabca1f33",
            "placeholder": "​",
            "style": "IPY_MODEL_fa70f0ca9c1b4e0396992bd6d20a693e",
            "value": "<div style='margin-top: 20px'><b>Period Weighting:</b></div>"
          }
        },
        "804cf11a24084add8c43cfd95bb9a7e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Weight Performance",
              "Weight Rank Orders"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_d1af34e7be164cbe89a8a6097faf3c4d",
            "style": "IPY_MODEL_b58ec379b18a4d32b28d0f00fa605cad"
          }
        },
        "87df3a7792f7486d82bfc0829cfd0ee2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "block",
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "32f8efe1d7f54f6e9c9724c35ec2eb52": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6d91d5b8d3264b7d85a87b44e8037825": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "51a7c828c4fe4b88bb13caae2d4a95c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c1b38f91f11c4d22bee49acc77d35f0d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "e173737160fb4d89a4a673c32c152fd6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ea176a224ec444ef91634ef2508ff2c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7e52fe1f2a5c42f9ba5db4350d56350c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f408bfb1fbf4966986f928399512bc8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "defe8d5c0b29402ba62534953304dec7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7cf171146098465898a17c5e43bbdfea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c35c4cdd774f45d8a4d4a49b95fee1ff": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4bc46143a9ce40d59fec79156a307e93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "56e966f85a574aa5ae899b7b1f2aa442": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1e36934b014f4ed684afd7c50d42e528": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "99f0736433144e5797468191ad3f4f59": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ce4079f743494b9a93c0593f7a343669": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "207de5207a624b5fa535c5bef8c84302": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_482d87f30b264cbfa0d34243f1620e4d",
            "placeholder": "​",
            "style": "IPY_MODEL_8df8568485434138a1fed7a398fb610c",
            "value": "<b>Stop Loss Settings:</b>"
          }
        },
        "97293c0f90de4098836d2bd6976858a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Enable Stop Loss",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_dcc12a7b193342ae95b6e2cf7c161ae5",
            "style": "IPY_MODEL_cf51dbc81f1342468fb5045d85254b0c",
            "value": false
          }
        },
        "9474fa7ca35e47a9882e1ec280653f15": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "Stop Loss Threshold (%):",
            "description_tooltip": null,
            "disabled": true,
            "layout": "IPY_MODEL_69e776c305c04f1498fc6abd5a896d08",
            "step": 0.01,
            "style": "IPY_MODEL_934855ac57554814882c442c982f4429",
            "value": -0.1
          }
        },
        "9929a0569fa54ecd86093c02289d8232": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Keep Cash Position",
            "description_tooltip": null,
            "disabled": true,
            "indent": true,
            "layout": "IPY_MODEL_865b2aff623e41ab915b15c7df64f67c",
            "style": "IPY_MODEL_5076d6c04b97455f9240c7604834db32",
            "value": false
          }
        },
        "391495adeed5404990c99f7de8d84d86": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "10",
              "20",
              "30",
              "40",
              "50",
              "60",
              "70",
              "80",
              "90",
              "100"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Cash Conversion Percentage (%):",
            "description_tooltip": null,
            "disabled": true,
            "index": 4,
            "layout": "IPY_MODEL_9b8b624b8b5a4ebd83d6e705e5a1abab",
            "style": "IPY_MODEL_8b35004cc2014a2b9c985fc0b5abcf8b"
          }
        },
        "a92226768ccc4f209bde0bc6ae5ff301": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5d6cfb36151a4cd3a2ecc521e44a5a16": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd3d9821c6d740b3a5cde7c6c6ce9844": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ee58ea724ec24a26afd28630ae900081": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "643ef27f685040bc981822856f666128": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "754d7baad0694b6c8d920fb14e4fce11": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "8b50833556094ea19204ea5955005fb9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "241b0cfe496a47808e9f8e3b335c6c9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "0e97034b539242ae965ec77222057267": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ae57ef5ce9944811a3f4e4d9ee52125c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "58992a4aacb24012b27dc649be85718e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e0b835b0ebf2485680a472e9aae627e2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "de00c8b38ccc4fbb8779bba3a094b6b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "05eebcb8759c4359b358d158dbd19094": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "d710e3b45a924ec4af59133d625c226f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e6ba5383458245289497a8e1df6a7fbf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_41f0352ff2f0440fb3b6015a8012ab76",
            "placeholder": "​",
            "style": "IPY_MODEL_e6f4a791264d4da9982bbc6a377f1b68",
            "value": "<b>Excel Output Sheets:</b>"
          }
        },
        "54484bb8aaa14880b1dd1c22d7bdc8ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Settingsシート",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_2bbeef125722428d98bf00a155291458",
            "style": "IPY_MODEL_98f168308b9a4f5d8138b6a15e806ab9",
            "value": true
          }
        },
        "9609b193f967412fbc75e78484b91748": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Performanceシート",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_1ee35ba8fc114c40a95395a1ebd0638e",
            "style": "IPY_MODEL_be2741ffc1c24e30a2424a1258fea2f9",
            "value": true
          }
        },
        "028d3f391a2d418c8fcc5901c3f6e287": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Daily Returns Simple",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_fab758f7906c46d1a6837deb9e18676d",
            "style": "IPY_MODEL_54dacd3a29b048c8a1d13b4254b1f146",
            "value": true
          }
        },
        "a3948404786c4a25b60cc73cc62b1566": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "JSON Config",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_56216fd97abf4be98aa765d098373451",
            "style": "IPY_MODEL_7050477363e8483d8b4fd25af33efbb4",
            "value": true
          }
        },
        "fca51d3f92f7422bac77b7ae58159103": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Monthly Returns",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_e8f410b2b2b84c5c982fc2f50dcb13a5",
            "style": "IPY_MODEL_bf915f6b48e645f0b78bdcdcae7ebde1",
            "value": true
          }
        },
        "e11fbe1c84694abca0a88ae6ce683800": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Daily Returns Detailed",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_200c8346240c44aa85ec45c0bd77b386",
            "style": "IPY_MODEL_4c5b4157cb874d3caa3451b9f993ec00",
            "value": true
          }
        },
        "eaa822d84e324dc69611507a5b270c53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Trades",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_867cd51e1ac84643b33a7e4a8d8ace27",
            "style": "IPY_MODEL_f926a3484c864eb6a759b23664cb53bf",
            "value": true
          }
        },
        "c6012ca6587641d398cfb8ce113277e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "70c2c91f112345218bdd1ea5918d81e7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "eb445baa0f9f459f9425962d12fc98d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "464e42dd91284a999bec2758051fc015": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1990",
              "1991",
              "1992",
              "1993",
              "1994",
              "1995",
              "1996",
              "1997",
              "1998",
              "1999",
              "2000",
              "2001",
              "2002",
              "2003",
              "2004",
              "2005",
              "2006",
              "2007",
              "2008",
              "2009",
              "2010",
              "2011",
              "2012",
              "2013",
              "2014",
              "2015",
              "2016",
              "2017",
              "2018",
              "2019",
              "2020",
              "2021",
              "2022",
              "2023",
              "2024",
              "2025"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Year:",
            "description_tooltip": null,
            "disabled": false,
            "index": 20,
            "layout": "IPY_MODEL_4e8bb0f78c2a4ed6a9c36107e0168646",
            "style": "IPY_MODEL_a10d88833bf949dc878e3eccf7d89290"
          }
        },
        "eac1d09cbd2649018526337d87f9c7c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Month:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_06d310bf73504558b28137a86073faa6",
            "style": "IPY_MODEL_476fbac84ff14fbd86e0b7cc96d42226"
          }
        },
        "3759be90bfa048139c8bcb03f78c7f9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ae5a0eda415b4896a9e7917a18e42a15": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8cc9ebcefcd414d933f836ff220497b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "45151555632d46b68482580053db5b84": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1990",
              "1991",
              "1992",
              "1993",
              "1994",
              "1995",
              "1996",
              "1997",
              "1998",
              "1999",
              "2000",
              "2001",
              "2002",
              "2003",
              "2004",
              "2005",
              "2006",
              "2007",
              "2008",
              "2009",
              "2010",
              "2011",
              "2012",
              "2013",
              "2014",
              "2015",
              "2016",
              "2017",
              "2018",
              "2019",
              "2020",
              "2021",
              "2022",
              "2023",
              "2024",
              "2025"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Year:",
            "description_tooltip": null,
            "disabled": false,
            "index": 35,
            "layout": "IPY_MODEL_29b17b245c534b3281836628c91e1776",
            "style": "IPY_MODEL_3023619f159a458584a8ec7868cd967f"
          }
        },
        "b636bd3d370247e0af9ec4b003c8c32f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Month:",
            "description_tooltip": null,
            "disabled": false,
            "index": 4,
            "layout": "IPY_MODEL_04300dbe7e8a4bec8407266e0cf9a2e9",
            "style": "IPY_MODEL_fc6ede3f0c9a4622b44a6a9a1ce44a0c"
          }
        },
        "0278458bf3504c6a97c2da3433530e28": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "39f273e343f244369e5dec11209dadbc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7d7f206b373e4a97bfbfd92f7d493e66": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "3ec42d19a66347219175b7fbf3c8b617": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "92a79e52b2904a22b167a7f908cb3693": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "22afc6db129644b8a0e57fddc2f37667": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "絶対モメンタムの期間をカスタマイズ",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_f4b9ddefd68442fea473d15f15a6aa3c",
            "style": "IPY_MODEL_570dae206fc54c098ff903660a69c31c",
            "value": false
          }
        },
        "813cc7925f5a4765b87551f9e1c98f4d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4764015b018f4287a8cbc8ee70bdf316": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Absolute Momentum period:",
            "description_tooltip": null,
            "disabled": true,
            "index": 11,
            "layout": "IPY_MODEL_283c3e76c4d1484e8663985f371aac59",
            "style": "IPY_MODEL_f9982c119beb44989382e55d7308bf3c"
          }
        },
        "770d009136404a16b02d6fc88f33de12": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b9d4f28818914a2cb750bc5396dcb6ac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "53f957a702a948eebad24754b07dec46": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "aa13bc7e1dd04b95b530bcdedae63794": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e8e2633eba8f4120a30318b67b47e64a",
            "placeholder": "​",
            "style": "IPY_MODEL_9781d401b9b6462e9b78ba7f4fb0cc72",
            "value": "#1"
          }
        },
        "089dc7cd89cf49f0bb382a7c8b0cda92": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_423175001b364e2fbd3ecc319f866492",
            "style": "IPY_MODEL_f8dfcb8e3d8c43fd882fdf192943d0bd"
          }
        },
        "99a956785d784dec8e45e7df20cb9f93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_d7c584e5d3034812b73c74c411d27d82",
            "style": "IPY_MODEL_9683077a8f054a65888946c1b4756b44"
          }
        },
        "161cb9dc84d24bf59fae1ddf8ab05e19": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_237d2383770d4466adebfca37e921cef",
            "step": 5,
            "style": "IPY_MODEL_b6d1a8719eb7407ea7626d485c9a421e",
            "value": 20
          }
        },
        "a6a7b65e130d4bfba31b82bbbff65164": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": "8px",
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "324eca29769f448881e30bff12fa278a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bec76b6948904539be716e83e5588fe1",
            "placeholder": "​",
            "style": "IPY_MODEL_74695ecf79bd433fa3b7b410b8e82393",
            "value": "#2"
          }
        },
        "8a50b41b48204170a9a19d83f5a747f0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 5,
            "layout": "IPY_MODEL_a2dcf24208924134935a362a18d60352",
            "style": "IPY_MODEL_5e3daa5e6c9146f7b25fd79a2b97f0cb"
          }
        },
        "ea61d7c80490476da04a497f7b7a6fde": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_1360933038884d21beadab173c58d3fe",
            "style": "IPY_MODEL_c838d31bbba749ee987eb9dacfef5526"
          }
        },
        "a5cc709c977d4daca5a58a33ba4fd557": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_7e8e47cb54d749828d35064996f480bf",
            "step": 5,
            "style": "IPY_MODEL_a99138d091f3486a9add270e41346f7e",
            "value": 20
          }
        },
        "d2588de92ee244dcb7d57215e263c2a1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": "8px",
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "303c2548cd154453bb890bd7adaaabc0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5676f0c39144405791505c7366aa9a31",
            "placeholder": "​",
            "style": "IPY_MODEL_fa254f2fc1d34929a08db122730bff26",
            "value": "#3"
          }
        },
        "e1ddbd3c32954c9d88ee778e28348f6f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 11,
            "layout": "IPY_MODEL_439799de94274533b8e428bd9fa36303",
            "style": "IPY_MODEL_515d618f3ce3418fadb8fb9d4ce151d9"
          }
        },
        "1281cbecdee74381a15d2ee4a13075b7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_83f8f40e5e50446d82aea2d3c416ca53",
            "style": "IPY_MODEL_0a7f4764562148e5abe64f040c832684"
          }
        },
        "131e817d9aa14fceb4c8da5e23e51502": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_faff3448e5b14b1680ccbd2238238315",
            "step": 5,
            "style": "IPY_MODEL_96717d3da4514d60ac1fe3f7f8d48716",
            "value": 60
          }
        },
        "c25bd32e9484452aaf79c3d218863556": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": "8px",
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4168aa9634df47c49aac893013cf767b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a45aac1baf2e4555917c7efbbbe37796",
            "placeholder": "​",
            "style": "IPY_MODEL_68f580da17094bbf877c690d2ca38ab6",
            "value": "#4"
          }
        },
        "5f870ebce725420ca1f1576d11ccd73a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": null,
            "layout": "IPY_MODEL_da3a407cc84b4afd8a4feb6c75bcaf6b",
            "style": "IPY_MODEL_332b2f8017dc4bb7a322316bad5f39c6"
          }
        },
        "244d8b39fc9147ba85057372d47c1369": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": null,
            "layout": "IPY_MODEL_417bd17a8e5543bc88fb8f4457103718",
            "style": "IPY_MODEL_e92f5a6acb654ed8913983736189741b"
          }
        },
        "f7bd0cef1cce4de9bd38834ca105e60e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_c1adf67e82a34b3d9c271d171783e5e8",
            "step": 5,
            "style": "IPY_MODEL_21fac251904341dcbbc404f826265fad",
            "value": 0
          }
        },
        "4ce555a20b3e466d8d261da74580f573": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": "8px",
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4d9934de528c4c3d90edb89571f29fd2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_137d29f3e4694510bc88922b47ab835d",
            "placeholder": "​",
            "style": "IPY_MODEL_b31fcf1d838c41a2a0af4f0440e62a95",
            "value": "#5"
          }
        },
        "31944974ede340eaa1ba19ad0ba60d97": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "15",
              "18",
              "24",
              "30",
              "36"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": null,
            "layout": "IPY_MODEL_6ec1d5de9cae4883a1dfd633d1c7e454",
            "style": "IPY_MODEL_d3f04f8436374e05a74a878f87afcdba"
          }
        },
        "550a43693d0f49949c57179963c4ae24": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Months",
              "Days"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "index": null,
            "layout": "IPY_MODEL_9225f16d4cf84dca956ebd10ffa8de40",
            "style": "IPY_MODEL_3d4ca944762a4aeeb04fb123542b2b11"
          }
        },
        "82baccfe9ad344bba545ca67721d2fa7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntTextView",
            "continuous_update": false,
            "description": "",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_c96d91ead1924c0990ecaa736ec50899",
            "step": 5,
            "style": "IPY_MODEL_c77c027c1917419785decc3ee4787c9d",
            "value": 0
          }
        },
        "f71e96de9f794d5b8213f7273fc229ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": "8px",
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2f052d13c1c542a091f7600aabca1f33": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa70f0ca9c1b4e0396992bd6d20a693e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d1af34e7be164cbe89a8a6097faf3c4d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "200px"
          }
        },
        "b58ec379b18a4d32b28d0f00fa605cad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "482d87f30b264cbfa0d34243f1620e4d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8df8568485434138a1fed7a398fb610c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "dcc12a7b193342ae95b6e2cf7c161ae5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cf51dbc81f1342468fb5045d85254b0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "69e776c305c04f1498fc6abd5a896d08": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "934855ac57554814882c442c982f4429": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "865b2aff623e41ab915b15c7df64f67c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5076d6c04b97455f9240c7604834db32": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "9b8b624b8b5a4ebd83d6e705e5a1abab": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "8b35004cc2014a2b9c985fc0b5abcf8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "41f0352ff2f0440fb3b6015a8012ab76": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e6f4a791264d4da9982bbc6a377f1b68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2bbeef125722428d98bf00a155291458": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "98f168308b9a4f5d8138b6a15e806ab9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1ee35ba8fc114c40a95395a1ebd0638e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "be2741ffc1c24e30a2424a1258fea2f9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fab758f7906c46d1a6837deb9e18676d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "54dacd3a29b048c8a1d13b4254b1f146": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "56216fd97abf4be98aa765d098373451": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "7050477363e8483d8b4fd25af33efbb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e8f410b2b2b84c5c982fc2f50dcb13a5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "bf915f6b48e645f0b78bdcdcae7ebde1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "200c8346240c44aa85ec45c0bd77b386": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "4c5b4157cb874d3caa3451b9f993ec00": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "867cd51e1ac84643b33a7e4a8d8ace27": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "250px"
          }
        },
        "f926a3484c864eb6a759b23664cb53bf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4e8bb0f78c2a4ed6a9c36107e0168646": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c14490a8ba984a9a8466890e73f26987": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "06d310bf73504558b28137a86073faa6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c68da1b907c8430dbcfae7e296cdbe68": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "29b17b245c534b3281836628c91e1776": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0d62fd07eee145df990965234e7f1df1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "04300dbe7e8a4bec8407266e0cf9a2e9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "72c370f16c7d4e5f855489009c44acea": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "f4b9ddefd68442fea473d15f15a6aa3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "570dae206fc54c098ff903660a69c31c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "283c3e76c4d1484e8663985f371aac59": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f9982c119beb44989382e55d7308bf3c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "e8e2633eba8f4120a30318b67b47e64a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9781d401b9b6462e9b78ba7f4fb0cc72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "423175001b364e2fbd3ecc319f866492": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "f8dfcb8e3d8c43fd882fdf192943d0bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d7c584e5d3034812b73c74c411d27d82": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "9683077a8f054a65888946c1b4756b44": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "237d2383770d4466adebfca37e921cef": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "80px"
          }
        },
        "b6d1a8719eb7407ea7626d485c9a421e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bec76b6948904539be716e83e5588fe1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "74695ecf79bd433fa3b7b410b8e82393": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a2dcf24208924134935a362a18d60352": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "5e3daa5e6c9146f7b25fd79a2b97f0cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1360933038884d21beadab173c58d3fe": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "c838d31bbba749ee987eb9dacfef5526": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7e8e47cb54d749828d35064996f480bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "80px"
          }
        },
        "a99138d091f3486a9add270e41346f7e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5676f0c39144405791505c7366aa9a31": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fa254f2fc1d34929a08db122730bff26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "439799de94274533b8e428bd9fa36303": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "515d618f3ce3418fadb8fb9d4ce151d9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "83f8f40e5e50446d82aea2d3c416ca53": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "0a7f4764562148e5abe64f040c832684": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "faff3448e5b14b1680ccbd2238238315": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "80px"
          }
        },
        "96717d3da4514d60ac1fe3f7f8d48716": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a45aac1baf2e4555917c7efbbbe37796": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "68f580da17094bbf877c690d2ca38ab6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "da3a407cc84b4afd8a4feb6c75bcaf6b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "332b2f8017dc4bb7a322316bad5f39c6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "417bd17a8e5543bc88fb8f4457103718": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "e92f5a6acb654ed8913983736189741b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c1adf67e82a34b3d9c271d171783e5e8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "80px"
          }
        },
        "21fac251904341dcbbc404f826265fad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "137d29f3e4694510bc88922b47ab835d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b31fcf1d838c41a2a0af4f0440e62a95": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6ec1d5de9cae4883a1dfd633d1c7e454": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "d3f04f8436374e05a74a878f87afcdba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9225f16d4cf84dca956ebd10ffa8de40": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100px"
          }
        },
        "3d4ca944762a4aeeb04fb123542b2b11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c96d91ead1924c0990ecaa736ec50899": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "80px"
          }
        },
        "c77c027c1917419785decc3ee4787c9d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4d891ccc79084b6a95dbc9347e182d86": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a10d88833bf949dc878e3eccf7d89290": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "476fbac84ff14fbd86e0b7cc96d42226": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "3023619f159a458584a8ec7868cd967f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "fc6ede3f0c9a4622b44a6a9a1ce44a0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "5e8142b43f6144a2b16542e36e59cdf4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "ae7df6c1992f4a82a92d97d20049f875": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "6b9c59fe79814c6992b7656985cfdc83": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# pip insatall"
      ],
      "metadata": {
        "id": "LbqjPHbvVR2x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 新しいセクション\n",
        "\n",
        "#@title pandas_market_calendars\n",
        "!pip install -U -q pandas_market_calendars openpyxl fredapi yfinance"
      ],
      "metadata": {
        "id": "UmRP2omSMhOJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d38f7c11-60ec-44ac-84f0-acdbfa0f5252"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/123.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m123.9/123.9 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/200.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m200.1/200.1 kB\u001b[0m \u001b[31m13.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ストップロス追加"
      ],
      "metadata": {
        "id": "lolFEbGIU8-Q"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 951,
          "referenced_widgets": [
            "81040818d3cd466085818df25d72cb11",
            "e5e4e0929dc0428ab0641d4e6e4ce056",
            "08c7b43de8d24c38a24bd3ffce74425f",
            "e5727b6fb4ab417b86807a96abb0e51a",
            "7454f5dc1f5844119fe45b781fb7b069",
            "2f56f671ab224815a1a66e2c4b98b8f1",
            "5734643e385f46ea811b65e533693091",
            "642faf3583274717a49734763db8ed34",
            "f786f47ed862430a93ace9917d5ccdeb",
            "93eecc0a3fd3435eb78b0dee6f14651a",
            "8442bb5219744a9d936654658d03229f",
            "3907ebf917744e008b699bc46ca2b199",
            "5cb36cfb0c43437fbaf23f12508aceb7",
            "e4b5403ee738450ea2006a987ba35ac6",
            "eb808614270c47319200d61adb12af9e",
            "0fd681ca6b90450cbff0c468a4109770",
            "4c1e29e777c24b9587f4d5e2f61b489d",
            "8c799154cfd24cad84522bd24f81f758",
            "90a14abdffb849a59f46bbbd638a3507",
            "71fbaeae6e5244e5a4b9ee4750be74a9",
            "bcd860968473440dbec706e1de64a626",
            "ca5adc23a2cd461a8c3f2c6516fc4670",
            "bd900c2f230a4f7495ad428e4700289d",
            "34a897fc896743fd9e6a0e8bf16b5ec3",
            "504f2521ebb64b349e10df84340b4ca6",
            "9c007fe8f00349d9a701581f177b1c93",
            "cf985d40ba3b4b8ea969b22098317aec",
            "6007533af46f4f0095459176ab9c92b7",
            "d639fb1a36cc4be59975cb4920cc818a",
            "f5b641ed56774768af0b5fa5d54df1cd",
            "6256dca97c434fbab2a12a500bcf0669",
            "02fa1bbc300e4a66a0b5f580619ee28e",
            "ecae879df81d49fe98e1c2478c480ae4",
            "b9f2ab7c71ef40c8bb73092ae70566e9",
            "d1f84ff24fdb4070bcc17e34e45fecfe",
            "d91bdd615424438c8963990552d3fcfe",
            "0e3b5bebaaad4617a7ef1b8ec79ad09b",
            "59f7ef1cd16142dbb08f9b2aaba6e18a",
            "a1cfe324311544739242e8a62610ccd5",
            "481a312a5b9d477e9c77464e561ea52c",
            "92a8f113259d452990272ada4f1c3335",
            "8924415e69fd4434ba509ff9776fb618",
            "af43cc6337ff4faeb56e5ff73b1122fa",
            "d105a3f406cc4427947e012951fa9bb5",
            "20ee8086490743eaa11acb56331fd518",
            "b1b4506faa24467fab20b1ca5759e052",
            "4fb7d38ff59342acb78ee11956a32210",
            "19b8618f99234af6bb77f03599e79c2d",
            "53f6d2f8dfe74e09836af8d3a9e8eeae",
            "58906274b4c54ea1a7be96c7a8445d47",
            "8b363e1183954d86a94944d4a4b2b5e6",
            "de02d4d18082499ca6f2d1aaeb2b849e",
            "8fe2fc6a4baf4faeaeb91481d55d5d39",
            "c3fd692626f44b9d883760e7b5dde0fc",
            "fae1b0ae9c4e46118a6ab5101bfedffd",
            "d34acffd12a34256b2018d043267da7c",
            "ceffb532775f41a180151a7d18ff2479",
            "0b7f8bc6c4084fd29248ef10be635ca6",
            "32edeb6bf8b245b184274c7eba07fc51",
            "88edf01bc00a4f30874a2725e1f04766",
            "695795cf98704de7ae7a44d8099a8ac9",
            "225e106d39794d5c9f6d96a266055d41",
            "3d78248ba0df44cfbebb65801c25b49e",
            "0b8dbead31b74d6fb813cf44ac6f22d3",
            "7bade3bcb17d421ca440d9485da1616e",
            "97c9f5c1b89143f8bd76a38fdb5f89e8",
            "4982315db6754d7d9bdfb9cbe938bac0",
            "fee466dfd79d430a84db41dd1d8c5d38",
            "cc3a928123434d9d8bd74763658c83b6",
            "e610df47ca87437da949fc5563dcc13c",
            "04973611a4a04bbcb469729023a1d120",
            "a328c228200c40cb85cd96d52501e870",
            "bffb50d847414d85af58daa28c59b108",
            "2689c913e12a4e7dbfd10e2319edf542",
            "5bc66c8d7901409abaf3a4f147649e43",
            "7ef642e526ce44ac867db179531cc698",
            "dfb7df2251724c9facf201fe905abfef",
            "ceebf17ba5ed47d9abb1dbce60550e5d",
            "2bc31e6d33694e678611d379e6d663f2",
            "907d1fe29327479a80e1f833d92609e0",
            "9f783e82947c4848b4591ab098bec5c8",
            "7aa24d4c669a4008b652e027070cb591",
            "3024532f548f40dfbeca0296c3e8e814",
            "87f0a4d49f264701827a7a6540a6324d",
            "4d01965b3ce345859235e7da5079586e",
            "465f271bb4494f3a98db95fe2b18810e",
            "ae0cc292028249b0bad35e6c89eefb4c",
            "116c20137c9844ff8c14d17bca81c32f",
            "9683fa1e64b442baba78ea7698eb8668",
            "a5fcf6da512242adb6601c30041b10ee",
            "6269c0e8d8af45b5924fd8e243b7a81b",
            "a464d120299d4fb6ab5898d8c2ef377d",
            "9ebbade587dd46fc9b47f6fb1fe7644d",
            "184374cc907e4e0a8d041e473d054e0e",
            "fbee48561c4345aa9ba5dd50e7df5fb8",
            "24b5d97b8c17445fb9203152c1e0ed31",
            "18bf948d277d43a3b92b03c9bb97e8c9",
            "93a4b36d566c409fb63faf5ff6532aee",
            "654a1645f2f742388fdccebd9f87b4d5",
            "c8ffba920b634c6c851b939481e9c491",
            "1386d64387ce496ca524488f4191934b",
            "6bc1cb31427248f59c460db8c6d0e16c",
            "a1fb639309f3453f9b8e8f07c022bc3b",
            "1bfd2ad18a7f4ab280010edd936d7131",
            "296c34f590314f62a291829878691a2b",
            "c6b864904a3c4877aeeba6bdbf6bbcdd",
            "59fa4c57fcc34c9685eda040a0dfbf05",
            "6babd3add649409da2a99ccaa4b54828",
            "a59e1dff4b01451bbdcac55bad12b593",
            "9e5b0faf0ec6455caa43a7329b1fed05",
            "09dfc6499c71434aa9aa3e30c30486ad",
            "ae125c8770db4145a57e656820976655",
            "168ef2e3e62347789b21d546ec9128aa",
            "ed2a20303b634fa1abcccbccbdd2803a",
            "cd543e08453f48b188be9e8e165d79e4",
            "804cf11a24084add8c43cfd95bb9a7e8",
            "87df3a7792f7486d82bfc0829cfd0ee2",
            "32f8efe1d7f54f6e9c9724c35ec2eb52",
            "6d91d5b8d3264b7d85a87b44e8037825",
            "51a7c828c4fe4b88bb13caae2d4a95c8",
            "c1b38f91f11c4d22bee49acc77d35f0d",
            "e173737160fb4d89a4a673c32c152fd6",
            "ea176a224ec444ef91634ef2508ff2c9",
            "7e52fe1f2a5c42f9ba5db4350d56350c",
            "3f408bfb1fbf4966986f928399512bc8",
            "defe8d5c0b29402ba62534953304dec7",
            "7cf171146098465898a17c5e43bbdfea",
            "c35c4cdd774f45d8a4d4a49b95fee1ff",
            "4bc46143a9ce40d59fec79156a307e93",
            "56e966f85a574aa5ae899b7b1f2aa442",
            "1e36934b014f4ed684afd7c50d42e528",
            "99f0736433144e5797468191ad3f4f59",
            "ce4079f743494b9a93c0593f7a343669",
            "207de5207a624b5fa535c5bef8c84302",
            "97293c0f90de4098836d2bd6976858a6",
            "9474fa7ca35e47a9882e1ec280653f15",
            "9929a0569fa54ecd86093c02289d8232",
            "391495adeed5404990c99f7de8d84d86",
            "a92226768ccc4f209bde0bc6ae5ff301",
            "5d6cfb36151a4cd3a2ecc521e44a5a16",
            "cd3d9821c6d740b3a5cde7c6c6ce9844",
            "ee58ea724ec24a26afd28630ae900081",
            "643ef27f685040bc981822856f666128",
            "754d7baad0694b6c8d920fb14e4fce11",
            "8b50833556094ea19204ea5955005fb9",
            "241b0cfe496a47808e9f8e3b335c6c9a",
            "0e97034b539242ae965ec77222057267",
            "ae57ef5ce9944811a3f4e4d9ee52125c",
            "58992a4aacb24012b27dc649be85718e",
            "e0b835b0ebf2485680a472e9aae627e2",
            "de00c8b38ccc4fbb8779bba3a094b6b7",
            "05eebcb8759c4359b358d158dbd19094",
            "d710e3b45a924ec4af59133d625c226f",
            "e6ba5383458245289497a8e1df6a7fbf",
            "54484bb8aaa14880b1dd1c22d7bdc8ef",
            "9609b193f967412fbc75e78484b91748",
            "028d3f391a2d418c8fcc5901c3f6e287",
            "a3948404786c4a25b60cc73cc62b1566",
            "fca51d3f92f7422bac77b7ae58159103",
            "e11fbe1c84694abca0a88ae6ce683800",
            "eaa822d84e324dc69611507a5b270c53",
            "c6012ca6587641d398cfb8ce113277e1",
            "70c2c91f112345218bdd1ea5918d81e7",
            "eb445baa0f9f459f9425962d12fc98d4",
            "464e42dd91284a999bec2758051fc015",
            "eac1d09cbd2649018526337d87f9c7c7",
            "3759be90bfa048139c8bcb03f78c7f9a",
            "ae5a0eda415b4896a9e7917a18e42a15",
            "d8cc9ebcefcd414d933f836ff220497b",
            "45151555632d46b68482580053db5b84",
            "b636bd3d370247e0af9ec4b003c8c32f",
            "0278458bf3504c6a97c2da3433530e28",
            "39f273e343f244369e5dec11209dadbc",
            "7d7f206b373e4a97bfbfd92f7d493e66",
            "3ec42d19a66347219175b7fbf3c8b617",
            "92a79e52b2904a22b167a7f908cb3693",
            "22afc6db129644b8a0e57fddc2f37667",
            "813cc7925f5a4765b87551f9e1c98f4d",
            "4764015b018f4287a8cbc8ee70bdf316",
            "770d009136404a16b02d6fc88f33de12",
            "b9d4f28818914a2cb750bc5396dcb6ac",
            "53f957a702a948eebad24754b07dec46",
            "aa13bc7e1dd04b95b530bcdedae63794",
            "089dc7cd89cf49f0bb382a7c8b0cda92",
            "99a956785d784dec8e45e7df20cb9f93",
            "161cb9dc84d24bf59fae1ddf8ab05e19",
            "a6a7b65e130d4bfba31b82bbbff65164",
            "324eca29769f448881e30bff12fa278a",
            "8a50b41b48204170a9a19d83f5a747f0",
            "ea61d7c80490476da04a497f7b7a6fde",
            "a5cc709c977d4daca5a58a33ba4fd557",
            "d2588de92ee244dcb7d57215e263c2a1",
            "303c2548cd154453bb890bd7adaaabc0",
            "e1ddbd3c32954c9d88ee778e28348f6f",
            "1281cbecdee74381a15d2ee4a13075b7",
            "131e817d9aa14fceb4c8da5e23e51502",
            "c25bd32e9484452aaf79c3d218863556",
            "4168aa9634df47c49aac893013cf767b",
            "5f870ebce725420ca1f1576d11ccd73a",
            "244d8b39fc9147ba85057372d47c1369",
            "f7bd0cef1cce4de9bd38834ca105e60e",
            "4ce555a20b3e466d8d261da74580f573",
            "4d9934de528c4c3d90edb89571f29fd2",
            "31944974ede340eaa1ba19ad0ba60d97",
            "550a43693d0f49949c57179963c4ae24",
            "82baccfe9ad344bba545ca67721d2fa7",
            "f71e96de9f794d5b8213f7273fc229ae",
            "2f052d13c1c542a091f7600aabca1f33",
            "fa70f0ca9c1b4e0396992bd6d20a693e",
            "d1af34e7be164cbe89a8a6097faf3c4d",
            "b58ec379b18a4d32b28d0f00fa605cad",
            "482d87f30b264cbfa0d34243f1620e4d",
            "8df8568485434138a1fed7a398fb610c",
            "dcc12a7b193342ae95b6e2cf7c161ae5",
            "cf51dbc81f1342468fb5045d85254b0c",
            "69e776c305c04f1498fc6abd5a896d08",
            "934855ac57554814882c442c982f4429",
            "865b2aff623e41ab915b15c7df64f67c",
            "5076d6c04b97455f9240c7604834db32",
            "9b8b624b8b5a4ebd83d6e705e5a1abab",
            "8b35004cc2014a2b9c985fc0b5abcf8b",
            "41f0352ff2f0440fb3b6015a8012ab76",
            "e6f4a791264d4da9982bbc6a377f1b68",
            "2bbeef125722428d98bf00a155291458",
            "98f168308b9a4f5d8138b6a15e806ab9",
            "1ee35ba8fc114c40a95395a1ebd0638e",
            "be2741ffc1c24e30a2424a1258fea2f9",
            "fab758f7906c46d1a6837deb9e18676d",
            "54dacd3a29b048c8a1d13b4254b1f146",
            "56216fd97abf4be98aa765d098373451",
            "7050477363e8483d8b4fd25af33efbb4",
            "e8f410b2b2b84c5c982fc2f50dcb13a5",
            "bf915f6b48e645f0b78bdcdcae7ebde1",
            "200c8346240c44aa85ec45c0bd77b386",
            "4c5b4157cb874d3caa3451b9f993ec00",
            "867cd51e1ac84643b33a7e4a8d8ace27",
            "f926a3484c864eb6a759b23664cb53bf",
            "4e8bb0f78c2a4ed6a9c36107e0168646",
            "c14490a8ba984a9a8466890e73f26987",
            "06d310bf73504558b28137a86073faa6",
            "c68da1b907c8430dbcfae7e296cdbe68",
            "29b17b245c534b3281836628c91e1776",
            "0d62fd07eee145df990965234e7f1df1",
            "04300dbe7e8a4bec8407266e0cf9a2e9",
            "72c370f16c7d4e5f855489009c44acea",
            "f4b9ddefd68442fea473d15f15a6aa3c",
            "570dae206fc54c098ff903660a69c31c",
            "283c3e76c4d1484e8663985f371aac59",
            "f9982c119beb44989382e55d7308bf3c",
            "e8e2633eba8f4120a30318b67b47e64a",
            "9781d401b9b6462e9b78ba7f4fb0cc72",
            "423175001b364e2fbd3ecc319f866492",
            "f8dfcb8e3d8c43fd882fdf192943d0bd",
            "d7c584e5d3034812b73c74c411d27d82",
            "9683077a8f054a65888946c1b4756b44",
            "237d2383770d4466adebfca37e921cef",
            "b6d1a8719eb7407ea7626d485c9a421e",
            "bec76b6948904539be716e83e5588fe1",
            "74695ecf79bd433fa3b7b410b8e82393",
            "a2dcf24208924134935a362a18d60352",
            "5e3daa5e6c9146f7b25fd79a2b97f0cb",
            "1360933038884d21beadab173c58d3fe",
            "c838d31bbba749ee987eb9dacfef5526",
            "7e8e47cb54d749828d35064996f480bf",
            "a99138d091f3486a9add270e41346f7e",
            "5676f0c39144405791505c7366aa9a31",
            "fa254f2fc1d34929a08db122730bff26",
            "439799de94274533b8e428bd9fa36303",
            "515d618f3ce3418fadb8fb9d4ce151d9",
            "83f8f40e5e50446d82aea2d3c416ca53",
            "0a7f4764562148e5abe64f040c832684",
            "faff3448e5b14b1680ccbd2238238315",
            "96717d3da4514d60ac1fe3f7f8d48716",
            "a45aac1baf2e4555917c7efbbbe37796",
            "68f580da17094bbf877c690d2ca38ab6",
            "da3a407cc84b4afd8a4feb6c75bcaf6b",
            "332b2f8017dc4bb7a322316bad5f39c6",
            "417bd17a8e5543bc88fb8f4457103718",
            "e92f5a6acb654ed8913983736189741b",
            "c1adf67e82a34b3d9c271d171783e5e8",
            "21fac251904341dcbbc404f826265fad",
            "137d29f3e4694510bc88922b47ab835d",
            "b31fcf1d838c41a2a0af4f0440e62a95",
            "6ec1d5de9cae4883a1dfd633d1c7e454",
            "d3f04f8436374e05a74a878f87afcdba",
            "9225f16d4cf84dca956ebd10ffa8de40",
            "3d4ca944762a4aeeb04fb123542b2b11",
            "c96d91ead1924c0990ecaa736ec50899",
            "c77c027c1917419785decc3ee4787c9d",
            "4d891ccc79084b6a95dbc9347e182d86",
            "a10d88833bf949dc878e3eccf7d89290",
            "476fbac84ff14fbd86e0b7cc96d42226",
            "3023619f159a458584a8ec7868cd967f",
            "fc6ede3f0c9a4622b44a6a9a1ce44a0c",
            "5e8142b43f6144a2b16542e36e59cdf4",
            "ae7df6c1992f4a82a92d97d20049f875",
            "6b9c59fe79814c6992b7656985cfdc83"
          ]
        },
        "outputId": "5d776961-d2af-4d31-9fa4-698e2da0068a",
        "id": "t0DV3MdlUZtM",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Google Colab environment detected.\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m21.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h必要なパッケージをインストールしました（openpyxlを含む）\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(Tab(children=(VBox(children=(VBox(children=(HTML(value='<b>Start Year</b>'), HBox(children=(Dro…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "81040818d3cd466085818df25d72cb11"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "#@title 2025-04-29-11-14\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import yfinance as yf\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "import matplotlib.ticker as mticker\n",
        "import seaborn as sns\n",
        "from datetime import datetime, timedelta\n",
        "from dateutil.relativedelta import relativedelta\n",
        "import calendar\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output, HTML\n",
        "import json\n",
        "import gc\n",
        "from tqdm import tqdm\n",
        "import warnings\n",
        "import concurrent.futures\n",
        "import logging\n",
        "#logging.getLogger().setLevel(logging.INFO)\n",
        "import os\n",
        "import types\n",
        "import pandas_market_calendars as mcal\n",
        "\n",
        "# キャッシュ統計のログをオフにする\n",
        "logging.getLogger('DualMomentumModel').setLevel(logging.WARNING)\n",
        "\n",
        "# Pandasの警告抑制\n",
        "try:\n",
        "    pd.set_option('future.no_silent_downcasting', True)\n",
        "except Exception as e:\n",
        "    pass\n",
        "warnings.filterwarnings('ignore', category=pd.errors.PerformanceWarning)\n",
        "\n",
        "# ログ設定\n",
        "logging.basicConfig(\n",
        "    level=logging.INFO,\n",
        "    format='%(asctime)s - %(levelname)s - %(message)s',\n",
        "    datefmt='%Y-%m-%d %H:%M:%S'\n",
        ")\n",
        "logger = logging.getLogger('DualMomentumModel')\n",
        "\n",
        "# =============================================================================\n",
        "# 1. 入力値検証ユーティリティクラス\n",
        "# =============================================================================\n",
        "class InputValidator:\n",
        "    @staticmethod\n",
        "    def validate_lookback_period(value, unit):\n",
        "        if unit == \"Days\":\n",
        "            if value < 15 or value > 90:\n",
        "                return False, f\"Days の有効範囲は 15-90 です。入力値 {value} は範囲外です。\"\n",
        "        elif unit == \"Months\":\n",
        "            if value < 1 or value > 36:\n",
        "                return False, f\"Months の有効範囲は 1-36 です。入力値 {value} は範囲外です。\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_weights(weights):\n",
        "        valid_weights = [w for w in weights if w is not None and w > 0]\n",
        "        if not valid_weights:\n",
        "            return False, \"有効な重みがありません。少なくとも1つの期間に正の重みを設定してください。\"\n",
        "        total_weight = sum(valid_weights)\n",
        "        if abs(total_weight - 100) > 0.1:\n",
        "            return False, f\"重みの合計が100%ではありません。現在の合計: {total_weight:.2f}%\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_ticker_symbols(tickers):\n",
        "        if not tickers:\n",
        "            return False, \"少なくとも1つのティッカーシンボルを指定してください。\"\n",
        "        invalid_tickers = []\n",
        "        for ticker in tickers:\n",
        "            if not ticker or not ticker.strip() or any(c in ticker for c in \" !@#$%&*()+={}[]|\\\\/;:'\\\",<>?\"):\n",
        "                invalid_tickers.append(ticker)\n",
        "        if invalid_tickers:\n",
        "            return False, f\"無効なティッカーシンボル: {', '.join(invalid_tickers)}\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_date_range(start_year, start_month, end_year, end_month):\n",
        "        if start_month < 1 or start_month > 12:\n",
        "            return False, f\"開始月が無効です: {start_month}。1-12の範囲で指定してください。\"\n",
        "        if end_month < 1 or end_month > 12:\n",
        "            return False, f\"終了月が無効です: {end_month}。1-12の範囲で指定してください。\"\n",
        "        if start_year < 1990:\n",
        "            return False, f\"開始年が無効です: {start_year}。1990年以降を指定してください。\"\n",
        "        if end_year < start_year or (end_year == start_year and end_month < start_month):\n",
        "            return False, f\"終了日（{end_year}/{end_month}）は開始日（{start_year}/{start_month}）より後でなければなりません。\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_benchmark_ticker(ticker):\n",
        "        if not ticker or not ticker.strip():\n",
        "            return False, \"ベンチマークティッカーを指定してください。\"\n",
        "        if any(c in ticker for c in \" !@#$%&*()+={}[]|\\\\/;:'\\\",<>?\"):\n",
        "            return False, f\"無効なベンチマークティッカー: {ticker}\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_absolute_momentum_asset(ticker):\n",
        "        if not ticker or not ticker.strip():\n",
        "            return False, \"絶対モメンタム資産を指定してください。\"\n",
        "        if any(c in ticker for c in \" !@#$%&*()+={}[]|\\\\/;:'\\\",<>?\"):\n",
        "            return False, f\"無効な絶対モメンタム資産: {ticker}\"\n",
        "        return True, \"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def validate_out_of_market_assets(assets):\n",
        "        if not assets:\n",
        "            return False, \"少なくとも1つの退避先資産を指定してください。\"\n",
        "        invalid_assets = []\n",
        "        for asset in assets:\n",
        "            if not asset or not asset.strip() or any(c in asset for c in \" !@#$%&*()+={}[]|\\\\/;:'\\\",<>?\"):\n",
        "                invalid_assets.append(asset)\n",
        "        if invalid_assets:\n",
        "            return False, f\"無効な退避先資産: {', '.join(invalid_assets)}\"\n",
        "        return True, \"\"\n",
        "\n",
        "# =============================================================================\n",
        "# 2. パフォーマンスサマリ表示関数\n",
        "# =============================================================================\n",
        "def display_performance_summary(model, display_summary=True):\n",
        "    \"\"\"\n",
        "    DualMomentumModel クラスの display_performance_summary メソッドを呼び出すラッパー関数。\n",
        "    既存の依存関係を維持するために用意されています。\n",
        "\n",
        "    Parameters:\n",
        "    model (DualMomentumModel): 表示対象のモデルインスタンス\n",
        "    display_summary (bool): サマリーを表示するかどうか\n",
        "    \"\"\"\n",
        "    # クラスメソッドを呼び出し\n",
        "    model.display_performance_summary(display_summary=display_summary)\n",
        "\n",
        "# =============================================================================\n",
        "# 3. DualMomentumModel クラス\n",
        "# =============================================================================\n",
        "class DualMomentumModel:\n",
        "    def __init__(self):\n",
        "        today = datetime.now()\n",
        "        # 初期値は後でUIから上書きされる\n",
        "        self.start_year = 2010\n",
        "        self.start_month = 1\n",
        "        self.end_year = today.year\n",
        "        self.end_month = today.month\n",
        "        self.tickers = [\"TQQQ\", \"TECL\"]\n",
        "        self.single_absolute_momentum = \"Yes\"\n",
        "        self.absolute_momentum_asset = [\"LQD\"]\n",
        "        self.negative_relative_momentum = \"No\"\n",
        "        self.out_of_market_assets = [\"XLU\"]\n",
        "        self.out_of_market_strategy = \"Equal Weight\"   # 退避先資産の選択戦略 (\"Equal Weight\" または \"Top 1\")\n",
        "        self.performance_periods = \"Multiple Periods\"  # \"Single Period\"も選択可能\n",
        "        self.lookback_period = 12\n",
        "        self.lookback_unit = \"Months\"  # \"Days\"も選択可能\n",
        "        self.multiple_periods = [\n",
        "            {\"length\": 2, \"unit\": \"Months\", \"weight\": 20},\n",
        "            {\"length\": 6, \"unit\": \"Months\", \"weight\": 20},\n",
        "            {\"length\": 12, \"unit\": \"Months\", \"weight\": 60},\n",
        "            {\"length\": None, \"unit\": None, \"weight\": 0},\n",
        "            {\"length\": None, \"unit\": None, \"weight\": 0}\n",
        "        ]\n",
        "        self.multiple_periods_count = 3\n",
        "        self.weighting_method = \"Weight Performance\"\n",
        "        self.assets_to_hold = 1\n",
        "\n",
        "        self.trading_frequency = \"Monthly\"  # \"Monthly\", \"Bimonthly (hold: 1,3,5,7,9,11)\",\n",
        "                                            # \"Bimonthly (hold: 2,4,6,8,10,12)\",\n",
        "                                            # \"Quarterly (hold: 1,4,7,10)\", \"Quarterly (hold: 2,5,8,11)\",\n",
        "                                            # \"Quarterly (hold: 3,6,9,12)\"\n",
        "                                            # Note: For options with \"hold:\", rebalancing occurs at the end of the month prior to holding\n",
        "\n",
        "        self.trade_execution = \"Trade at next open price\"  # または \"Trade at end of month price\"\n",
        "        self.benchmark_ticker = \"SPY\"\n",
        "        self.price_data = None\n",
        "        self.monthly_data = None\n",
        "        self.results = None\n",
        "        self.rfr_data = None\n",
        "        self.rfr_data_daily = None  # 日次リスクフリーレート用\n",
        "        self.absolute_momentum_custom_period = False\n",
        "        self.absolute_momentum_period = 12\n",
        "        self.momentum_cache = {}\n",
        "        self._cache_expiry = 7  # キャッシュ有効期間（日）\n",
        "        self._last_data_fetch = None\n",
        "        self.valid_period_start = None\n",
        "        self.valid_period_end = None\n",
        "        self.momentum_results = None\n",
        "        self.data_quality_info = None\n",
        "        self.validation_errors = []\n",
        "        self.validation_warnings = []\n",
        "        self.stop_loss_enabled = False\n",
        "        self.stop_loss_threshold = -0.10  # デフォルト: -10%\n",
        "        self.stop_loss_keep_cash = False  # 追加: キャッシュ維持オプション\n",
        "        self.stop_loss_cash_percentage = 50  # デフォルト: 50%（一部キャッシュ化の割合）\n",
        "        self.stop_loss_triggered_assets = {}  # 一度ストップロスが発動した資産を記録\n",
        "        self.reference_prices = {}\n",
        "        self.cash_positions = {}\n",
        "        self.pending_cash_to_safety = {}\n",
        "        self.stop_loss_history = []\n",
        "\n",
        "    def _get_exact_period_dates(self, end_date, months):\n",
        "\n",
        "        \"\"\"\n",
        "        正確な計算期間の開始日と終了日を取得する\n",
        "        \"\"\"\n",
        "        # 終了日の調整（データ最終日を超えないように）\n",
        "        if self.price_data is not None and not self.price_data.empty:\n",
        "            available_dates = self.price_data.index[self.price_data.index <= end_date]\n",
        "            if not available_dates.empty:\n",
        "                end_date = available_dates[-1]\n",
        "\n",
        "        # 正確に N ヶ月前の日付を計算\n",
        "        start_date = end_date - relativedelta(months=months)\n",
        "\n",
        "        # 開始日の調整（データが存在する最も近い日に）\n",
        "        if self.price_data is not None and not self.price_data.empty:\n",
        "            available_dates = self.price_data.index[self.price_data.index <= start_date]\n",
        "            if not available_dates.empty:\n",
        "                start_date = available_dates[-1]\n",
        "\n",
        "        return start_date, end_date\n",
        "\n",
        "    # ----------------------\n",
        "    # キャッシュ管理メソッド\n",
        "    def clear_cache(self):\n",
        "        \"\"\"Clear the momentum cache and reset cache timestamps\"\"\"\n",
        "        self.momentum_cache = {}\n",
        "        self._last_data_fetch = None\n",
        "        logger.info(\"Cache cleared\")\n",
        "\n",
        "    def _save_to_cache(self, key, data):\n",
        "        \"\"\"Save calculated momentum data to cache with timestamp\"\"\"\n",
        "        self.momentum_cache[key] = {\n",
        "            'data': data,\n",
        "            'timestamp': datetime.now()\n",
        "        }\n",
        "        logger.debug(f\"Cache saved for key: {key}\")\n",
        "\n",
        "    def _get_from_cache(self, key):\n",
        "        \"\"\"Retrieve momentum data from cache if it exists and is not expired\"\"\"\n",
        "        if key not in self.momentum_cache:\n",
        "            return None\n",
        "        cache_entry = self.momentum_cache[key]\n",
        "        cache_age = (datetime.now() - cache_entry['timestamp']).days\n",
        "        if cache_age > self._cache_expiry:\n",
        "            logger.debug(f\"Cache entry expired for key {key} (age: {cache_age} days)\")\n",
        "            return None\n",
        "        return cache_entry['data']\n",
        "\n",
        "    def diagnose_cache(self):\n",
        "        \"\"\"Provide diagnostic information about the cache state\"\"\"\n",
        "        if not self.momentum_cache:\n",
        "            return {\n",
        "                \"status\": \"empty\",\n",
        "                \"message\": \"Cache is empty\",\n",
        "                \"entries\": 0\n",
        "            }\n",
        "        entries = len(self.momentum_cache)\n",
        "        oldest_entry = min([entry['timestamp'] for entry in self.momentum_cache.values()])\n",
        "        newest_entry = max([entry['timestamp'] for entry in self.momentum_cache.values()])\n",
        "        oldest_age = (datetime.now() - oldest_entry).days\n",
        "        if oldest_age > self._cache_expiry:\n",
        "            status = \"stale\"\n",
        "            message = f\"Cache contains stale entries (oldest: {oldest_age} days, expiry: {self._cache_expiry} days)\"\n",
        "        else:\n",
        "            status = \"ok\"\n",
        "            message = f\"Cache contains {entries} valid entries\"\n",
        "        return {\n",
        "            \"status\": status,\n",
        "            \"message\": message,\n",
        "            \"entries\": entries,\n",
        "            \"oldest_entry\": oldest_entry,\n",
        "            \"newest_entry\": newest_entry,\n",
        "            \"oldest_age_days\": oldest_age,\n",
        "            \"expiry_days\": self._cache_expiry\n",
        "        }\n",
        "\n",
        "    def clear_results(self):\n",
        "        \"\"\"すべての結果関連インスタンス変数をクリアする\"\"\"\n",
        "        self.results = None\n",
        "        self.positions = []\n",
        "        self.monthly_returns_data = {}\n",
        "        self.pivot_monthly_returns = None\n",
        "        self.momentum_results = None\n",
        "        self.metrics = None\n",
        "\n",
        "        # ストップロス関連の状態変数をリセット\n",
        "        self.stop_loss_triggered_assets = {}  # 追加: 過去に発動した資産記録をクリア\n",
        "        self.reference_prices = {}            # 追加: 基準価格をクリア\n",
        "        self.cash_positions = {}              # 追加: キャッシュポジションをクリア\n",
        "        self.pending_cash_to_safety = {}      # 追加: 保留中の移行処理をクリア\n",
        "        self.stop_loss_history = []           # 追加: ストップロス履歴をクリア\n",
        "\n",
        "        self.clear_cache()\n",
        "        logger.info(\"全ての結果データがクリアされました\")\n",
        "\n",
        "    # ----------------------\n",
        "    def validate_parameters(self):\n",
        "        errors = []\n",
        "        warnings_list = []\n",
        "        valid, message = InputValidator.validate_date_range(\n",
        "            self.start_year, self.start_month, self.end_year, self.end_month\n",
        "        )\n",
        "        if not valid:\n",
        "            errors.append(message)\n",
        "        valid, message = InputValidator.validate_ticker_symbols(self.tickers)\n",
        "        if not valid:\n",
        "            errors.append(message)\n",
        "        if self.performance_periods == \"Single Period\":\n",
        "            valid, message = InputValidator.validate_lookback_period(\n",
        "                self.lookback_period, self.lookback_unit\n",
        "            )\n",
        "            if not valid:\n",
        "                errors.append(message)\n",
        "            if self.absolute_momentum_custom_period:\n",
        "                valid, message = InputValidator.validate_lookback_period(\n",
        "                    self.absolute_momentum_period, self.lookback_unit\n",
        "                )\n",
        "                if not valid:\n",
        "                    errors.append(f\"絶対モメンタム期間のエラー: {message}\")\n",
        "        else:\n",
        "            period_weights = []\n",
        "            for i, period in enumerate(self.multiple_periods):\n",
        "                length = period.get(\"length\")\n",
        "                unit = period.get(\"unit\")\n",
        "                weight = period.get(\"weight\", 0)\n",
        "                if length is not None and weight > 0:\n",
        "                    valid, message = InputValidator.validate_lookback_period(length, unit)\n",
        "                    if not valid:\n",
        "                        errors.append(f\"期間 #{i+1} のエラー: {message}\")\n",
        "                    period_weights.append(weight)\n",
        "            if period_weights:\n",
        "                valid, message = InputValidator.validate_weights(period_weights)\n",
        "                if not valid:\n",
        "                    warnings_list.append(message)\n",
        "                    logger.warning(message)\n",
        "                    total = sum(period_weights)\n",
        "                    if total > 0:\n",
        "                        for i, period in enumerate(self.multiple_periods):\n",
        "                            if period.get(\"weight\", 0) > 0:\n",
        "                                period[\"weight\"] = round(period[\"weight\"] * 100 / total)\n",
        "                        adjusted_weights = [p[\"weight\"] for p in self.multiple_periods if p.get(\"weight\", 0) > 0]\n",
        "                        adjusted_total = sum(adjusted_weights)\n",
        "                        if adjusted_total != 100 and adjusted_weights:\n",
        "                            diff = 100 - adjusted_total\n",
        "                            max_idx = adjusted_weights.index(max(adjusted_weights))\n",
        "                            count = 0\n",
        "                            for i, period in enumerate(self.multiple_periods):\n",
        "                                if period.get(\"weight\", 0) > 0:\n",
        "                                    if count == max_idx:\n",
        "                                        period[\"weight\"] += diff\n",
        "                                    count += 1\n",
        "                            logger.info(f\"重みが自動調整されました: {[p['weight'] for p in self.multiple_periods if p.get('weight', 0) > 0]}\")\n",
        "            else:\n",
        "                errors.append(\"複数期間モードでは、少なくとも1つの期間に正の重みを設定する必要があります。\")\n",
        "        if self.assets_to_hold < 1:\n",
        "            errors.append(f\"保有資産数は1以上である必要があります: {self.assets_to_hold}\")\n",
        "        if not self.out_of_market_assets:\n",
        "            warnings_list.append(\"退避先資産が指定されていません。市場退出時の代替資産がありません。\")\n",
        "        return len(errors) == 0, errors, warnings_list\n",
        "\n",
        "    def check_data_quality(self, max_consecutive_na_threshold=20):\n",
        "        quality_warnings = []\n",
        "        if self.price_data is None or self.price_data.empty:\n",
        "            quality_warnings.append(\"価格データが空です。\")\n",
        "            return False, quality_warnings\n",
        "        data_period_days = (self.price_data.index[-1] - self.price_data.index[0]).days\n",
        "        data_period_years = data_period_days / 365.25\n",
        "        logger.info(f\"データ全体の期間: {self.price_data.index[0].strftime('%Y-%m-%d')} から {self.price_data.index[-1].strftime('%Y-%m-%d')} ({data_period_days}日間, 約{data_period_years:.1f}年)\")\n",
        "        assets_info = {}\n",
        "        for column in self.price_data.columns:\n",
        "            valid_count = self.price_data[column].count()\n",
        "            total_count = len(self.price_data)\n",
        "            missing_count = total_count - valid_count\n",
        "            missing_percentage = (missing_count / total_count) * 100 if total_count > 0 else 0\n",
        "            max_consecutive_na = 0\n",
        "            current_consecutive_na = 0\n",
        "            for val in self.price_data[column]:\n",
        "                if pd.isna(val):\n",
        "                    current_consecutive_na += 1\n",
        "                    max_consecutive_na = max(max_consecutive_na, current_consecutive_na)\n",
        "                else:\n",
        "                    current_consecutive_na = 0\n",
        "            zero_count = len(self.price_data[self.price_data[column] == 0])\n",
        "            negative_count = len(self.price_data[self.price_data[column] < 0])\n",
        "            asset_data = self.price_data[column].dropna()\n",
        "            first_date = asset_data.index[0] if not asset_data.empty else None\n",
        "            last_date = asset_data.index[-1] if not asset_data.empty else None\n",
        "            assets_info[column] = {\n",
        "                \"valid_count\": valid_count,\n",
        "                \"missing_count\": missing_count,\n",
        "                \"missing_percentage\": missing_percentage,\n",
        "                \"max_consecutive_na\": max_consecutive_na,\n",
        "                \"zero_count\": zero_count,\n",
        "                \"negative_count\": negative_count,\n",
        "                \"first_date\": first_date,\n",
        "                \"last_date\": last_date\n",
        "            }\n",
        "            if max_consecutive_na >= max_consecutive_na_threshold:\n",
        "                quality_warnings.append(f\"資産 {column} に {max_consecutive_na} 日連続の欠損データがあります。（閾値: {max_consecutive_na_threshold}日）\")\n",
        "            if zero_count > 0:\n",
        "                quality_warnings.append(f\"資産 {column} に {zero_count} 件のゼロ値があります。\")\n",
        "            if negative_count > 0:\n",
        "                quality_warnings.append(f\"資産 {column} に {negative_count} 件の負の値があります。これは通常、価格データでは想定されません。\")\n",
        "            if missing_percentage > 10:\n",
        "                quality_warnings.append(f\"資産 {column} のデータ欠損率が高いです: {missing_percentage:.1f}%\")\n",
        "        valid_starts = [info[\"first_date\"] for _, info in assets_info.items() if info[\"first_date\"] is not None]\n",
        "        valid_ends = [info[\"last_date\"] for _, info in assets_info.items() if info[\"last_date\"] is not None]\n",
        "        if valid_starts and valid_ends:\n",
        "            common_start = max(valid_starts)\n",
        "            common_end = min(valid_ends)\n",
        "            if common_start <= common_end:\n",
        "                common_period_days = (common_end - common_start).days\n",
        "                common_period_years = common_period_days / 365.25\n",
        "                logger.info(f\"全対象資産共通の有効期間: {common_start.strftime('%Y-%m-%d')} から {common_end.strftime('%Y-%m-%d')} ({common_period_days}日間, 約{common_period_years:.1f}年)\")\n",
        "                if common_period_days < 365:\n",
        "                    quality_warnings.append(f\"共通有効期間が短いです: {common_period_days}日（約{common_period_years:.1f}年）。より長い期間でのバックテストをお勧めします。\")\n",
        "                self.valid_period_start = common_start\n",
        "                self.valid_period_end = common_end\n",
        "            else:\n",
        "                quality_warnings.append(f\"全対象資産に共通する有効期間がありません。最長開始日: {common_start.strftime('%Y-%m-%d')}, 最短終了日: {common_end.strftime('%Y-%m-%d')}\")\n",
        "        else:\n",
        "            quality_warnings.append(\"有効な日付情報がない資産があります。\")\n",
        "        self.data_quality_info = {\n",
        "            \"assets_info\": assets_info,\n",
        "            \"warnings\": quality_warnings,\n",
        "            \"check_timestamp\": datetime.now()\n",
        "        }\n",
        "        return len(quality_warnings) == 0, quality_warnings\n",
        "\n",
        "    def display_data_quality_info(self):\n",
        "        if not hasattr(self, 'data_quality_info') or self.data_quality_info is None:\n",
        "            print(\"データ品質情報がありません。check_data_quality()を実行してください。\")\n",
        "            return\n",
        "        check_time = self.data_quality_info[\"check_timestamp\"].strftime(\"%Y-%m-%d %H:%M:%S\")\n",
        "        html_output = f\"\"\"\n",
        "        <h3>データ品質チェック結果 ({check_time})</h3>\n",
        "        \"\"\"\n",
        "        warnings_list = self.data_quality_info[\"warnings\"]\n",
        "        if warnings_list:\n",
        "            html_output += \"<div style='color: #c00; margin-bottom: 10px;'><p><strong>⚠️ 警告:</strong></p><ul>\"\n",
        "            for warning in warnings_list:\n",
        "                html_output += f\"<li>{warning}</li>\"\n",
        "            html_output += \"</ul></div>\"\n",
        "        else:\n",
        "            html_output += \"<p style='color: #0c0;'><strong>✅ データ品質に問題は見つかりませんでした。</strong></p>\"\n",
        "        assets_info = self.data_quality_info[\"assets_info\"]\n",
        "        html_output += \"\"\"\n",
        "        <table style=\"border-collapse: collapse; width: 100%; margin-top: 15px;\">\n",
        "        <tr style=\"background-color: #f2f2f2;\">\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: left;\">資産</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">有効開始日</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">有効終了日</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">欠損率</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">最大連続欠損</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">ゼロ値</th>\n",
        "          <th style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">負の値</th>\n",
        "        </tr>\n",
        "        \"\"\"\n",
        "        for asset, info in assets_info.items():\n",
        "            first_date_str = info[\"first_date\"].strftime(\"%Y-%m-%d\") if info[\"first_date\"] is not None else \"N/A\"\n",
        "            last_date_str = info[\"last_date\"].strftime(\"%Y-%m-%d\") if info[\"last_date\"] is not None else \"N/A\"\n",
        "            missing_color = \"#0c0\"\n",
        "            if info[\"missing_percentage\"] > 5:\n",
        "                missing_color = \"#fc0\"\n",
        "            if info[\"missing_percentage\"] > 10:\n",
        "                missing_color = \"#c00\"\n",
        "            consecutive_color = \"#0c0\"\n",
        "            if info[\"max_consecutive_na\"] > 5:\n",
        "                consecutive_color = \"#fc0\"\n",
        "            if info[\"max_consecutive_na\"] > 20:\n",
        "                consecutive_color = \"#c00\"\n",
        "            zeros_color = \"#0c0\" if info[\"zero_count\"] == 0 else \"#c00\"\n",
        "            negatives_color = \"#0c0\" if info[\"negative_count\"] == 0 else \"#c00\"\n",
        "            html_output += f\"\"\"\n",
        "            <tr>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px;\">{asset}</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">{first_date_str}</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center;\">{last_date_str}</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center; color: {missing_color};\">{info[\"missing_percentage\"]:.2f}%</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center; color: {consecutive_color};\">{info[\"max_consecutive_na\"]}</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center; color: {zeros_color};\">{info[\"zero_count\"]}</td>\n",
        "              <td style=\"border: 1px solid #ddd; padding: 8px; text-align: center; color: {negatives_color};\">{info[\"negative_count\"]}</td>\n",
        "            </tr>\n",
        "            \"\"\"\n",
        "        html_output += \"</table>\"\n",
        "        if hasattr(self, 'valid_period_start') and self.valid_period_start is not None:\n",
        "            common_period_days = (self.valid_period_end - self.valid_period_start).days\n",
        "            common_period_years = common_period_days / 365.25\n",
        "            html_output += f\"\"\"\n",
        "            <div style=\"margin-top: 15px;\">\n",
        "              <p><strong>共通有効期間:</strong> {self.valid_period_start.strftime(\"%Y-%m-%d\")} から {self.valid_period_end.strftime(\"%Y-%m-%d\")}</p>\n",
        "              <p><strong>期間長:</strong> {common_period_days}日間 (約{common_period_years:.1f}年)</p>\n",
        "            </div>\n",
        "            \"\"\"\n",
        "        display(HTML(html_output))\n",
        "\n",
        "    def display_fetch_summary_text(self):\n",
        "        if self.price_data is None or self.price_data.empty:\n",
        "            print(\"=========================================\")\n",
        "            print(\"❌ データ取得に失敗しました\")\n",
        "            print(\"=========================================\")\n",
        "            print(\"価格データが取得できませんでした。設定を見直してから再試行してください。\")\n",
        "            return\n",
        "\n",
        "        assets_info = []\n",
        "        for asset in self.price_data.columns:\n",
        "            asset_data = self.price_data[asset].dropna()\n",
        "            if not asset_data.empty:\n",
        "                first_date = asset_data.index[0]\n",
        "                last_date = asset_data.index[-1]\n",
        "                days = len(asset_data)\n",
        "                years = round(days / 252, 1)\n",
        "                assets_info.append({\n",
        "                    \"asset\": asset,\n",
        "                    \"start_date\": first_date.strftime('%Y-%m-%d'),\n",
        "                    \"end_date\": last_date.strftime('%Y-%m-%d'),\n",
        "                    \"years\": years\n",
        "                })\n",
        "\n",
        "        print(\"=========================================\")\n",
        "        print(\"✅ データ取得完了\")\n",
        "        print(\"=========================================\")\n",
        "        print()\n",
        "        print(\"【取得資産】\")\n",
        "        print(\", \".join([info[\"asset\"] for info in assets_info]))\n",
        "        print()\n",
        "        if hasattr(self, 'valid_period_start') and self.valid_period_start is not None:\n",
        "            common_days = (self.valid_period_end - self.valid_period_start).days\n",
        "            common_years = round(common_days / 365.25, 1)\n",
        "            print(\"【共通データ期間】\")\n",
        "            print(f\"開始日: {self.valid_period_start.strftime('%Y-%m-%d')}\")\n",
        "            print(f\"終了日: {self.valid_period_end.strftime('%Y-%m-%d')}\")\n",
        "            print(f\"期間長: {common_days}日間 (約{common_years}年)\")\n",
        "            print()\n",
        "        if self.performance_periods == \"Single Period\":\n",
        "            lookback_info = f\"{self.lookback_period}{'ヶ月' if self.lookback_unit == 'Months' else '日間'}\"\n",
        "            if self.lookback_unit == 'Months' and self.lookback_period >= 12:\n",
        "                years_val = self.lookback_period // 12\n",
        "                months_val = self.lookback_period % 12\n",
        "                lookback_info += f\"（{years_val}年\"\n",
        "                if months_val > 0:\n",
        "                    lookback_info += f\"{months_val}ヶ月\"\n",
        "                lookback_info += \"）\"\n",
        "            print(\"【設定ルックバック期間】\")\n",
        "            print(lookback_info)\n",
        "            print()\n",
        "        else:\n",
        "            print(\"【ルックバック期間設定（複数期間使用）】\")\n",
        "            max_lookback = 0\n",
        "            max_unit = \"Months\"\n",
        "            for period in self.multiple_periods:\n",
        "                if period.get(\"length\") is not None and period.get(\"weight\", 0) > 0:\n",
        "                    length = period[\"length\"]\n",
        "                    unit = period[\"unit\"]\n",
        "                    weight = period[\"weight\"]\n",
        "                    if unit == \"Months\" and length > max_lookback:\n",
        "                        max_lookback = length\n",
        "                        max_unit = \"Months\"\n",
        "                    elif unit == \"Days\" and (max_unit == \"Days\" or length > max_lookback * 30):\n",
        "                        max_lookback = length\n",
        "                        max_unit = \"Days\"\n",
        "                    period_info = f\"{length}{'ヶ月' if unit == 'Months' else '日間'}\"\n",
        "                    if unit == 'Months' and length >= 12:\n",
        "                        years_val = length // 12\n",
        "                        months_val = length % 12\n",
        "                        period_info += f\"（{years_val}年\"\n",
        "                        if months_val > 0:\n",
        "                            period_info += f\"{months_val}ヶ月\"\n",
        "                        period_info += \"）\"\n",
        "                    print(f\"- {period_info}: {weight}%\")\n",
        "            print()\n",
        "        if self.performance_periods == \"Single Period\":\n",
        "            if self.lookback_unit == \"Months\":\n",
        "                effective_start = self.valid_period_start + relativedelta(months=self.lookback_period)\n",
        "            else:\n",
        "                effective_start = self.valid_period_start + timedelta(days=self.lookback_period)\n",
        "        else:\n",
        "            if max_unit == \"Months\":\n",
        "                effective_start = self.valid_period_start + relativedelta(months=max_lookback)\n",
        "            else:\n",
        "                effective_start = self.valid_period_start + timedelta(days=max_lookback)\n",
        "        if effective_start <= self.valid_period_end:\n",
        "            effective_days = (self.valid_period_end - effective_start).days\n",
        "            effective_years = round(effective_days / 365.25, 1)\n",
        "            print(\"【実行可能バックテスト期間】\")\n",
        "            print(f\"開始日: {effective_start.strftime('%Y-%m-%d')} (ルックバック期間適用後)\")\n",
        "            print(f\"終了日: {self.valid_period_end.strftime('%Y-%m-%d')}\")\n",
        "            print(f\"期間長: {effective_days}日間 (約{effective_years}年)\")\n",
        "            print()\n",
        "        print(\"-----------------------------------------\")\n",
        "        print(\"詳細資産情報:\")\n",
        "        print(\"-----------------------------------------\")\n",
        "        print(\"資産    開始日        終了日        データ期間\")\n",
        "        for info in assets_info:\n",
        "            print(f\"{info['asset']:<8}{info['start_date']:<14}{info['end_date']:<14}{info['years']}年\")\n",
        "        print()\n",
        "        print(\"=========================================\")\n",
        "        print(\"「Run Backtest」ボタンをクリックして\")\n",
        "        print(\"バックテストを実行できます。\")\n",
        "        print(\"=========================================\")\n",
        "\n",
        "    def fetch_data(self):\n",
        "        self.clear_cache()\n",
        "        valid, errors, warnings_list = self.validate_parameters()\n",
        "        if not valid:\n",
        "            logger.error(\"パラメータ検証に失敗しました:\")\n",
        "            for error in errors:\n",
        "                logger.error(f\"- {error}\")\n",
        "            return False\n",
        "        if warnings_list:\n",
        "            logger.warning(\"検証で警告が発生しました:\")\n",
        "            for warning in warnings_list:\n",
        "                logger.warning(f\"- {warning}\")\n",
        "        start_date = f\"{self.start_year-3}-{self.start_month:02d}-01\"\n",
        "        _, last_day = calendar.monthrange(self.end_year, self.end_month)\n",
        "        end_date = f\"{self.end_year}-{self.end_month:02d}-{last_day}\"\n",
        "        all_assets = list(set(self.tickers + [self.absolute_momentum_asset] +\n",
        "                                self.out_of_market_assets + [self.benchmark_ticker]))\n",
        "        all_assets = [asset for asset in all_assets if asset != 'None' and asset.lower() != 'cash']\n",
        "        if not all_assets:\n",
        "            logger.error(\"有効な資産がリストにありません。\")\n",
        "            return False\n",
        "        logger.info(f\"データ取得期間: {start_date} から {end_date}\")\n",
        "        logger.info(f\"対象資産数: {len(all_assets)} - {', '.join(all_assets)}\")\n",
        "        batch_size = 10\n",
        "        price_data_batches = []\n",
        "        batches = [all_assets[i:i+batch_size] for i in range(0, len(all_assets), batch_size)]\n",
        "\n",
        "        def download_batch(batch):\n",
        "            try:\n",
        "                data = yf.download(\n",
        "                    batch,\n",
        "                    start=start_date,\n",
        "                    end=end_date,\n",
        "                    auto_adjust=True,\n",
        "                    progress=False\n",
        "                )\n",
        "                # 終値と始値の両方を取得\n",
        "                close_data = data['Close']\n",
        "                open_data = data['Open']\n",
        "                high_data = data['High']  # 追加：高値データ\n",
        "                low_data = data['Low']    # 追加：安値データ\n",
        "\n",
        "                # 列名をOpen_とClose_のプレフィックスを付けて区別\n",
        "                open_data.columns = [f\"Open_{col}\" for col in open_data.columns]\n",
        "                high_data.columns = [f\"High_{col}\" for col in high_data.columns]  # 追加\n",
        "                low_data.columns = [f\"Low_{col}\" for col in low_data.columns]     # 追加\n",
        "\n",
        "                # 横方向に結合\n",
        "                combined_data = pd.concat([close_data, open_data, high_data, low_data], axis=1)\n",
        "                return combined_data if not combined_data.empty else None\n",
        "            except Exception as e:\n",
        "                logger.error(f\"バッチ {batch} のデータ取得に失敗: {e}\")\n",
        "                return None\n",
        "\n",
        "        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n",
        "            futures = [executor.submit(download_batch, batch) for batch in batches]\n",
        "            for future in tqdm(\n",
        "                concurrent.futures.as_completed(futures),\n",
        "                total=len(batches),\n",
        "                desc=\"データ取得中\",\n",
        "                bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt}'\n",
        "            ):\n",
        "                batch_data = future.result()\n",
        "                if batch_data is not None:\n",
        "                    price_data_batches.append(batch_data)\n",
        "        if not price_data_batches:\n",
        "            logger.error(\"全てのバッチでデータ取得に失敗しました。\")\n",
        "            return False\n",
        "        try:\n",
        "            self.price_data = pd.concat(price_data_batches, axis=1)\n",
        "            self.price_data = self.price_data.loc[:, ~self.price_data.columns.duplicated()]\n",
        "            self.price_data = self.price_data.astype('float32')\n",
        "            logger.info(f\"データ取得完了: {len(self.price_data)} 日分, {len(self.price_data.columns)} 銘柄\")\n",
        "            # Cashデータの作成 - 固定値で日次・月次両方に追加\n",
        "            if self.price_data is not None and not self.price_data.empty:\n",
        "                # 現在のデータカラムをチェック\n",
        "                if 'Cash' not in self.price_data.columns:\n",
        "                    # 日付インデックスを取得\n",
        "                    dates = self.price_data.index\n",
        "\n",
        "                    # ベースとなる固定値（リターンゼロを実現）\n",
        "                    cash_base_value = 100.0\n",
        "\n",
        "                    # Cash終値データの作成（固定値）\n",
        "                    cash_values = pd.Series([cash_base_value] * len(dates), index=dates)\n",
        "                    self.price_data['Cash'] = cash_values\n",
        "\n",
        "                    # Cash始値データの作成（終値と同じ値）\n",
        "                    self.price_data['Open_Cash'] = self.price_data['Cash']\n",
        "\n",
        "                    # 操作ログ\n",
        "                    logger.info(f\"Cashデータをプライスデータに追加しました（固定値: {cash_base_value}）\")\n",
        "            self.monthly_data = self.price_data.resample('ME').last()\n",
        "            self._fetch_risk_free_rate(start_date, end_date)\n",
        "            self._validate_data_periods(all_assets)\n",
        "            self._last_data_fetch = datetime.now()\n",
        "            quality_ok, quality_warnings = self.check_data_quality()\n",
        "            if quality_warnings:\n",
        "                logger.warning(\"データ品質チェックで警告が発生しました:\")\n",
        "                for warning in quality_warnings:\n",
        "                    logger.warning(f\"- {warning}\")\n",
        "            self.display_fetch_summary_text()\n",
        "            return True\n",
        "        except Exception as e:\n",
        "            logger.error(f\"データ結合中にエラーが発生しました: {e}\")\n",
        "            return False\n",
        "\n",
        "    def _fetch_risk_free_rate(self, start_date, end_date):\n",
        "        \"\"\"リスクフリーレートを取得するメソッド（FRED API DTB3を優先、失敗時はIRXにフォールバック）\"\"\"\n",
        "\n",
        "        # DTB3データをFRED APIから取得を試みる\n",
        "        try:\n",
        "            # fredapiパッケージを使用\n",
        "            from fredapi import Fred\n",
        "\n",
        "            # APIキーを設定（実際のAPIキーに置き換えてください）\n",
        "            fred = Fred(api_key='a8d44f5fee887e9c844a783374065be4')\n",
        "\n",
        "            # DTB3データを取得\n",
        "            logger.info(f\"FRED APIからDTB3データを取得中... ({start_date} から {end_date})\")\n",
        "            dtb3_data = fred.get_series('DTB3', observation_start=start_date, observation_end=end_date)\n",
        "\n",
        "            # データが取得できたかチェック\n",
        "            if dtb3_data.empty:\n",
        "                logger.warning(\"DTB3データが空です。IRXデータにフォールバックします。\")\n",
        "                return self._fetch_risk_free_rate_irx(start_date, end_date)\n",
        "\n",
        "            # IRXと同様の計算方法で年率を月次・日次レートに変換\n",
        "            logger.info(\"DTB3データからリスクフリーレートを計算中...\")\n",
        "\n",
        "            # 月次レート計算（年率→月率）\n",
        "            rfr_data = ((1 + dtb3_data / 100) ** (1/12)) - 1\n",
        "            self.rfr_data = rfr_data.resample('ME').last()\n",
        "\n",
        "            # 日次レート計算（年率→日率）\n",
        "            rfr_data_daily = ((1 + dtb3_data / 100) ** (1/252)) - 1\n",
        "            self.rfr_data_daily = rfr_data_daily\n",
        "\n",
        "            # データフレーム形式の場合はシリーズに変換\n",
        "            if isinstance(self.rfr_data, pd.DataFrame):\n",
        "                self.rfr_data = self.rfr_data.iloc[:, 0] if not self.rfr_data.empty else pd.Series(0.001, index=self.monthly_data.index)\n",
        "            if isinstance(self.rfr_data_daily, pd.DataFrame):\n",
        "                self.rfr_data_daily = self.rfr_data_daily.iloc[:, 0]\n",
        "\n",
        "            # データソース情報を保存（オプション）\n",
        "            self._risk_free_rate_source = \"DTB3 (FRED API)\"\n",
        "\n",
        "            logger.info(\"DTB3データを使用したリスクフリーレート設定完了（複利換算式を使用）\")\n",
        "            return True\n",
        "\n",
        "        except ImportError as e:\n",
        "            logger.warning(f\"fredapiのインポートに失敗: {e} - IRXデータにフォールバック\")\n",
        "            return self._fetch_risk_free_rate_irx(start_date, end_date)\n",
        "\n",
        "        except Exception as e:\n",
        "            logger.warning(f\"DTB3データ取得中にエラー発生: {e} - IRXデータにフォールバック\")\n",
        "            return self._fetch_risk_free_rate_irx(start_date, end_date)\n",
        "\n",
        "    def _fetch_risk_free_rate_irx(self, start_date, end_date):\n",
        "        \"\"\"IRXデータを使用したリスクフリーレート取得（フォールバック方法）\"\"\"\n",
        "        try:\n",
        "            logger.info(f\"yfinanceからIRXデータを取得中... ({start_date} から {end_date})\")\n",
        "            irx_data = yf.download(\"^IRX\", start=start_date, end=end_date, auto_adjust=True)['Close']\n",
        "\n",
        "            # データが空の場合はデフォルト値を使用\n",
        "            if irx_data.empty:\n",
        "                logger.warning(\"IRXデータが空です。デフォルト値を使用します。\")\n",
        "                self.rfr_data = pd.Series(0.001, index=self.monthly_data.index)\n",
        "                self.rfr_data_daily = pd.Series(0.001/252, index=self.price_data.index)\n",
        "\n",
        "                # データソース情報を保存（オプション）\n",
        "                self._risk_free_rate_source = \"デフォルト値\"\n",
        "                return False\n",
        "\n",
        "            # 月次レート計算（年率→月率）\n",
        "            rfr_data = ((1 + irx_data / 100) ** (1/12)) - 1\n",
        "            self.rfr_data = rfr_data.resample('ME').last()\n",
        "\n",
        "            # 日次レート計算（年率→日率）\n",
        "            rfr_data_daily = ((1 + irx_data / 100) ** (1/252)) - 1\n",
        "            self.rfr_data_daily = rfr_data_daily\n",
        "\n",
        "            # データフレーム形式の場合はシリーズに変換\n",
        "            if isinstance(self.rfr_data, pd.DataFrame):\n",
        "                self.rfr_data = self.rfr_data.iloc[:, 0] if not self.rfr_data.empty else pd.Series(0.001, index=self.monthly_data.index)\n",
        "            if isinstance(self.rfr_data_daily, pd.DataFrame):\n",
        "                self.rfr_data_daily = self.rfr_data_daily.iloc[:, 0]\n",
        "\n",
        "            # データソース情報を保存（オプション）\n",
        "            self._risk_free_rate_source = \"IRX (Yahoo Finance)\"\n",
        "\n",
        "            logger.info(\"IRXデータを使用したリスクフリーレート設定完了（複利換算式を使用）\")\n",
        "            return True\n",
        "\n",
        "        except Exception as e:\n",
        "            logger.warning(f\"IRXデータ取得中にエラー発生: {e} - デフォルト値を使用します\")\n",
        "            self.rfr_data = pd.Series(0.001, index=self.monthly_data.index)\n",
        "            self.rfr_data_daily = pd.Series(0.001/252, index=self.price_data.index)\n",
        "\n",
        "            # データソース情報を保存（オプション）\n",
        "            self._risk_free_rate_source = \"デフォルト値\"\n",
        "            return False\n",
        "\n",
        "    def get_risk_free_rate_source(self):\n",
        "        \"\"\"現在使用中のリスクフリーレートのデータソースを返す\"\"\"\n",
        "        if hasattr(self, '_risk_free_rate_source'):\n",
        "            return self._risk_free_rate_source\n",
        "        else:\n",
        "            return \"未設定（データ取得前）\"\n",
        "\n",
        "    def display_trade_history(self, display_table=True):\n",
        "        \"\"\"\n",
        "        取引履歴テーブルを表示する関数\n",
        "\n",
        "        Args:\n",
        "            display_table: HTMLテーブルを表示するかどうか (デフォルト: True)\n",
        "\n",
        "        Returns:\n",
        "            pd.DataFrame: 取引履歴のデータフレーム\n",
        "        \"\"\"\n",
        "        if not hasattr(self, 'positions') or not self.positions:\n",
        "            if display_table:\n",
        "                print(\"取引履歴がありません。まずバックテストを実行してください。\")\n",
        "            return None\n",
        "\n",
        "        # サマリーデータの生成\n",
        "        summary = []\n",
        "        for position in self.positions:\n",
        "            signal_date = position.get(\"signal_date\")\n",
        "            start_date = position.get(\"start_date\")\n",
        "            end_date = position.get(\"end_date\")\n",
        "            assets = position.get(\"assets\", [])\n",
        "            ret = position.get(\"return\")\n",
        "            message = position.get(\"message\", \"\")\n",
        "            abs_return = position.get(\"abs_return\")\n",
        "            rfr_return = position.get(\"rfr_return\")\n",
        "\n",
        "            # 以下のコードブロックを追加（ストップロス情報の処理）\n",
        "            # ストップロス情報の追加\n",
        "            stop_loss_triggered = position.get(\"stop_loss_triggered\", False)\n",
        "            stop_loss_info = \"\"\n",
        "\n",
        "            if stop_loss_triggered and \"stop_loss_details\" in position:\n",
        "                details = position[\"stop_loss_details\"]\n",
        "                stop_loss_dates = []\n",
        "                for detail in details:\n",
        "                    stop_date = detail[\"stop_loss_date\"].strftime('%Y/%m/%d') if detail[\"stop_loss_date\"] else \"N/A\"\n",
        "                    asset = detail[\"original_asset\"]\n",
        "                    stop_price = detail[\"stop_loss_price\"]\n",
        "\n",
        "                    # キャッシュ維持情報を追加\n",
        "                    if \"keep_cash\" in detail and detail[\"keep_cash\"]:\n",
        "                        if \"partial_cash\" in detail and detail[\"partial_cash\"] and \"cash_percentage\" in detail:\n",
        "                            stop_loss_dates.append(f\"{asset} ({stop_date}, SL: {stop_price:.2f}, {detail['cash_percentage']}% Cash)\")\n",
        "                        else:\n",
        "                            stop_loss_dates.append(f\"{asset} ({stop_date}, SL: {stop_price:.2f}, Cash Maintained)\")\n",
        "                    else:\n",
        "                        stop_loss_dates.append(f\"{asset} ({stop_date}, SL: {stop_price:.2f})\")\n",
        "\n",
        "                stop_loss_info = \", \".join(stop_loss_dates)\n",
        "\n",
        "            # 既存のサマリー項目を準備\n",
        "            summary_item = {\n",
        "                \"シグナル判定日\": signal_date.date() if signal_date else None,\n",
        "                \"保有開始日\": start_date.date() if start_date else None,\n",
        "                \"保有終了日\": end_date.date() if end_date else None,\n",
        "                \"保有資産\": ', '.join(assets),\n",
        "                \"保有期間リターン\": f\"{ret*100:.2f}%\" if ret is not None else \"N/A\",\n",
        "                \"モメンタム判定結果\": message,\n",
        "            }\n",
        "\n",
        "            # ストップロス情報を条件付きで追加\n",
        "            if hasattr(self, 'stop_loss_enabled') and self.stop_loss_enabled:\n",
        "                summary_item[\"ストップロス発動\"] = \"あり\" if stop_loss_triggered else \"なし\"\n",
        "                if stop_loss_triggered:\n",
        "                    summary_item[\"ストップロス詳細\"] = stop_loss_info\n",
        "\n",
        "            # 残りの項目を追加\n",
        "            if abs_return is not None:\n",
        "                summary_item[\"絶対モメンタムリターン\"] = f\"{abs_return*100:.2f}%\"\n",
        "            if rfr_return is not None:\n",
        "                summary_item[\"リスクフリーレート\"] = f\"{rfr_return*100:.2f}%\"\n",
        "\n",
        "            summary.append(summary_item)\n",
        "\n",
        "        # データフレーム作成\n",
        "        if summary:\n",
        "            summary_df = pd.DataFrame(summary)\n",
        "\n",
        "            # 列順序を決定（ストップロス列を追加）\n",
        "            columns = [\"シグナル判定日\", \"保有開始日\", \"保有終了日\", \"保有資産\", \"保有期間リターン\",\n",
        "                    \"モメンタム判定結果\"]\n",
        "\n",
        "            # ストップロス列を条件付きで追加\n",
        "            if hasattr(self, 'stop_loss_enabled') and self.stop_loss_enabled:\n",
        "                columns.extend([\"ストップロス発動\", \"ストップロス詳細\"])\n",
        "\n",
        "            # 残りの列を追加\n",
        "            columns.extend([\"絶対モメンタムリターン\", \"リスクフリーレート\"])\n",
        "\n",
        "            # 列が存在することを確認してから列順序を設定\n",
        "            avail_columns = [col for col in columns if col in summary_df.columns]\n",
        "            summary_df = summary_df[avail_columns]\n",
        "\n",
        "            # 表示が要求された場合のみ表示\n",
        "            if display_table:\n",
        "                display(HTML(\"\"\"\n",
        "                <h2 style=\"color:#3367d6;\">取引履歴</h2>\n",
        "                \"\"\" + summary_df.to_html(index=False, classes='table table-striped')))\n",
        "\n",
        "            return summary_df\n",
        "\n",
        "        return None\n",
        "\n",
        "    def display_trade_history_with_benchmark(self, display_table=True):\n",
        "        \"\"\"\n",
        "        ベンチマークリターンと超過リターンを含めた取引履歴テーブルを表示する関数\n",
        "        ※ストップロス情報も表示します\n",
        "\n",
        "        Args:\n",
        "            display_table: HTMLテーブルを表示するかどうか (デフォルト: True)\n",
        "\n",
        "        Returns:\n",
        "            pd.DataFrame: 取引履歴のデータフレーム\n",
        "        \"\"\"\n",
        "        if not hasattr(self, 'positions') or not self.positions:\n",
        "            if display_table:\n",
        "                print(\"取引履歴がありません。まずバックテストを実行してください。\")\n",
        "            return None\n",
        "\n",
        "        # サマリーデータの生成\n",
        "        summary = []\n",
        "        for position in self.positions:\n",
        "            signal_date = position.get(\"signal_date\")\n",
        "            start_date = position.get(\"start_date\")\n",
        "            end_date = position.get(\"end_date\")\n",
        "            assets = position.get(\"assets\", [])\n",
        "            ret = position.get(\"return\")\n",
        "            message = position.get(\"message\", \"\")\n",
        "            abs_return = position.get(\"abs_return\")\n",
        "            rfr_return = position.get(\"rfr_return\")\n",
        "\n",
        "            # ベンチマークと超過リターンを取得\n",
        "            bench_ret = position.get(\"benchmark_return\")\n",
        "            excess_ret = position.get(\"excess_return\")\n",
        "\n",
        "            # ストップロス情報の追加\n",
        "            stop_loss_triggered = position.get(\"stop_loss_triggered\", False)\n",
        "            stop_loss_info = \"\"\n",
        "\n",
        "            if stop_loss_triggered and \"stop_loss_details\" in position:\n",
        "                details = position[\"stop_loss_details\"]\n",
        "                stop_loss_dates = []\n",
        "                for detail in details:\n",
        "                    stop_date = detail[\"stop_loss_date\"].strftime('%Y/%m/%d') if detail[\"stop_loss_date\"] else \"N/A\"\n",
        "                    asset = detail[\"original_asset\"]\n",
        "                    stop_price = detail[\"stop_loss_price\"]\n",
        "                    stop_loss_dates.append(f\"{asset} ({stop_date}, SL: {stop_price:.2f})\")\n",
        "\n",
        "                stop_loss_info = \", \".join(stop_loss_dates)\n",
        "\n",
        "            # 色分け用のスタイル定義\n",
        "            excess_style = \"\"\n",
        "            if excess_ret is not None:\n",
        "                if excess_ret > 0:\n",
        "                    excess_style = \"color: green;\"\n",
        "                elif excess_ret < 0:\n",
        "                    excess_style = \"color: red;\"\n",
        "\n",
        "            # 基本情報の準備\n",
        "            summary_item = {\n",
        "                \"シグナル判定日\": signal_date.date() if signal_date else None,\n",
        "                \"保有開始日\": start_date.date() if start_date else None,\n",
        "                \"保有終了日\": end_date.date() if end_date else None,\n",
        "                \"保有資産\": ', '.join(assets),\n",
        "                \"保有期間リターン\": f\"{ret*100:.2f}%\" if ret is not None else \"N/A\",\n",
        "                f\"ベンチマーク({self.benchmark_ticker})\": f\"{bench_ret*100:.2f}%\" if bench_ret is not None else \"N/A\",\n",
        "                \"超過リターン\": f\"<span style='{excess_style}'>{excess_ret*100:.2f}%</span>\" if excess_ret is not None else \"N/A\",\n",
        "                \"モメンタム判定結果\": message,\n",
        "            }\n",
        "\n",
        "            # 必ずストップロス情報を追加（有効時のみ）\n",
        "            if hasattr(self, 'stop_loss_enabled') and self.stop_loss_enabled:\n",
        "                summary_item[\"ストップロス発動\"] = \"あり\" if stop_loss_triggered else \"なし\"\n",
        "                if stop_loss_triggered:\n",
        "                    summary_item[\"ストップロス詳細\"] = stop_loss_info\n",
        "\n",
        "            # 絶対モメンタム情報などを追加\n",
        "            summary_item[\"絶対モメンタムリターン\"] = f\"{abs_return*100:.2f}%\" if abs_return is not None else \"N/A\"\n",
        "            summary_item[\"リスクフリーレート\"] = f\"{rfr_return*100:.2f}%\" if rfr_return is not None else \"N/A\"\n",
        "\n",
        "            summary.append(summary_item)\n",
        "\n",
        "        # データフレーム作成\n",
        "        if summary:\n",
        "            summary_df = pd.DataFrame(summary)\n",
        "\n",
        "            # 列順序を決定（ストップロス列を含む）\n",
        "            columns = [\"シグナル判定日\", \"保有開始日\", \"保有終了日\", \"保有資産\", \"保有期間リターン\",\n",
        "                    f\"ベンチマーク({self.benchmark_ticker})\", \"超過リターン\", \"モメンタム判定結果\"]\n",
        "\n",
        "            # ストップロス情報を追加\n",
        "            if hasattr(self, 'stop_loss_enabled') and self.stop_loss_enabled:\n",
        "                # 確実に列が存在するかチェック\n",
        "                if \"ストップロス発動\" in summary_df.columns:\n",
        "                    columns.append(\"ストップロス発動\")\n",
        "                if \"ストップロス詳細\" in summary_df.columns:\n",
        "                    columns.append(\"ストップロス詳細\")\n",
        "\n",
        "            # 残りの列を追加\n",
        "            if \"絶対モメンタムリターン\" in summary_df.columns:\n",
        "                columns.append(\"絶対モメンタムリターン\")\n",
        "            if \"リスクフリーレート\" in summary_df.columns:\n",
        "                columns.append(\"リスクフリーレート\")\n",
        "\n",
        "            # 列が存在することを確認してから列順序を設定\n",
        "            avail_columns = [col for col in columns if col in summary_df.columns]\n",
        "            summary_df = summary_df[avail_columns]\n",
        "\n",
        "            # 表示が要求された場合のみ表示\n",
        "            if display_table:\n",
        "                display(HTML(\"\"\"\n",
        "                <h2 style=\"color:#3367d6;\">取引履歴（ベンチマーク比較付き）</h2>\n",
        "                \"\"\" + summary_df.to_html(index=False, classes='table table-striped', escape=False)))\n",
        "\n",
        "            return summary_df\n",
        "\n",
        "        return None\n",
        "\n",
        "    def _create_holdings_from_assets(self, selected_assets):\n",
        "        \"\"\"資産リストから保有比率を作成するヘルパーメソッド\"\"\"\n",
        "        holdings = {}\n",
        "        if selected_assets:\n",
        "            weight_per_asset = 1.0 / len(selected_assets)\n",
        "            for asset in selected_assets:\n",
        "                if asset.lower() == 'cash':\n",
        "                    holdings['Cash'] = weight_per_asset\n",
        "                elif asset in self.price_data.columns:\n",
        "                    holdings[asset] = weight_per_asset\n",
        "                else:\n",
        "                    logger.warning(f\"警告: 選択資産 {asset} がデータに存在しません\")\n",
        "        return holdings\n",
        "\n",
        "    def _validate_data_periods(self, all_assets):\n",
        "        data_availability = {}\n",
        "        valid_period_start = {}\n",
        "        valid_period_end = {}\n",
        "        relevant_assets = set(self.tickers + [self.absolute_momentum_asset] +\n",
        "                              self.out_of_market_assets + [self.benchmark_ticker])\n",
        "        relevant_assets = {asset for asset in relevant_assets if asset != 'None' and asset.lower() != 'cash'}\n",
        "        for asset in all_assets:\n",
        "            if asset in self.price_data.columns:\n",
        "                asset_data = self.price_data[asset].dropna()\n",
        "                if len(asset_data) > 0:\n",
        "                    first_date = asset_data.index[0]\n",
        "                    last_date = asset_data.index[-1]\n",
        "                    data_availability[asset] = {\n",
        "                        'start_date': first_date.strftime('%Y-%m-%d'),\n",
        "                        'end_date': last_date.strftime('%Y-%m-%d'),\n",
        "                        'days': len(asset_data),\n",
        "                        'years': round(len(asset_data) / 252, 1)\n",
        "                    }\n",
        "                    if asset in relevant_assets:\n",
        "                        valid_period_start[asset] = first_date\n",
        "                        valid_period_end[asset] = last_date\n",
        "        if valid_period_start and valid_period_end:\n",
        "            common_start = max(valid_period_start.values())\n",
        "            common_end = min(valid_period_end.values())\n",
        "            if common_start <= common_end:\n",
        "                logger.info(f\"\\n全対象資産共通の有効期間: {common_start.strftime('%Y-%m-%d')} から {common_end.strftime('%Y-%m-%d')}\")\n",
        "                logger.info(f\"推奨バックテスト期間: {common_start.year}/{common_start.month} - {common_end.year}/{common_end.month}\")\n",
        "                self.valid_period_start = common_start\n",
        "                self.valid_period_end = common_end\n",
        "            else:\n",
        "                logger.warning(\"\\n警告: 全対象資産に共通する有効期間がありません。\")\n",
        "        # 標準出力は削除済み\n",
        "\n",
        "    def _calculate_single_asset_return(self, data, asset, start_date, end_date):\n",
        "        \"\"\"特定の2日付間の正確なリターンを計算\"\"\"\n",
        "        try:\n",
        "            # 日付を標準化\n",
        "            start_date = pd.to_datetime(start_date)\n",
        "            end_date = pd.to_datetime(end_date)\n",
        "\n",
        "            # 対象資産のチェック\n",
        "            if asset not in data.columns:\n",
        "                logger.debug(f\"資産 {asset} はデータに存在しません\")\n",
        "                return None\n",
        "\n",
        "            # 日付存在チェック（重要）\n",
        "            if start_date not in data.index:\n",
        "                logger.warning(f\"開始日 {start_date.strftime('%Y-%m-%d')} のデータがありません: {asset}\")\n",
        "                return None\n",
        "\n",
        "            if end_date not in data.index:\n",
        "                logger.warning(f\"終了日 {end_date.strftime('%Y-%m-%d')} のデータがありません: {asset}\")\n",
        "                return None\n",
        "\n",
        "            # データ取得と有効性チェック\n",
        "            start_price = data.loc[start_date, asset]\n",
        "            end_price = data.loc[end_date, asset]\n",
        "\n",
        "            if pd.isna(start_price) or pd.isna(end_price):\n",
        "                logger.warning(f\"資産 {asset} のデータに欠損があります\")\n",
        "                return None\n",
        "\n",
        "            # リターン計算\n",
        "            if start_price <= 0:\n",
        "                logger.warning(f\"⚠️ 資産 {asset} の開始価格が0以下です: {start_price}\")\n",
        "                return None\n",
        "\n",
        "            ret = (end_price / start_price) - 1\n",
        "\n",
        "            # 極端なリターンをチェック（警告のみ）\n",
        "            period_days = (end_date - start_date).days\n",
        "            if abs(ret) > 1.0 and period_days < 365:  # 100%以上の変動かつ1年未満\n",
        "                logger.warning(f\"異常リターン: {asset} が {period_days} 日間で {ret*100:.1f}%\")\n",
        "\n",
        "            return ret\n",
        "\n",
        "        except Exception as e:\n",
        "            logger.error(f\"リターン計算エラー ({asset}): {e}\")\n",
        "            return None\n",
        "\n",
        "    def calculate_monthly_momentum(self, asset, current_date, lookback_months):\n",
        "        \"\"\"厳密なルールに基づく月次モメンタム計算\n",
        "        ルール：前月の最終取引日の終値～当月の最終取引日の終値\n",
        "        月中実行時は、当月の最新データを使用\n",
        "        \"\"\"\n",
        "        # 日付のパース\n",
        "        current_date = pd.to_datetime(current_date)\n",
        "\n",
        "        # この日付までのデータに制限\n",
        "        available_price_data = self.price_data[self.price_data.index <= current_date]\n",
        "\n",
        "        if available_price_data.empty:\n",
        "            logger.warning(f\"{current_date.strftime('%Y-%m-%d')}以前のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # 計算に使う年月を特定\n",
        "        current_year = current_date.year\n",
        "        current_month = current_date.month\n",
        "\n",
        "        # 当月の取引日を全て取得\n",
        "        current_month_dates = available_price_data.index[\n",
        "            (available_price_data.index.year == current_year) &\n",
        "            (available_price_data.index.month == current_month)\n",
        "        ]\n",
        "\n",
        "        # データチェック\n",
        "        if current_month_dates.empty:\n",
        "            logger.warning(f\"{current_year}年{current_month}月のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # 当月の最終取引日\n",
        "        current_month_last_trading_day = current_month_dates[-1]\n",
        "\n",
        "        # 終値の日付を決定\n",
        "        end_trading_day = current_month_last_trading_day\n",
        "\n",
        "        # 前月の計算（厳密に月数で遡る）\n",
        "        target_month = current_month\n",
        "        target_year = current_year\n",
        "\n",
        "        # lookback_months分だけ月を遡る\n",
        "        for _ in range(lookback_months):\n",
        "            if target_month == 1:\n",
        "                target_month = 12\n",
        "                target_year -= 1\n",
        "            else:\n",
        "                target_month -= 1\n",
        "\n",
        "        # 遡った月の取引日を取得\n",
        "        prior_month_dates = available_price_data.index[\n",
        "            (available_price_data.index.year == target_year) &\n",
        "            (available_price_data.index.month == target_month)\n",
        "        ]\n",
        "\n",
        "        if prior_month_dates.empty:\n",
        "            logger.warning(f\"{target_year}年{target_month}月のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # 前月の最終取引日\n",
        "        start_trading_day = prior_month_dates[-1]\n",
        "\n",
        "        # 計算に使用する日付をログ出力\n",
        "        logger.info(f\"モメンタム計算: {asset}, {start_trading_day.strftime('%Y-%m-%d')} から {end_trading_day.strftime('%Y-%m-%d')}\")\n",
        "\n",
        "        # 以下リターン計算...（既存のコード）\n",
        "\n",
        "        # リターン計算\n",
        "        if asset not in self.price_data.columns:\n",
        "            logger.warning(f\"資産 {asset} はデータに存在しません\")\n",
        "            return None\n",
        "\n",
        "        try:\n",
        "            # 直接価格を取得（_calculate_single_asset_returnではなく）\n",
        "            if start_trading_day not in self.price_data.index or end_trading_day not in self.price_data.index:\n",
        "                logger.warning(f\"計算に必要な日付のデータがありません: {start_trading_day} - {end_trading_day}\")\n",
        "                return None\n",
        "\n",
        "            start_price = self.price_data.loc[start_trading_day, asset]\n",
        "            end_price = self.price_data.loc[end_trading_day, asset]\n",
        "\n",
        "            if pd.isna(start_price) or pd.isna(end_price):\n",
        "                logger.warning(f\"資産 {asset} のデータに欠損があります\")\n",
        "                return None\n",
        "\n",
        "            if start_price <= 0:\n",
        "                logger.warning(f\"資産 {asset} の開始価格が無効です: {start_price}\")\n",
        "                return None\n",
        "\n",
        "            return (end_price / start_price) - 1\n",
        "        except Exception as e:\n",
        "            logger.error(f\"モメンタム計算エラー ({asset}): {e}\")\n",
        "            return None\n",
        "\n",
        "    def calculate_daily_momentum(self, asset, current_date, lookback_days):\n",
        "        \"\"\"厳密な日数に基づくモメンタム計算\n",
        "        N日前の取引日から現在日までのリターンを計算\n",
        "        \"\"\"\n",
        "        # 日付のパース\n",
        "        current_date = pd.to_datetime(current_date)\n",
        "\n",
        "        # この日付までのデータに制限\n",
        "        available_price_data = self.price_data[self.price_data.index <= current_date]\n",
        "\n",
        "        if available_price_data.empty:\n",
        "            logger.warning(f\"{current_date.strftime('%Y-%m-%d')}以前のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # 当日の取引日を特定\n",
        "        current_dates = available_price_data.index[available_price_data.index <= current_date]\n",
        "        if current_dates.empty:\n",
        "            logger.warning(f\"{current_date.strftime('%Y-%m-%d')}のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # 当日の終値の日付を決定\n",
        "        end_trading_day = current_dates[-1]\n",
        "\n",
        "        # N日前の日付を計算\n",
        "        target_date = end_trading_day - pd.Timedelta(days=lookback_days)\n",
        "\n",
        "        # N日前に最も近い取引日を取得（指定日以前の最終取引日）\n",
        "        prior_dates = available_price_data.index[available_price_data.index <= target_date]\n",
        "        if prior_dates.empty:\n",
        "            logger.warning(f\"{target_date.strftime('%Y-%m-%d')}以前のデータがありません\")\n",
        "            return None\n",
        "\n",
        "        # N日前の取引日\n",
        "        start_trading_day = prior_dates[-1]\n",
        "\n",
        "        # 計算に使用する日付をログ出力\n",
        "        logger.info(f\"日次モメンタム計算: {asset}, {start_trading_day.strftime('%Y-%m-%d')} から {end_trading_day.strftime('%Y-%m-%d')}\")\n",
        "\n",
        "        # リターン計算\n",
        "        if asset not in self.price_data.columns:\n",
        "            logger.warning(f\"資産 {asset} はデータに存在しません\")\n",
        "            return None\n",
        "\n",
        "        try:\n",
        "            # 直接価格を取得\n",
        "            if start_trading_day not in self.price_data.index or end_trading_day not in self.price_data.index:\n",
        "                logger.warning(f\"計算に必要な日付のデータがありません: {start_trading_day} - {end_trading_day}\")\n",
        "                return None\n",
        "\n",
        "            start_price = self.price_data.loc[start_trading_day, asset]\n",
        "            end_price = self.price_data.loc[end_trading_day, asset]\n",
        "\n",
        "            if pd.isna(start_price) or pd.isna(end_price):\n",
        "                logger.warning(f\"資産 {asset} のデータに欠損があります\")\n",
        "                return None\n",
        "\n",
        "            if start_price <= 0:\n",
        "                logger.warning(f\"資産 {asset} の開始価格が無効です: {start_price}\")\n",
        "                return None\n",
        "\n",
        "            return (end_price / start_price) - 1\n",
        "        except Exception as e:\n",
        "            logger.error(f\"日次モメンタム計算エラー ({asset}): {e}\")\n",
        "            return None\n",
        "\n",
        "    def _calculate_asset_returns(self, data, assets, start_date, end_date):\n",
        "        returns = {}\n",
        "        for asset in assets:\n",
        "            returns[asset] = self._calculate_single_asset_return(data, asset, start_date, end_date)\n",
        "        return returns\n",
        "\n",
        "    def _calculate_rfr_return(self, decision_date, default=0.01):\n",
        "        \"\"\"\n",
        "        リスクフリーレートを取得する\n",
        "        新しい月次モメンタム計算に合わせて修正\n",
        "        \"\"\"\n",
        "        decision_date = pd.to_datetime(decision_date)\n",
        "\n",
        "        if self.rfr_data is None or self.rfr_data.empty:\n",
        "            return default\n",
        "\n",
        "        # 指定日付以前の最新のRFRデータを取得\n",
        "        available = self.rfr_data[self.rfr_data.index <= decision_date]\n",
        "        if len(available) > 0:\n",
        "            # 最新の月次RFRを取得\n",
        "            return available.iloc[-1]\n",
        "        else:\n",
        "            return default\n",
        "\n",
        "    def _evaluate_out_of_market_assets(self, as_of_date):\n",
        "        \"\"\"\n",
        "        退避先資産のモメンタムを評価し、戦略に応じて資産を選択する\n",
        "\n",
        "        Parameters:\n",
        "        as_of_date (datetime): 評価日\n",
        "\n",
        "        Returns:\n",
        "        list: 選択された退避先資産のリスト\n",
        "        \"\"\"\n",
        "        # 退避先資産が1つ以下の場合は、そのまま返す\n",
        "        if len(self.out_of_market_assets) <= 1:\n",
        "            return self.out_of_market_assets\n",
        "\n",
        "        # 「等ウェイト」モードの場合は、全ての退避先資産を返す\n",
        "        if self.out_of_market_strategy == \"Equal Weight\":\n",
        "            logger.info(f\"退避先戦略: 等ウェイト - {self.out_of_market_assets}\")\n",
        "            return self.out_of_market_assets\n",
        "\n",
        "        # 以下は「Top 1」モードの処理\n",
        "        # 退避先資産のうち、実際にデータに存在する資産のみを対象とする\n",
        "        target_assets = [asset for asset in self.out_of_market_assets\n",
        "                        if asset in self.price_data.columns]\n",
        "\n",
        "        if not target_assets:\n",
        "            logger.warning(\"退避先資産がデータに存在しません。元のリストを使用します。\")\n",
        "            return self.out_of_market_assets\n",
        "\n",
        "        # キャッシュキーの生成（通常のモメンタム計算と区別するために接頭辞をつける）\n",
        "        cache_key = \"safe_\" + self._generate_cache_key(as_of_date)\n",
        "        cached_results = self._get_from_cache(cache_key)\n",
        "\n",
        "        if cached_results is not None:\n",
        "            logger.debug(f\"退避先資産評価: キャッシュヒット {cache_key}\")\n",
        "            sorted_assets = cached_results.get(\"sorted_assets\", [])\n",
        "        else:\n",
        "            logger.debug(f\"退避先資産評価: キャッシュミス {cache_key}\")\n",
        "\n",
        "            # シングル期間モードの処理\n",
        "            if self.performance_periods == \"Single Period\":\n",
        "                # 各資産のモメンタム計算\n",
        "                returns = {}\n",
        "                for asset in target_assets:\n",
        "                    # 単位に応じた適切なメソッド使用\n",
        "                    if self.lookback_unit == \"Months\":\n",
        "                        ret = self.calculate_monthly_momentum(asset, as_of_date, self.lookback_period)\n",
        "                    else:  # Days\n",
        "                        ret = self.calculate_daily_momentum(asset, as_of_date, self.lookback_period)\n",
        "\n",
        "                    if ret is not None:\n",
        "                        returns[asset] = ret\n",
        "                    else:\n",
        "                        logger.warning(f\"退避先資産 {asset} のモメンタム計算に失敗\")\n",
        "\n",
        "                # リターンでソート\n",
        "                sorted_assets = sorted(returns.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "            # 複数期間モードの処理\n",
        "            else:\n",
        "                # 既存の複数期間計算メソッドを再利用\n",
        "                period_returns = self._calculate_multiple_period_returns_unified(as_of_date, target_assets)\n",
        "\n",
        "                if self.weighting_method == \"Weight Performance\":\n",
        "                    weighted_returns = self._calculate_weighted_performance(period_returns, target_assets)\n",
        "                    sorted_assets = sorted(weighted_returns.items(), key=lambda x: x[1], reverse=True)\n",
        "                else:\n",
        "                    weighted_ranks = self._calculate_weighted_ranks(period_returns, target_assets)\n",
        "                    sorted_assets = sorted(weighted_ranks.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "            # 結果をキャッシュに保存\n",
        "            self._save_to_cache(cache_key, {\"sorted_assets\": sorted_assets})\n",
        "\n",
        "        # 上位1銘柄を選択\n",
        "        if sorted_assets:\n",
        "            top_asset = sorted_assets[0][0]\n",
        "            top_value = sorted_assets[0][1]\n",
        "\n",
        "            # 他の資産の結果も詳細ログに出力\n",
        "            detail_str = \", \".join([f\"{a}:{v:.2%}\" if isinstance(v, float) else f\"{a}:{v:.2f}\"\n",
        "                                   for a, v in sorted_assets])\n",
        "\n",
        "            # 情報ログに選択結果を出力\n",
        "            logger.info(f\"退避先戦略: Top 1 - 選択資産 {top_asset} (値: {top_value:.4f})\")\n",
        "            logger.debug(f\"退避先資産の全評価結果: {detail_str}\")\n",
        "\n",
        "            return [top_asset]\n",
        "\n",
        "        # 計算に失敗した場合は元のリストを返す\n",
        "        logger.warning(\"退避先資産の評価に失敗しました。元のリストを使用します。\")\n",
        "        return self.out_of_market_assets\n",
        "\n",
        "    def _check_stop_loss(self, current_date, holdings, daily):\n",
        "        \"\"\"\n",
        "        指定された日のストップロス条件を確認し、発動資産を処理する\n",
        "\n",
        "        Parameters:\n",
        "        current_date (datetime): 現在の日付\n",
        "        holdings (dict): 現在の保有資産 {資産名: 保有比率}\n",
        "        daily (DataFrame): 日次価格データ\n",
        "\n",
        "        Returns:\n",
        "        tuple: (更新された保有比率, 発動したストップロスの情報)\n",
        "        \"\"\"\n",
        "        if not self.stop_loss_enabled:\n",
        "            return holdings, []\n",
        "\n",
        "        # 前日の日付を取得する（価格ギャップ確認用）\n",
        "        daily_dates = daily.index\n",
        "        current_idx = daily_dates.get_loc(current_date)\n",
        "        prev_date = daily_dates[current_idx - 1] if current_idx > 0 else None\n",
        "\n",
        "        triggered_assets = []\n",
        "        updated_holdings = holdings.copy()\n",
        "\n",
        "        # 各保有資産についてストップロスを確認\n",
        "        for asset, weight in list(holdings.items()):\n",
        "            if asset == 'Cash':\n",
        "                continue\n",
        "\n",
        "            # 基準価格が設定されていない場合はスキップ\n",
        "            if asset not in self.reference_prices:\n",
        "                logger.debug(f\"{current_date.strftime('%Y-%m-%d')}: 資産 {asset} の基準価格が未設定\")\n",
        "                continue\n",
        "\n",
        "            reference_price = self.reference_prices[asset]\n",
        "            stop_loss_price = reference_price * (1 + self.stop_loss_threshold)\n",
        "\n",
        "            # 価格データのチェック - 安値とOpen価格の両方を考慮\n",
        "            low_asset = f\"Low_{asset}\"\n",
        "            open_asset = f\"Open_{asset}\"\n",
        "\n",
        "            # 安値と始値の取得（ギャップダウン考慮）\n",
        "            if low_asset in daily.columns and open_asset in daily.columns:\n",
        "                try:\n",
        "                    low_price = daily.loc[current_date, low_asset]\n",
        "                    open_price = daily.loc[current_date, open_asset]\n",
        "\n",
        "                    # NaN値チェック\n",
        "                    if pd.isna(low_price) or pd.isna(open_price):\n",
        "                        logger.warning(f\"{current_date.strftime('%Y-%m-%d')}: 資産 {asset} の価格データに欠損\")\n",
        "                        continue\n",
        "\n",
        "                    # ストップロス条件: 安値または始値がストップロス価格以下\n",
        "                    # ギャップダウンも考慮（始値が既にストップロス価格以下）\n",
        "                    if min(low_price, open_price) <= stop_loss_price:\n",
        "                        logger.info(f\"ストップロス発動: {asset} ({current_date.strftime('%Y-%m-%d')})\")\n",
        "                        logger.info(f\"  基準価格: {reference_price:.2f}, ストップロス価格: {stop_loss_price:.2f}\")\n",
        "                        logger.info(f\"  安値: {low_price:.2f}, 始値: {open_price:.2f}\")\n",
        "\n",
        "                        # この資産が既にストップロスを発動していないか確認\n",
        "                        asset_key = f\"{asset}_{reference_price}\"\n",
        "                        if asset_key in self.stop_loss_triggered_assets:\n",
        "                            logger.info(f\"資産 {asset} は既にストップロスが発動しているためスキップします\")\n",
        "                            continue\n",
        "\n",
        "                        # 部分キャッシュ化の設定があるか確認\n",
        "                        partial_cash = False\n",
        "                        cash_percentage = 100  # デフォルト100%\n",
        "                        if hasattr(self, 'stop_loss_keep_cash') and self.stop_loss_keep_cash:\n",
        "                            if hasattr(self, 'stop_loss_cash_percentage'):\n",
        "                                cash_percentage = self.stop_loss_cash_percentage\n",
        "                                partial_cash = cash_percentage < 100\n",
        "\n",
        "                        # キャッシュ化する重み\n",
        "                        cash_weight = weight * (cash_percentage / 100)\n",
        "                        remaining_weight = weight - cash_weight\n",
        "\n",
        "                        # ストップロス情報を記録\n",
        "                        triggered_assets.append({\n",
        "                            \"asset\": asset,\n",
        "                            \"weight\": weight,\n",
        "                            \"cash_weight\": cash_weight,\n",
        "                            \"remaining_weight\": remaining_weight,\n",
        "                            \"cash_percentage\": cash_percentage,\n",
        "                            \"reference_price\": reference_price,\n",
        "                            \"stop_loss_price\": stop_loss_price,\n",
        "                            \"trigger_price\": min(low_price, open_price),\n",
        "                            \"date\": current_date,\n",
        "                            \"keep_cash\": self.stop_loss_keep_cash if hasattr(self, 'stop_loss_keep_cash') else False,\n",
        "                            \"partial_cash\": partial_cash\n",
        "                        })\n",
        "\n",
        "                        # 資産を記録して再トリガーを防止\n",
        "                        self.stop_loss_triggered_assets[asset_key] = {\n",
        "                            \"date\": current_date,\n",
        "                            \"reference_price\": reference_price\n",
        "                        }\n",
        "\n",
        "                        # 部分キャッシュ化の場合\n",
        "                        if partial_cash:\n",
        "                            # 更新前に参照値を保存\n",
        "                            original_weight = updated_holdings[asset]\n",
        "\n",
        "                            # 残す部分を調整\n",
        "                            updated_holdings[asset] = remaining_weight\n",
        "\n",
        "                            # キャッシュ部分を追加\n",
        "                            if 'Cash' in updated_holdings:\n",
        "                                updated_holdings['Cash'] += cash_weight\n",
        "                            else:\n",
        "                                updated_holdings['Cash'] = cash_weight\n",
        "\n",
        "                            logger.info(f\"部分キャッシュ化: {asset} ({cash_percentage}%をキャッシュ化)\")\n",
        "                        else:\n",
        "                            # 通常の完全キャッシュ化\n",
        "                            del updated_holdings[asset]\n",
        "\n",
        "                            # キャッシュポジションを追加または更新\n",
        "                            if 'Cash' in updated_holdings:\n",
        "                                updated_holdings['Cash'] += weight\n",
        "                            else:\n",
        "                                updated_holdings['Cash'] = weight\n",
        "\n",
        "                        # 翌日の処理のための情報を保存\n",
        "                        next_date_str = current_date.strftime('%Y-%m-%d')\n",
        "                        if next_date_str not in self.pending_cash_to_safety:\n",
        "                            self.pending_cash_to_safety[next_date_str] = []\n",
        "\n",
        "                        self.pending_cash_to_safety[next_date_str].append({\n",
        "                            \"weight\": weight,\n",
        "                            \"original_asset\": asset,\n",
        "                            \"stop_loss_date\": current_date,\n",
        "                        })\n",
        "                except Exception as e:\n",
        "                    logger.error(f\"ストップロス判定中にエラー発生 ({asset}): {e}\")\n",
        "            else:\n",
        "                logger.warning(f\"{current_date.strftime('%Y-%m-%d')}: 資産 {asset} の安値または始値データがありません\")\n",
        "\n",
        "        return updated_holdings, triggered_assets\n",
        "\n",
        "    # 修正後のコード\n",
        "    def _process_pending_cash_to_safety(self, current_date, holdings, daily):\n",
        "        \"\"\"\n",
        "        キャッシュポジションから退避先資産への移行処理\n",
        "        Keep Cash Positionが有効な場合は移行を行わない\n",
        "\n",
        "        Parameters:\n",
        "        current_date (datetime): 現在の日付\n",
        "        holdings (dict): 現在の保有資産 {資産名: 保有比率}\n",
        "        daily (DataFrame): 日次価格データ\n",
        "\n",
        "        Returns:\n",
        "        dict: 更新された保有資産 {資産名: 保有比率}\n",
        "        \"\"\"\n",
        "        # Keep Cash Positionが有効な場合は処理せずにそのまま返す\n",
        "        if hasattr(self, 'stop_loss_keep_cash') and self.stop_loss_keep_cash:\n",
        "            return holdings  # キャッシュポジションを維持\n",
        "\n",
        "        # 前日の日付をキーとして検索\n",
        "        prev_date = (current_date - pd.Timedelta(days=1)).strftime('%Y-%m-%d')\n",
        "        # 当日の日付もチェック（週末や休場日をまたいだ場合）\n",
        "        current_date_str = current_date.strftime('%Y-%m-%d')\n",
        "\n",
        "        # 処理対象キーを取得（前日と当日をチェック）\n",
        "        pending_dates = []\n",
        "        if prev_date in self.pending_cash_to_safety:\n",
        "            pending_dates.append(prev_date)\n",
        "        if current_date_str in self.pending_cash_to_safety:\n",
        "            pending_dates.append(current_date_str)\n",
        "\n",
        "        if not pending_dates:\n",
        "            return holdings  # 処理対象なし\n",
        "\n",
        "        updated_holdings = holdings.copy()\n",
        "\n",
        "        # 処理すべき保留中のキャッシュ移行を集約\n",
        "        total_pending_weight = 0\n",
        "        # ログにキャッシュの移行情報を記録\n",
        "        if hasattr(self, 'stop_loss_keep_cash') and self.stop_loss_keep_cash:\n",
        "            partial_msg = \"\"\n",
        "            if hasattr(self, 'stop_loss_cash_percentage') and self.stop_loss_cash_percentage < 100:\n",
        "                partial_msg = f\"（{self.stop_loss_cash_percentage}%）\"\n",
        "            logger.info(f\"{current_date.strftime('%Y-%m-%d')}: キャッシュポジション{partial_msg}を維持しています\")\n",
        "\n",
        "        for date_key in pending_dates:\n",
        "            pending_list = self.pending_cash_to_safety[date_key]\n",
        "            for pending in pending_list:\n",
        "                total_pending_weight += pending[\"weight\"]\n",
        "\n",
        "                # ストップロス履歴に移行日を記録\n",
        "                for history in self.stop_loss_history:\n",
        "                    if (history[\"original_asset\"] == pending[\"original_asset\"] and\n",
        "                        history[\"stop_loss_date\"] == pending[\"stop_loss_date\"]):\n",
        "                        history[\"moved_to_safety_date\"] = current_date\n",
        "\n",
        "        # 保留中のキャッシュがある場合は処理\n",
        "        if total_pending_weight > 0 and 'Cash' in updated_holdings:\n",
        "            # キャッシュポジションから移行すべき重みを計算\n",
        "            # 注: 既にキャッシュポジションが変更されている可能性があるため、\n",
        "            # 移行する重みはキャッシュ総量を超えないようにする\n",
        "            cash_weight = min(updated_holdings['Cash'], total_pending_weight)\n",
        "            if cash_weight > 0:\n",
        "                # キャッシュから減額\n",
        "                updated_holdings['Cash'] -= cash_weight\n",
        "                if updated_holdings['Cash'] <= 0:\n",
        "                    del updated_holdings['Cash']\n",
        "\n",
        "                # 退避先資産を選択\n",
        "                safety_assets = self._evaluate_out_of_market_assets(current_date)\n",
        "\n",
        "                # 退避先資産へ移行\n",
        "                weight_per_asset = cash_weight / len(safety_assets)\n",
        "                for safety_asset in safety_assets:\n",
        "                    if safety_asset in updated_holdings:\n",
        "                        updated_holdings[safety_asset] += weight_per_asset\n",
        "                    else:\n",
        "                        updated_holdings[safety_asset] = weight_per_asset\n",
        "\n",
        "                logger.info(f\"{current_date.strftime('%Y-%m-%d')}: キャッシュポジション {cash_weight:.2%} を退避先資産 {safety_assets} へ移行\")\n",
        "\n",
        "        # 処理済みの保留データを削除\n",
        "        for date_key in pending_dates:\n",
        "            del self.pending_cash_to_safety[date_key]\n",
        "\n",
        "        return updated_holdings\n",
        "\n",
        "    def _calculate_cumulative_rfr_return(self, end_date, lookback_months):\n",
        "        \"\"\"期間に応じた累積リスクフリーレートを計算\"\"\"\n",
        "        end_date = pd.to_datetime(end_date)\n",
        "\n",
        "        # 開始日の計算\n",
        "        start_date = end_date - relativedelta(months=lookback_months)\n",
        "\n",
        "        # 期間内のリスクフリーレートを取得（end_dateまでのデータのみ）\n",
        "        if self.rfr_data is None or self.rfr_data.empty:\n",
        "            logger.warning(\"リスクフリーレートデータがないため、デフォルト値を使用\")\n",
        "            return 0.01 * (lookback_months/12)  # 年率1%の月割り\n",
        "\n",
        "        # 該当期間のリスクフリーレートを抽出（end_date以前のデータのみ）\n",
        "        available_rfr = self.rfr_data[self.rfr_data.index <= end_date]\n",
        "        period_rfr = available_rfr[(available_rfr.index >= start_date) &\n",
        "                                (available_rfr.index <= end_date)]\n",
        "\n",
        "        if period_rfr.empty:\n",
        "            logger.warning(f\"期間 {start_date} - {end_date} のリスクフリーレートデータがありません\")\n",
        "            return 0.01 * (lookback_months/12)  # 年率1%の月割り\n",
        "\n",
        "        # 複利計算で累積リターンを計算\n",
        "        cumulative_rfr = (1 + period_rfr).prod() - 1\n",
        "\n",
        "        logger.info(f\"期間 {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}\")\n",
        "        # 月数の表示を修正\n",
        "        month_difference = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)\n",
        "        logger.info(f\"累積リスクフリーレート: {cumulative_rfr:.4f} ({month_difference}ヶ月分)\")\n",
        "\n",
        "        return cumulative_rfr\n",
        "\n",
        "    def _calculate_cumulative_rfr_return_days(self, end_date, lookback_days):\n",
        "        \"\"\"日数に応じた累積リスクフリーレートを計算\"\"\"\n",
        "        end_date = pd.to_datetime(end_date)\n",
        "\n",
        "        # 開始日の計算\n",
        "        start_date = end_date - pd.Timedelta(days=lookback_days)\n",
        "\n",
        "        # 期間内のリスクフリーレートを取得（end_dateまでのデータのみ）\n",
        "        if self.rfr_data_daily is None or self.rfr_data_daily.empty:\n",
        "            logger.warning(\"日次リスクフリーレートデータがないため、デフォルト値を使用\")\n",
        "            return 0.01 * (lookback_days/365)  # 年率1%の日割り\n",
        "\n",
        "        # 該当期間のリスクフリーレートを抽出（end_date以前のデータのみ）\n",
        "        available_rfr = self.rfr_data_daily[self.rfr_data_daily.index <= end_date]\n",
        "        period_rfr = available_rfr[(available_rfr.index >= start_date) &\n",
        "                                (available_rfr.index <= end_date)]\n",
        "\n",
        "        if period_rfr.empty:\n",
        "            logger.warning(f\"期間 {start_date} - {end_date} の日次リスクフリーレートデータがありません\")\n",
        "            return 0.01 * (lookback_days/365)  # 年率1%の日割り\n",
        "\n",
        "        # 複利計算で累積リターンを計算\n",
        "        cumulative_rfr = (1 + period_rfr).prod() - 1\n",
        "\n",
        "        logger.info(f\"日次期間 {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}\")\n",
        "        logger.info(f\"累積日次リスクフリーレート: {cumulative_rfr:.4f} ({lookback_days}日分)\")\n",
        "\n",
        "        return cumulative_rfr\n",
        "\n",
        "    def _evaluate_absolute_momentum(self, data, start_date, end_date):\n",
        "        start_date = pd.to_datetime(start_date)\n",
        "        end_date = pd.to_datetime(end_date)\n",
        "        if self.absolute_momentum_asset not in data.columns:\n",
        "            logger.warning(f\"警告: 絶対モメンタム資産 {self.absolute_momentum_asset} が存在しません\")\n",
        "            return True, 0.0\n",
        "        lqd_return = self._calculate_single_asset_return(data, self.absolute_momentum_asset, start_date, end_date)\n",
        "        rfr_series = self.rfr_data[self.rfr_data.index >= start_date]\n",
        "        rfr_series = rfr_series[rfr_series.index <= end_date]\n",
        "        if rfr_series.empty:\n",
        "            rfr_total = 0.01\n",
        "        else:\n",
        "            compounded = (1 + rfr_series).prod()\n",
        "            rfr_total = compounded - 1\n",
        "        excess_return = lqd_return - rfr_total\n",
        "        logger.info(f\"評価期間 {start_date.date()} ~ {end_date.date()} で、LQDリターン: {lqd_return:.2%}, RFR累積リターン: {rfr_total:.2%}, 超過リターン: {excess_return:.2%}\")\n",
        "        return absolute_momentum_pass, excess_return\n",
        "\n",
        "\n",
        "\n",
        "    def _calculate_multiple_period_returns_unified(self, end_date, assets):\n",
        "        \"\"\"シングルピリオドと同一の計算法を使用した複数期間リターン計算\"\"\"\n",
        "        period_returns = {}\n",
        "\n",
        "        # 計算日をログ出力\n",
        "        logger.info(f\"計算日: {end_date.strftime('%Y-%m-%d')}\")\n",
        "\n",
        "        for period_idx in range(self.multiple_periods_count):\n",
        "            period = self.multiple_periods[period_idx]\n",
        "            length, unit = period.get(\"length\"), period.get(\"unit\")\n",
        "\n",
        "            if length is None or length <= 0:\n",
        "                continue\n",
        "\n",
        "            # 各資産のリターンを計算\n",
        "            period_returns[period_idx] = {}\n",
        "\n",
        "            for asset in assets:\n",
        "                # 単位に応じて適切なメソッドを使用\n",
        "                if unit == \"Months\":\n",
        "                    # 月単位の計算\n",
        "                    asset_return = self.calculate_monthly_momentum(asset, end_date, length)\n",
        "                else:\n",
        "                    # 日数単位の計算 - 新しいメソッドを使用\n",
        "                    asset_return = self.calculate_daily_momentum(asset, end_date, length)\n",
        "\n",
        "                if asset_return is not None:\n",
        "                    period_returns[period_idx][asset] = asset_return\n",
        "                    logger.debug(f\"期間 {length} {unit}, 資産 {asset}: リターン {asset_return:.2%}\")\n",
        "                else:\n",
        "                    logger.warning(f\"期間 {length} {unit}, 資産 {asset} のリターン計算ができませんでした。\")\n",
        "\n",
        "        return period_returns\n",
        "\n",
        "    def _validate_and_normalize_weights(self, weights):\n",
        "        valid_weights = [w for w in weights if w is not None and w > 0]\n",
        "        if not valid_weights:\n",
        "            logger.warning(\"有効な重みがありません。デフォルト値として均等配分を使用します。\")\n",
        "            return [1.0 / len(weights)] * len(weights)\n",
        "        total_weight = sum(valid_weights)\n",
        "        if abs(total_weight - 100) <= 0.001:\n",
        "            return valid_weights\n",
        "        logger.info(f\"重みの合計が100%ではありません ({total_weight:.2f}%)。正規化を実行します。\")\n",
        "        normalized_weights = [w * (100 / total_weight) for w in valid_weights]\n",
        "        return normalized_weights\n",
        "\n",
        "    def _calculate_weighted_performance(self, period_returns, assets):\n",
        "        weighted_returns = {}\n",
        "        for asset in assets:\n",
        "            weighted_return = 0.0\n",
        "            total_weight = 0.0\n",
        "            weights = []\n",
        "            returns = []\n",
        "            for period_idx in range(self.multiple_periods_count):\n",
        "                if period_idx in period_returns and asset in period_returns[period_idx]:\n",
        "                    weight = self.multiple_periods[period_idx][\"weight\"] / 100.0\n",
        "                    weights.append(weight)\n",
        "                    returns.append(period_returns[period_idx][asset])\n",
        "                    total_weight += weight\n",
        "            if total_weight > 0:\n",
        "                normalized_weights = self._validate_and_normalize_weights([w * 100 for w in weights])\n",
        "                normalized_weights = [w / 100 for w in normalized_weights]\n",
        "                for i, weight in enumerate(normalized_weights):\n",
        "                    if returns[i] is not None: weighted_return += weight * returns[i]\n",
        "                weighted_returns[asset] = weighted_return\n",
        "            else:\n",
        "                weighted_returns[asset] = 0.0\n",
        "        return weighted_returns\n",
        "\n",
        "    def _calculate_weighted_ranks(self, period_returns, assets):\n",
        "        period_ranks = {}\n",
        "        for period_idx in period_returns:\n",
        "            sorted_period_assets = sorted(period_returns[period_idx].items(), key=lambda x: x[1], reverse=True)\n",
        "            rank_scores = {}\n",
        "            for rank, (asset, _) in enumerate(sorted_period_assets):\n",
        "                rank_scores[asset] = len(sorted_period_assets) - rank\n",
        "            period_ranks[period_idx] = rank_scores\n",
        "        weighted_ranks = {}\n",
        "        for asset in assets:\n",
        "            weighted_rank = 0.0\n",
        "            total_weight = 0.0\n",
        "            weights = []\n",
        "            ranks = []\n",
        "            for period_idx in period_ranks:\n",
        "                if asset in period_ranks[period_idx]:\n",
        "                    weight = self.multiple_periods[period_idx][\"weight\"] / 100.0\n",
        "                    weights.append(weight)\n",
        "                    ranks.append(period_ranks[period_idx][asset])\n",
        "                    total_weight += weight\n",
        "            if total_weight > 0:\n",
        "                normalized_weights = self._validate_and_normalize_weights([w * 100 for w in weights])\n",
        "                normalized_weights = [w / 100 for w in normalized_weights]\n",
        "                for i, weight in enumerate(normalized_weights):\n",
        "                    if ranks[i] is not None: weighted_rank += weight * ranks[i]\n",
        "                weighted_ranks[asset] = weighted_rank\n",
        "            else:\n",
        "                weighted_ranks[asset] = 0.0\n",
        "        return weighted_ranks\n",
        "\n",
        "    def _calculate_weighted_rfr_return(self, end_date):\n",
        "        \"\"\"\n",
        "        複数期間の重み付きリスクフリーレートを計算する（修正版）\n",
        "        \"\"\"\n",
        "        rfr_weighted_return = 0.0\n",
        "        total_weight = 0.0\n",
        "        weights = []\n",
        "        rfr_returns = []\n",
        "\n",
        "        for period_idx in range(self.multiple_periods_count):\n",
        "            period = self.multiple_periods[period_idx]\n",
        "            length, unit, weight_pct = period.get(\"length\"), period.get(\"unit\"), period.get(\"weight\", 0)\n",
        "\n",
        "            if length is not None and length > 0 and weight_pct > 0:\n",
        "                weight = weight_pct / 100.0\n",
        "\n",
        "                # 期間に応じたRFRリターン計算（ここを修正）\n",
        "                if unit == \"Months\":\n",
        "                    # 月単位の場合\n",
        "                    period_rfr_return = self._calculate_cumulative_rfr_return(end_date, length)\n",
        "                else:\n",
        "                    # 日数単位の場合は日次計算メソッドを使用\n",
        "                    period_rfr_return = self._calculate_cumulative_rfr_return_days(end_date, length)\n",
        "\n",
        "                # None値チェック\n",
        "                if period_rfr_return is None:\n",
        "                    logger.warning(f\"期間 {length} {unit} のRFR計算ができませんでした。デフォルト値を使用します。\")\n",
        "                    period_rfr_return = 0.001  # デフォルト値\n",
        "\n",
        "                weights.append(weight_pct)\n",
        "                rfr_returns.append(period_rfr_return)\n",
        "                total_weight += weight\n",
        "                logger.info(f\"期間 {length} {unit}: RFRリターン {period_rfr_return:.4f}\")\n",
        "\n",
        "        if total_weight > 0 and rfr_returns:  # 空でないことを確認\n",
        "            normalized_weights = self._validate_and_normalize_weights(weights)\n",
        "            normalized_weights = [w / 100 for w in normalized_weights]\n",
        "\n",
        "            for i, weight in enumerate(normalized_weights):\n",
        "                rfr_weighted_return += weight * rfr_returns[i]\n",
        "\n",
        "            logger.info(f\"リスクフリーレート重み付けリターン: {rfr_weighted_return:.4f}\")\n",
        "            return rfr_weighted_return\n",
        "        else:\n",
        "            return 0.01  # デフォルト値\n",
        "\n",
        "    def _calculate_weighted_absolute_momentum_unified(self, end_date):\n",
        "        \"\"\"シングルピリオドと同一の計算法を使用した重み付き絶対モメンタム計算\"\"\"\n",
        "        abs_mom_weighted_return = 0.0\n",
        "        total_weight = 0.0\n",
        "        weights = []\n",
        "        abs_returns = []\n",
        "        successful_periods = []\n",
        "\n",
        "        for period_idx in range(self.multiple_periods_count):\n",
        "            period = self.multiple_periods[period_idx]\n",
        "            length, unit, weight_pct = period.get(\"length\"), period.get(\"unit\"), period.get(\"weight\", 0)\n",
        "\n",
        "            if length is None or length <= 0 or weight_pct <= 0:\n",
        "                continue\n",
        "\n",
        "            # 単位に応じた適切なメソッドを使用\n",
        "            if unit == \"Months\":\n",
        "                # 月単位の計算\n",
        "                period_return = self.calculate_monthly_momentum(\n",
        "                    self.absolute_momentum_asset,\n",
        "                    end_date,\n",
        "                    length\n",
        "                )\n",
        "            else:\n",
        "                # 日数単位の計算 - 新しいメソッドを使用\n",
        "                period_return = self.calculate_daily_momentum(\n",
        "                    self.absolute_momentum_asset,\n",
        "                    end_date,\n",
        "                    length\n",
        "                )\n",
        "\n",
        "            # 成功した計算のみ使用\n",
        "            if period_return is not None:\n",
        "                weights.append(weight_pct)\n",
        "                abs_returns.append(period_return)\n",
        "                total_weight += weight_pct\n",
        "                successful_periods.append(f\"{length} {unit}\")\n",
        "                logger.info(f\"期間 {length} {unit}: リターン {period_return:.2%}\")\n",
        "            else:\n",
        "                logger.warning(f\"期間 {length} {unit} の絶対モメンタム計算ができませんでした。この期間はスキップします。\")\n",
        "\n",
        "        # 計算成功率とログ出力\n",
        "        if successful_periods:\n",
        "            success_rate = len(successful_periods) / len([p for p in self.multiple_periods if p.get(\"weight\", 0) > 0])\n",
        "            logger.info(f\"絶対モメンタム計算: {len(successful_periods)} 期間成功 (成功率 {success_rate:.0%})\")\n",
        "            logger.info(f\"計算成功期間: {', '.join(successful_periods)}\")\n",
        "\n",
        "        # 重み付け計算\n",
        "        if total_weight > 0:\n",
        "            # 重みの正規化\n",
        "            normalized_weights = self._validate_and_normalize_weights(weights)\n",
        "            normalized_weights = [w / 100 for w in normalized_weights]\n",
        "\n",
        "            # 各期間の重み付けリターンを計算\n",
        "            for i, weight in enumerate(normalized_weights):\n",
        "                abs_mom_weighted_return += weight * abs_returns[i]\n",
        "\n",
        "            logger.info(f\"絶対モメンタム重み付けリターン: {abs_mom_weighted_return:.4f}\")\n",
        "            return abs_mom_weighted_return\n",
        "        else:\n",
        "            logger.warning(\"有効な絶対モメンタム計算期間がありませんでした。デフォルト値0.0を使用します。\")\n",
        "            return 0.0\n",
        "\n",
        "    def _generate_cache_key(self, decision_date):\n",
        "        \"\"\"\n",
        "        キャッシュキーを生成する（日付だけでなく設定情報も含める）\n",
        "        \"\"\"\n",
        "        base_key = decision_date.strftime(\"%Y-%m-%d\")\n",
        "\n",
        "        # 設定情報をキーに含める\n",
        "        config_hash = f\"P{self.performance_periods}_L{self.lookback_period}_{self.lookback_unit}\"\n",
        "\n",
        "        # マルチ期間の設定をハッシュに含める\n",
        "        if self.performance_periods == \"Multiple Periods\":\n",
        "            periods_hash = \"_\".join([\n",
        "                f\"{p.get('length')}_{p.get('unit')}_{p.get('weight')}\"\n",
        "                for p in self.multiple_periods\n",
        "                if p.get('length') is not None and p.get('weight', 0) > 0\n",
        "            ])\n",
        "            config_hash += f\"_M{periods_hash}\"\n",
        "\n",
        "        return f\"{base_key}_{config_hash}\"\n",
        "\n",
        "    def get_latest_rebalance_date(self, calc_date):\n",
        "        year = calc_date.year\n",
        "        month = calc_date.month\n",
        "        return self._get_last_trading_day(year, month)\n",
        "\n",
        "    def get_monthly_next_rebalance_candidate(self, calc_date):\n",
        "        year = calc_date.year\n",
        "        month = calc_date.month\n",
        "        last_td = self._get_last_trading_day(year, month)\n",
        "        return last_td\n",
        "\n",
        "    def get_bimonthly_next_rebalance_candidate(self, calc_date):\n",
        "        next_month_date = calc_date + relativedelta(months=1)\n",
        "        return self._get_last_trading_day(next_month_date.year, next_month_date.month)\n",
        "\n",
        "    def get_quarterly_next_rebalance_candidate(self, calc_date):\n",
        "        quarter = ((calc_date.month - 1) // 3) + 1\n",
        "        end_month = quarter * 3\n",
        "        return self._get_last_trading_day(calc_date.year, end_month)\n",
        "\n",
        "    def _get_last_trading_day(self, year, month):\n",
        "        start_date = f\"{year}-{month:02d}-01\"\n",
        "        last_day = calendar.monthrange(year, month)[1]\n",
        "        end_date = f\"{year}-{month:02d}-{last_day}\"\n",
        "        nyse = mcal.get_calendar('NYSE')\n",
        "        schedule = nyse.schedule(start_date=start_date, end_date=end_date)\n",
        "        if schedule.empty:\n",
        "            return pd.Timestamp(end_date)\n",
        "\n",
        "    def get_last_trading_day_of_month(self, year, month):\n",
        "        \"\"\"指定された年月の最終取引日を取得（実際のデータに基づく）\"\"\"\n",
        "        # 月末のカレンダー日を取得\n",
        "        _, last_day = calendar.monthrange(year, month)\n",
        "        month_end = pd.Timestamp(year=year, month=month, day=last_day)\n",
        "\n",
        "        # 価格データから月内の全取引日を抽出\n",
        "        dates_in_month = self.price_data.index[\n",
        "            (self.price_data.index.year == year) &\n",
        "            (self.price_data.index.month == month)\n",
        "        ]\n",
        "\n",
        "        if dates_in_month.empty:\n",
        "            return None  # データなし\n",
        "\n",
        "        # 月内の最後の取引日を返す\n",
        "        return dates_in_month[-1]\n",
        "\n",
        "    def get_latest_valid_rebalance_date(self, current_date):\n",
        "        \"\"\"\n",
        "        Trading Frequency設定に基づいて、直近の有効なリバランス日（月末）を取得する\n",
        "\n",
        "        Parameters:\n",
        "        current_date (datetime): 現在の日付\n",
        "\n",
        "        Returns:\n",
        "        datetime: 直近の有効なリバランス日、または None\n",
        "        \"\"\"\n",
        "        if not isinstance(current_date, pd.Timestamp):\n",
        "            current_date = pd.to_datetime(current_date)\n",
        "\n",
        "        current_year = current_date.year\n",
        "        current_month = current_date.month\n",
        "\n",
        "        # 月のリストを過去に向かって生成（当月を含む過去12ヶ月分）\n",
        "        past_months = []\n",
        "        for i in range(12):  # 最大12ヶ月遡る\n",
        "            month = current_month - i\n",
        "            year = current_year\n",
        "            while month <= 0:\n",
        "                month += 12\n",
        "                year -= 1\n",
        "            past_months.append((year, month))\n",
        "\n",
        "        # Trading Frequencyに基づいて有効なリバランス月をフィルタリング\n",
        "        valid_months = []\n",
        "        if self.trading_frequency == \"Monthly\":\n",
        "            valid_months = past_months\n",
        "        elif self.trading_frequency == \"Bimonthly (hold: 1,3,5,7,9,11)\":\n",
        "            valid_months = [(y, m) for y, m in past_months if m in [12, 2, 4, 6, 8, 10]]\n",
        "        elif self.trading_frequency == \"Bimonthly (hold: 2,4,6,8,10,12)\":\n",
        "            valid_months = [(y, m) for y, m in past_months if m in [1, 3, 5, 7, 9, 11]]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 1,4,7,10)\":\n",
        "            valid_months = [(y, m) for y, m in past_months if m in [12, 3, 6, 9]]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 2,5,8,11)\":\n",
        "            valid_months = [(y, m) for y, m in past_months if m in [1, 4, 7, 10]]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 3,6,9,12)\":\n",
        "            valid_months = [(y, m) for y, m in past_months if m in [2, 5, 8, 11]]\n",
        "\n",
        "        # 最新の有効なリバランス月を取得（現在の月を含む）\n",
        "        for year, month in valid_months:\n",
        "            last_trading_day = self.get_last_trading_day_of_month(year, month)\n",
        "            if last_trading_day is not None:\n",
        "                # 月末が現在の日付より前であることを確認\n",
        "                if last_trading_day <= current_date:\n",
        "                    return last_trading_day\n",
        "\n",
        "        # 有効なリバランス日が見つからない場合はNoneを返す\n",
        "        return None\n",
        "\n",
        "    def _get_first_trading_day(self, year, month):\n",
        "        start_date = f\"{year}-{month:02d}-01\"\n",
        "        nyse = mcal.get_calendar('NYSE')\n",
        "        schedule = nyse.schedule(start_date=start_date, end_date=(pd.Timestamp(start_date) + pd.Timedelta(days=7)).strftime('%Y-%m-%d'))\n",
        "        if schedule.empty:\n",
        "            return pd.Timestamp(start_date)\n",
        "        return schedule.index[0]\n",
        "\n",
        "    def calculate_momentum_ranks(self, as_of_date=None):\n",
        "        \"\"\"モメンタムランク計算 (指定日付まで)\"\"\"\n",
        "        # キャッシュクリア\n",
        "        self.clear_cache()\n",
        "\n",
        "        # 日付指定がない場合は最新の取引日を使用\n",
        "        if as_of_date is None:\n",
        "            as_of_date = self.price_data.index[-1]\n",
        "        else:\n",
        "            as_of_date = pd.to_datetime(as_of_date)\n",
        "\n",
        "        # 対象資産の確認\n",
        "        target_assets = [ticker for ticker in self.tickers if ticker in self.price_data.columns]\n",
        "        if not target_assets:\n",
        "            logger.warning(\"対象資産がデータに存在しません。\")\n",
        "            return {\"sorted_assets\": [], \"selected_assets\": self.out_of_market_assets, \"message\": \"対象資産がデータに存在しません\"}\n",
        "\n",
        "        # シングル期間モードの場合\n",
        "        if self.performance_periods == \"Single Period\":\n",
        "            # 各資産のモメンタム計算\n",
        "            returns = {}\n",
        "            for asset in target_assets:\n",
        "                # 単位に応じた適切なメソッドを使用\n",
        "                if self.lookback_unit == \"Months\":\n",
        "                    ret = self.calculate_monthly_momentum(asset, as_of_date, self.lookback_period)\n",
        "                else:  # Days\n",
        "                    ret = self.calculate_daily_momentum(asset, as_of_date, self.lookback_period)\n",
        "\n",
        "                if ret is not None:\n",
        "                    returns[asset] = ret\n",
        "                else:\n",
        "                    logger.warning(f\"資産 {asset} のモメンタム計算ができませんでした\")\n",
        "\n",
        "            sorted_assets = sorted(returns.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "            # 絶対モメンタム評価\n",
        "            if self.single_absolute_momentum == \"Yes\":\n",
        "                abs_lookback = self.absolute_momentum_period if self.absolute_momentum_custom_period else self.lookback_period\n",
        "\n",
        "                # 絶対モメンタム資産のリターン計算\n",
        "                if self.lookback_unit == \"Months\":\n",
        "                    abs_ret = self.calculate_monthly_momentum(self.absolute_momentum_asset, as_of_date, abs_lookback)\n",
        "                    # 同期間の累積リスクフリーレート計算\n",
        "                    rfr_return = self._calculate_cumulative_rfr_return(as_of_date, abs_lookback)\n",
        "                else:  # Days\n",
        "                    abs_ret = self.calculate_daily_momentum(self.absolute_momentum_asset, as_of_date, abs_lookback)\n",
        "                    # 同期間の累積リスクフリーレート計算\n",
        "                    rfr_return = self._calculate_cumulative_rfr_return_days(as_of_date, abs_lookback)\n",
        "\n",
        "                # 判定\n",
        "                if abs_ret is None:\n",
        "                    absolute_momentum_pass = False\n",
        "                    logger.warning(f\"絶対モメンタム資産 {self.absolute_momentum_asset} のリターンが計算不能\")\n",
        "                else:\n",
        "                    absolute_momentum_pass = abs_ret > rfr_return\n",
        "\n",
        "                # 詳細なログ出力\n",
        "                logger.info(f\"絶対モメンタム評価 ({as_of_date.strftime('%Y-%m-%d')}):\")\n",
        "                logger.info(f\"- 資産: {self.absolute_momentum_asset}, 期間: {abs_lookback}{self.lookback_unit.lower()}\")\n",
        "                logger.info(f\"- リターン: {abs_ret:.4f} vs リスクフリーレート: {rfr_return:.4f}\")\n",
        "                logger.info(f\"- 判定結果: {'合格' if absolute_momentum_pass else '失格'}\")\n",
        "\n",
        "                if absolute_momentum_pass:\n",
        "                    selected_assets = [asset for asset, _ in sorted_assets[:self.assets_to_hold]]\n",
        "\n",
        "                    # 追加: Negative relative momentumオプションがYes & トップ銘柄が負(<0)なら退避先へ\n",
        "                    if self.negative_relative_momentum == \"Yes\" and len(sorted_assets) > 0:\n",
        "                        top_asset, top_return = sorted_assets[0]\n",
        "                        if top_return < 0:\n",
        "                            # 修正: 新しいメソッドを使って退避先を選択\n",
        "                            selected_assets = self._evaluate_out_of_market_assets(as_of_date)\n",
        "                            result_text = \"Absolute: Passed but top RM < 0 -> Out of Market\"\n",
        "                        else:\n",
        "                            result_text = \"Absolute: Passed\"\n",
        "                    else:\n",
        "                        result_text = \"Absolute: Passed\"\n",
        "\n",
        "                else:\n",
        "                    # 修正: 新しいメソッドを使って退避先を選択\n",
        "                    selected_assets = self._evaluate_out_of_market_assets(as_of_date)\n",
        "                    result_text = \"Absolute: Failed\"\n",
        "\n",
        "                logger.info(f\"{result_text}: {selected_assets} を選択\")\n",
        "\n",
        "            else:\n",
        "                selected_assets = [asset for asset, ret in sorted_assets[:self.assets_to_hold] if ret is not None and ret > 0]\n",
        "                if not selected_assets:\n",
        "                    selected_assets = self.out_of_market_assets\n",
        "                result_text = \"Relative Only\"\n",
        "\n",
        "        # 複数期間モードの場合\n",
        "        else:\n",
        "            # 統一された計算方法を使用\n",
        "            period_returns = self._calculate_multiple_period_returns_unified(as_of_date, target_assets)\n",
        "\n",
        "            if self.weighting_method == \"Weight Performance\":\n",
        "                weighted_returns = self._calculate_weighted_performance(period_returns, target_assets)\n",
        "                sorted_assets = sorted(weighted_returns.items(), key=lambda x: x[1], reverse=True)\n",
        "            else:\n",
        "                weighted_ranks = self._calculate_weighted_ranks(period_returns, target_assets)\n",
        "                sorted_assets = sorted(weighted_ranks.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "            if self.single_absolute_momentum == \"Yes\":\n",
        "                # 統一された絶対モメンタム計算を使用\n",
        "                rfr_weighted_return = self._calculate_weighted_rfr_return(as_of_date)\n",
        "                abs_mom_weighted_return = self._calculate_weighted_absolute_momentum_unified(as_of_date)\n",
        "\n",
        "                # 判定ロジックは従来通り（仕様どおり）\n",
        "                absolute_momentum_pass = abs_mom_weighted_return > rfr_weighted_return\n",
        "\n",
        "                if absolute_momentum_pass:\n",
        "                    selected_assets = [asset for asset, _ in sorted_assets[:self.assets_to_hold]]\n",
        "\n",
        "                    # 追加: Negative relative momentumオプション\n",
        "                    if self.negative_relative_momentum == \"Yes\" and len(sorted_assets) > 0:\n",
        "                        top_asset, top_return = sorted_assets[0]\n",
        "                        if top_return < 0:\n",
        "                            # 修正: 新しいメソッドを使って退避先を選択\n",
        "                            selected_assets = self._evaluate_out_of_market_assets(as_of_date)\n",
        "                            result_text = \"Absolute: Passed (Multiple) but top RM < 0 -> Out of Market\"\n",
        "                        else:\n",
        "                            result_text = \"Absolute: Passed (Multiple)\"\n",
        "                    else:\n",
        "                        result_text = \"Absolute: Passed (Multiple)\"\n",
        "\n",
        "                else:\n",
        "                    # 修正: 新しいメソッドを使って退避先を選択\n",
        "                    selected_assets = self._evaluate_out_of_market_assets(as_of_date)\n",
        "                    result_text = \"Absolute: Failed (Multiple)\"\n",
        "\n",
        "                logger.info(f\"{result_text}: {selected_assets} を選択（重み付け絶対モメンタム: {abs_mom_weighted_return:.2%} vs {rfr_weighted_return:.2%}）\")\n",
        "\n",
        "            else:\n",
        "                selected_assets = [asset for asset, _ in sorted_assets[:self.assets_to_hold]]\n",
        "                result_text = \"Relative Only (Multiple)\"\n",
        "\n",
        "                if not selected_assets:\n",
        "                    selected_assets = self.out_of_market_assets\n",
        "                    logger.info(f\"選択可能な資産がないため {self.out_of_market_assets} を選択\")\n",
        "\n",
        "        # 絶対モメンタム情報を保存するための変数\n",
        "        abs_momentum_info = None\n",
        "\n",
        "        # 絶対モメンタムを使用している場合のみ情報を保存\n",
        "        if self.single_absolute_momentum == \"Yes\":\n",
        "            if self.performance_periods == \"Single Period\":\n",
        "                # シングル期間モードの場合\n",
        "                abs_momentum_info = {\n",
        "                    \"absolute_return\": abs_ret,\n",
        "                    \"risk_free_rate\": rfr_return\n",
        "                }\n",
        "            else:\n",
        "                # 複数期間モードの場合\n",
        "                abs_momentum_info = {\n",
        "                    \"absolute_return\": abs_mom_weighted_return,\n",
        "                    \"risk_free_rate\": rfr_weighted_return\n",
        "                }\n",
        "\n",
        "        # 結果オブジェクトに絶対モメンタム情報を含めて保存\n",
        "        self.momentum_results = {\n",
        "            \"sorted_assets\": sorted_assets,\n",
        "            \"selected_assets\": selected_assets,\n",
        "            \"message\": result_text,\n",
        "            \"abs_momentum_info\": abs_momentum_info  # 追加\n",
        "        }\n",
        "        self._save_to_cache(self._generate_cache_key(as_of_date), self.momentum_results)\n",
        "        return self.momentum_results\n",
        "\n",
        "    def run_backtest(self):\n",
        "        # 新しいバックテスト実行前に結果をクリア\n",
        "        self.clear_results()\n",
        "\n",
        "        valid, errors, warnings_list = self.validate_parameters()\n",
        "        if not valid:\n",
        "            logger.error(\"バックテスト実行前のパラメータ検証に失敗しました:\")\n",
        "            for error in errors:\n",
        "                logger.error(f\"- {error}\")\n",
        "            return None\n",
        "        if warnings_list:\n",
        "            logger.warning(\"検証で警告が発生しました:\")\n",
        "            for warning in warnings_list:\n",
        "                logger.warning(f\"- {warning}\")\n",
        "        _, last_day = calendar.monthrange(self.end_year, self.end_month)\n",
        "        start_date = f\"{self.start_year}-{self.start_month:02d}-01\"\n",
        "        end_date = f\"{self.end_year}-{self.end_month:02d}-{last_day}\"\n",
        "        logger.info(f\"バックテスト実行: {start_date} から {end_date}\")\n",
        "        return self._run_backtest_next_close(start_date, end_date)\n",
        "\n",
        "        if self.stop_loss_enabled and hasattr(self, 'stop_loss_history') and self.stop_loss_history:\n",
        "            triggered_count = len(self.stop_loss_history)\n",
        "            assets_triggered = set([h[\"original_asset\"] for h in self.stop_loss_history])\n",
        "            logger.info(f\"\\n=== ストップロス情報 ===\")\n",
        "            logger.info(f\"ストップロス発動回数: {triggered_count}\")\n",
        "            logger.info(f\"影響を受けた資産: {', '.join(assets_triggered)}\")\n",
        "            logger.info(f\"ストップロス閾値: {self.stop_loss_threshold*100:.1f}%\")\n",
        "\n",
        "        return result\n",
        "\n",
        "    def _run_backtest_next_close(self, start_date, end_date):\n",
        "        \"\"\"正確な日付でのバックテスト実行（修正版）\"\"\"\n",
        "        start_date = pd.to_datetime(start_date)\n",
        "        end_date = pd.to_datetime(end_date)\n",
        "\n",
        "        # ポジション情報を初期化\n",
        "        self.positions = []\n",
        "        # 以下の4行を追加（ストップロス関連の初期化）\n",
        "        self.stop_loss_history = []  # ストップロス履歴を初期化\n",
        "        self.reference_prices = {}   # 基準価格を初期化\n",
        "        self.cash_positions = {}     # キャッシュポジションを初期化\n",
        "        self.pending_cash_to_safety = {}  # 保留中の移行処理を初期化\n",
        "\n",
        "        # 前月末日の計算\n",
        "        if start_date.month == 1:\n",
        "            prev_month_year = start_date.year - 1\n",
        "            prev_month = 12\n",
        "        else:\n",
        "            prev_month_year = start_date.year\n",
        "            prev_month = start_date.month - 1\n",
        "\n",
        "        prev_month_end = self.get_last_trading_day_of_month(prev_month_year, prev_month)\n",
        "        has_prev_month_data = (prev_month_end is not None and\n",
        "                            prev_month_end in self.price_data.index)\n",
        "\n",
        "        # ユーザー指定期間の日次データ\n",
        "        daily = self.price_data.loc[start_date:end_date].copy()\n",
        "        if daily.empty:\n",
        "            logger.error(\"指定された期間に日次データがありません。\")\n",
        "            return None\n",
        "\n",
        "        # 初期設定\n",
        "        initial_investment = 100000\n",
        "        portfolio = pd.DataFrame(index=daily.index, columns=[\"Portfolio_Value\", \"Benchmark_Value\"])\n",
        "        portfolio.iloc[0, :] = initial_investment\n",
        "\n",
        "        summary = []\n",
        "        positions = []  # ポジション情報を追跡するリスト\n",
        "\n",
        "        # 初期ポジション情報を保存（終了日は後で設定）\n",
        "        has_initial_position = False\n",
        "        holdings = {}  # 初期ホールディングを空のディクショナリで初期化\n",
        "\n",
        "        if has_prev_month_data:\n",
        "            # 前月末のモメンタム計算を実行して初期ポジションを決定\n",
        "            if self.lookback_unit == \"Days\":\n",
        "                past_data = self.price_data.loc[:prev_month_end].copy()\n",
        "                temp_data = self.price_data\n",
        "                self.price_data = past_data\n",
        "                initial_momentum_results = self.calculate_momentum_ranks(prev_month_end)\n",
        "                self.price_data = temp_data\n",
        "            else:\n",
        "                past_monthly = self.monthly_data.loc[:prev_month_end].copy()\n",
        "                temp_monthly = self.monthly_data\n",
        "                self.monthly_data = past_monthly\n",
        "                initial_momentum_results = self.calculate_momentum_ranks(prev_month_end)\n",
        "                self.monthly_data = temp_monthly\n",
        "\n",
        "            # 初期選択資産を取得\n",
        "            initial_selected_assets = initial_momentum_results[\"selected_assets\"]\n",
        "            # 初期ホールディングを設定\n",
        "            holdings = self._create_holdings_from_assets(initial_selected_assets)\n",
        "\n",
        "            if daily.index[0] != start_date:\n",
        "                first_valid_date = daily.index[0]\n",
        "                logger.warning(f\"指定開始日 {start_date.strftime('%Y-%m-%d')} のデータがありません。最初の有効日 {first_valid_date.strftime('%Y-%m-%d')} を使用します。\")\n",
        "            else:\n",
        "                first_valid_date = start_date\n",
        "\n",
        "            logger.info(f\"初期ポジション: {holdings}（判定基準日: {prev_month_end.strftime('%Y-%m-%d')}）\")\n",
        "        else:\n",
        "            # 前月末データがない場合は開始日を基準に判断（従来ロジック）\n",
        "            logger.warning(f\"前月末データがありません。開始日 {start_date.strftime('%Y-%m-%d')} を基準に初期判断を行います。\")\n",
        "\n",
        "            # 開始日でのモメンタム計算を実行\n",
        "            initial_momentum_results = self.calculate_momentum_ranks(start_date)\n",
        "            initial_selected_assets = initial_momentum_results[\"selected_assets\"]\n",
        "            holdings = self._create_holdings_from_assets(initial_selected_assets)\n",
        "            logger.info(f\"開始日判断による初期ポジション: {holdings}\")\n",
        "\n",
        "        # 全ての月末取引日を計算\n",
        "        rebalance_dates = []\n",
        "        current_date = pd.Timestamp(start_date.year, start_date.month, 1)\n",
        "\n",
        "        while current_date <= end_date:\n",
        "            last_td = self.get_last_trading_day_of_month(current_date.year, current_date.month)\n",
        "            if last_td is not None and last_td >= start_date and last_td <= end_date:\n",
        "                rebalance_dates.append(last_td)\n",
        "            current_date += relativedelta(months=1)\n",
        "\n",
        "        # リバランス頻度に応じたフィルタリング\n",
        "        if self.trading_frequency == \"Bimonthly (hold: 1,3,5,7,9,11)\":\n",
        "            # 奇数月に保有を開始するためには前月末にリバランス\n",
        "            rebalance_months = [12, 2, 4, 6, 8, 10]  # 保有月の前月\n",
        "            rebalance_dates = [d for d in rebalance_dates if d.month in rebalance_months]\n",
        "        elif self.trading_frequency == \"Bimonthly (hold: 2,4,6,8,10,12)\":\n",
        "            # 偶数月に保有を開始するためには前月末にリバランス\n",
        "            rebalance_months = [1, 3, 5, 7, 9, 11]  # 保有月の前月\n",
        "            rebalance_dates = [d for d in rebalance_dates if d.month in rebalance_months]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 1,4,7,10)\":\n",
        "            # 1,4,7,10月から保有するためには前月末にリバランス\n",
        "            rebalance_months = [12, 3, 6, 9]  # 保有月の前月\n",
        "            rebalance_dates = [d for d in rebalance_dates if d.month in rebalance_months]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 2,5,8,11)\":\n",
        "            # 2,5,8,11月から保有するためには前月末にリバランス\n",
        "            rebalance_months = [1, 4, 7, 10]  # 保有月の前月\n",
        "            rebalance_dates = [d for d in rebalance_dates if d.month in rebalance_months]\n",
        "        elif self.trading_frequency == \"Quarterly (hold: 3,6,9,12)\":\n",
        "            # 3,6,9,12月から保有するためには前月末にリバランス\n",
        "            rebalance_months = [2, 5, 8, 11]  # 保有月の前月\n",
        "            rebalance_dates = [d for d in rebalance_dates if d.month in rebalance_months]\n",
        "\n",
        "        # 判断日と実行日のマッピング\n",
        "        decision_dates = rebalance_dates\n",
        "        logger.info(f\"リバランス日数: {len(decision_dates)}\")\n",
        "\n",
        "        execution_map = {}\n",
        "        daily_dates = daily.index\n",
        "        for dec_date in decision_dates:\n",
        "            if self.trade_execution == \"Trade at end of month price\":\n",
        "                execution_map[dec_date] = dec_date\n",
        "            elif self.trade_execution == \"Trade at next open price\" or self.trade_execution == \"Trade at next close price\":\n",
        "                next_dates = daily_dates[daily_dates > dec_date]\n",
        "                execution_map[dec_date] = next_dates[0] if not next_dates.empty else dec_date\n",
        "\n",
        "        # 初期ポジションの終了日を決定\n",
        "        current_position_end_date = None\n",
        "        if decision_dates and execution_map:\n",
        "            first_dec_date = decision_dates[0]\n",
        "            first_execution_date = execution_map[first_dec_date]\n",
        "            current_position_end_date = first_execution_date\n",
        "        else:\n",
        "            current_position_end_date = daily.index[-1]\n",
        "\n",
        "        # 絶対モメンタム情報を取得\n",
        "        initial_abs_return = None\n",
        "        initial_rfr_return = None\n",
        "        if \"abs_momentum_info\" in initial_momentum_results and initial_momentum_results[\"abs_momentum_info\"]:\n",
        "            initial_abs_info = initial_momentum_results[\"abs_momentum_info\"]\n",
        "            initial_abs_return = initial_abs_info.get(\"absolute_return\")\n",
        "            initial_rfr_return = initial_abs_info.get(\"risk_free_rate\")\n",
        "\n",
        "        # 絶対モメンタムが無効でも、リスクフリーレートを計算\n",
        "        if initial_rfr_return is None:\n",
        "            if self.performance_periods == \"Single Period\":\n",
        "                lookback = self.lookback_period\n",
        "                if self.absolute_momentum_custom_period:\n",
        "                    lookback = self.absolute_momentum_period\n",
        "                # 信号日に基づくリスクフリーレート計算\n",
        "                calc_date = prev_month_end if has_prev_month_data else start_date\n",
        "                initial_rfr_return = self._calculate_cumulative_rfr_return(calc_date, lookback)\n",
        "            else:\n",
        "                # 複数期間の場合は重み付きリスクフリーレート\n",
        "                calc_date = prev_month_end if has_prev_month_data else start_date\n",
        "                initial_rfr_return = self._calculate_weighted_rfr_return(calc_date)\n",
        "\n",
        "        # 初期ポジション情報を記録\n",
        "        positions.append({\n",
        "            \"signal_date\": prev_month_end if has_prev_month_data else start_date,\n",
        "            \"start_date\": first_valid_date if 'first_valid_date' in locals() else daily.index[0],\n",
        "            \"end_date\": current_position_end_date,\n",
        "            \"assets\": initial_selected_assets,\n",
        "            \"message\": initial_momentum_results.get(\"message\", \"\"),\n",
        "            \"abs_return\": initial_abs_return,\n",
        "            \"rfr_return\": initial_rfr_return\n",
        "        })\n",
        "\n",
        "        # 以下のコードブロックを追加（初期ポジションの基準価格設定）\n",
        "        # 基準価格の初期設定（初期ポジションに対して）\n",
        "        if has_prev_month_data and self.stop_loss_enabled:\n",
        "            for asset in initial_selected_assets:\n",
        "                if asset != 'Cash' and asset in self.price_data.columns:\n",
        "                    # 開始日の価格を基準価格として設定\n",
        "                    self.reference_prices[asset] = daily.loc[first_valid_date, asset]\n",
        "                    logger.debug(f\"基準価格設定 (初期): {asset} = {self.reference_prices[asset]:.2f}\")\n",
        "\n",
        "        # 最後のリバランス日を初期化（開始日として使用）\n",
        "        last_rebalance_date = daily.index[0]\n",
        "        prev_date = daily.index[0]\n",
        "        cache_hits = 0\n",
        "        cache_misses = 0\n",
        "\n",
        "        # 各日の価値を計算\n",
        "        for current_date in daily.index[1:]:\n",
        "            # ベンチマークリターン計算\n",
        "            if self.benchmark_ticker in daily.columns:\n",
        "                try:\n",
        "                    # NaN値チェック\n",
        "                    if pd.isna(daily[self.benchmark_ticker].loc[current_date]) or pd.isna(daily[self.benchmark_ticker].loc[prev_date]):\n",
        "                        # 価格データがない場合は変化なし\n",
        "                        portfolio.loc[current_date, \"Benchmark_Value\"] = portfolio.loc[prev_date, \"Benchmark_Value\"]\n",
        "                        logger.debug(f\"日付 {current_date.strftime('%Y-%m-%d')} のベンチマークデータが不完全です\")\n",
        "                    elif daily[self.benchmark_ticker].loc[prev_date] <= 0:\n",
        "                        # ゼロ以下の価格は異常値\n",
        "                        portfolio.loc[current_date, \"Benchmark_Value\"] = portfolio.loc[prev_date, \"Benchmark_Value\"]\n",
        "                        logger.warning(f\"ベンチマーク {self.benchmark_ticker} の価格が異常です: {daily[self.benchmark_ticker].loc[prev_date]}\")\n",
        "                    else:\n",
        "                        bench_ret = (daily[self.benchmark_ticker].loc[current_date] / daily[self.benchmark_ticker].loc[prev_date]) - 1\n",
        "                        portfolio.loc[current_date, \"Benchmark_Value\"] = portfolio.loc[prev_date, \"Benchmark_Value\"] * (1 + bench_ret)\n",
        "                except Exception as e:\n",
        "                    # エラー時は変化なし\n",
        "                    portfolio.loc[current_date, \"Benchmark_Value\"] = portfolio.loc[prev_date, \"Benchmark_Value\"]\n",
        "                    logger.error(f\"ベンチマーク計算エラー ({current_date.strftime('%Y-%m-%d')}): {e}\")\n",
        "            else:\n",
        "                portfolio.loc[current_date, \"Benchmark_Value\"] = portfolio.loc[prev_date, \"Benchmark_Value\"]\n",
        "\n",
        "            # ポートフォリオリターン計算\n",
        "            if holdings:\n",
        "                # 以下のコードブロックを追加（ストップロス処理：退避先資産への移行）\n",
        "                # 退避先資産への移行処理を実行（前日のストップロス発動を処理）\n",
        "                if self.stop_loss_enabled:\n",
        "                    holdings = self._process_pending_cash_to_safety(current_date, holdings, daily)\n",
        "\n",
        "                daily_ret = 0\n",
        "                valid_calculations = 0\n",
        "\n",
        "                for asset, weight in holdings.items():\n",
        "                    # 元の資産名を取得（Open_プレフィックスを処理するため）\n",
        "                    original_asset = asset\n",
        "\n",
        "                    # リバランス実行日かどうかをチェック\n",
        "                    is_rebalance_day = False\n",
        "                    for dec_date, exec_date in execution_map.items():\n",
        "                        if current_date == exec_date:\n",
        "                            is_rebalance_day = True\n",
        "                            break\n",
        "\n",
        "                    # Trade at next open priceの場合はOpen価格を使用\n",
        "                    if is_rebalance_day and self.trade_execution == \"Trade at next open price\":\n",
        "                        open_asset = f\"Open_{original_asset}\"\n",
        "\n",
        "                        # Open価格データが存在するか確認\n",
        "                        if open_asset in daily.columns:\n",
        "                            asset_column = open_asset\n",
        "                        else:\n",
        "                            # Open価格がない場合は通常のClose価格を使用\n",
        "                            asset_column = original_asset\n",
        "                            logger.warning(f\"資産 {original_asset} のOpen価格データがないため、Close価格を使用します\")\n",
        "                    else:\n",
        "                        # 通常はClose価格を使用\n",
        "                        asset_column = original_asset\n",
        "\n",
        "                    # 元の資産名でデータチェック\n",
        "                    if original_asset in daily.columns:\n",
        "                        try:\n",
        "                            # 使用する価格カラムがデータフレームに存在するか確認\n",
        "                            if asset_column not in daily.columns:\n",
        "                                asset_column = original_asset  # フォールバック\n",
        "\n",
        "                            # NaN値チェック\n",
        "                            if pd.isna(daily[asset_column].loc[current_date]) or pd.isna(daily[original_asset].loc[prev_date]):\n",
        "                                # 欠損データがある場合はリスクフリーレート相当のリターンとする\n",
        "                                asset_ret = 0.001 / 252  # 日次リスクフリーレート相当\n",
        "                                logger.debug(f\"資産 {original_asset} の日付 {current_date.strftime('%Y-%m-%d')} のデータが不完全です\")\n",
        "                            elif daily[original_asset].loc[prev_date] <= 0:\n",
        "                                # ゼロ以下の価格は異常値\n",
        "                                asset_ret = 0\n",
        "                                logger.warning(f\"資産 {original_asset} の価格が異常です: {daily[original_asset].loc[prev_date]}\")\n",
        "                            else:\n",
        "                                # 今日の価格は選択されたタイプ（OpenまたはClose）\n",
        "                                # 前日の価格は常にClose\n",
        "                                asset_ret = (daily[asset_column].loc[current_date] / daily[original_asset].loc[prev_date]) - 1\n",
        "                                valid_calculations += 1\n",
        "                                if is_rebalance_day and self.trade_execution == \"Trade at next open price\":\n",
        "                                    logger.debug(f\"リバランス日 {current_date.strftime('%Y-%m-%d')} の資産 {original_asset} は始値 {daily[asset_column].loc[current_date]} で取引\")\n",
        "\n",
        "                            daily_ret += weight * asset_ret\n",
        "                        except Exception as e:\n",
        "                            # エラー時は日次リスクフリーレート相当\n",
        "                            logger.error(f\"資産 {original_asset} のリターン計算エラー ({current_date.strftime('%Y-%m-%d')}): {e}\")\n",
        "                            daily_ret += weight * (0.001 / 252)\n",
        "                    else:\n",
        "                        # データがない資産は現金と同等と見なす\n",
        "                        daily_ret += weight * (0.001 / 252)\n",
        "\n",
        "                # データ品質ログ\n",
        "                if valid_calculations == 0 and len(holdings) > 0:\n",
        "                    logger.warning(f\"日付 {current_date.strftime('%Y-%m-%d')} - 全ての保有資産でデータ不完全\")\n",
        "\n",
        "                # 以下のコードブロックを追加（ストップロス処理：条件判定）\n",
        "                # ストップロス判定と処理\n",
        "                if self.stop_loss_enabled:\n",
        "                    updated_holdings, triggered_stops = self._check_stop_loss(current_date, holdings, daily)\n",
        "\n",
        "                    # ストップロス発動があった場合は履歴に記録\n",
        "                    if triggered_stops:\n",
        "                        for triggered in triggered_stops:\n",
        "                            self.stop_loss_history.append({\n",
        "                                \"original_asset\": triggered[\"asset\"],\n",
        "                                \"weight\": triggered[\"weight\"],\n",
        "                                \"reference_price\": triggered[\"reference_price\"],\n",
        "                                \"stop_loss_price\": triggered[\"stop_loss_price\"],\n",
        "                                \"trigger_price\": triggered[\"trigger_price\"],\n",
        "                                \"stop_loss_date\": triggered[\"date\"],\n",
        "                                \"moved_to_safety_date\": None  # 退避先移行時に更新\n",
        "                            })\n",
        "\n",
        "                        # リターン計算用の保有資産を更新\n",
        "                        holdings = updated_holdings\n",
        "            else:\n",
        "                daily_ret = 0\n",
        "\n",
        "            # 最終的にポートフォリオ価値を更新\n",
        "            portfolio.loc[current_date, \"Portfolio_Value\"] = portfolio.loc[prev_date, \"Portfolio_Value\"] * (1 + daily_ret)\n",
        "\n",
        "            # リバランス処理\n",
        "            for dec_date, exec_date in execution_map.items():\n",
        "                if current_date == exec_date:\n",
        "                    # この部分を修正:\n",
        "                    if self.lookback_unit == \"Days\":\n",
        "                        past_data = self.price_data.loc[:dec_date].copy()\n",
        "                        temp_data = self.price_data\n",
        "                        self.price_data = past_data\n",
        "                        cache_key = self._generate_cache_key(dec_date)\n",
        "                        momentum_results = self._get_from_cache(cache_key)\n",
        "                        if momentum_results is not None:\n",
        "                            cache_hits += 1\n",
        "                            logger.debug(f\"キャッシュヒット: {cache_key}\")\n",
        "                        else:\n",
        "                            cache_misses += 1\n",
        "                            # dec_dateを引数として渡す\n",
        "                            momentum_results = self.calculate_momentum_ranks(dec_date)\n",
        "                            logger.debug(f\"キャッシュミス: {cache_key} - 新規計算実行\")\n",
        "                        self.price_data = temp_data\n",
        "                    else:\n",
        "                        past_monthly = self.monthly_data.loc[:dec_date].copy()\n",
        "                        temp_monthly = self.monthly_data\n",
        "                        self.monthly_data = past_monthly\n",
        "                        cache_key = self._generate_cache_key(dec_date)\n",
        "                        momentum_results = self._get_from_cache(cache_key)\n",
        "                        if momentum_results is not None:\n",
        "                            cache_hits += 1\n",
        "                            logger.debug(f\"キャッシュヒット: {cache_key}\")\n",
        "                        else:\n",
        "                            cache_misses += 1\n",
        "                            # dec_dateを引数として渡す\n",
        "                            momentum_results = self.calculate_momentum_ranks(dec_date)\n",
        "                            logger.debug(f\"キャッシュミス: {cache_key} - 新規計算実行\")\n",
        "                        self.monthly_data = temp_monthly\n",
        "\n",
        "                    selected_assets = momentum_results[\"selected_assets\"]\n",
        "\n",
        "                    # ポジション変更前のポートフォリオ価値を記録\n",
        "                    start_val = portfolio.loc[last_rebalance_date, \"Portfolio_Value\"]\n",
        "                    end_val = portfolio.loc[current_date, \"Portfolio_Value\"]\n",
        "                    ret = (end_val / start_val) - 1\n",
        "\n",
        "                    # 次のリバランス実行日を見つける（保有終了日として設定）\n",
        "                    end_date_for_period = daily.index[-1]  # デフォルトは取引最終日\n",
        "\n",
        "                    # 現在の判断日（dec_date）が何番目かを特定\n",
        "                    if dec_date in decision_dates:\n",
        "                        current_idx = decision_dates.index(dec_date)\n",
        "                        # 次の判断日とその実行日が存在するか確認\n",
        "                        if current_idx + 1 < len(decision_dates):\n",
        "                            next_dec_date = decision_dates[current_idx + 1]\n",
        "                            if next_dec_date in execution_map:\n",
        "                                end_date_for_period = execution_map[next_dec_date]\n",
        "\n",
        "                    # 絶対モメンタム情報を取得\n",
        "                    abs_return = None\n",
        "                    rfr_return = None\n",
        "                    if \"abs_momentum_info\" in momentum_results and momentum_results[\"abs_momentum_info\"]:\n",
        "                        abs_info = momentum_results[\"abs_momentum_info\"]\n",
        "                        abs_return = abs_info.get(\"absolute_return\")\n",
        "                        rfr_return = abs_info.get(\"risk_free_rate\")\n",
        "\n",
        "                    # 絶対モメンタムが無効でも、リスクフリーレートを計算\n",
        "                    if rfr_return is None:\n",
        "                        if self.performance_periods == \"Single Period\":\n",
        "                            lookback = self.lookback_period\n",
        "                            if self.absolute_momentum_custom_period:\n",
        "                                lookback = self.absolute_momentum_period\n",
        "                            # dec_date（シグナル判定日）に基づく計算\n",
        "                            rfr_return = self._calculate_cumulative_rfr_return(dec_date, lookback)\n",
        "                        else:\n",
        "                            # 複数期間の場合は重み付きリスクフリーレート\n",
        "                            rfr_return = self._calculate_weighted_rfr_return(dec_date)\n",
        "\n",
        "                    # 新しいポジション情報を記録\n",
        "                    positions.append({\n",
        "                        \"signal_date\": dec_date,\n",
        "                        \"start_date\": current_date,\n",
        "                        \"end_date\": end_date_for_period,\n",
        "                        \"assets\": selected_assets,\n",
        "                        \"message\": momentum_results.get(\"message\", \"\"),\n",
        "                        \"abs_return\": abs_return,\n",
        "                        \"rfr_return\": rfr_return\n",
        "                    })\n",
        "\n",
        "                    # 新しいポジションを設定\n",
        "                    new_holdings = self._create_holdings_from_assets(selected_assets)\n",
        "                    holdings = new_holdings\n",
        "\n",
        "                    # 以下のコードブロックを追加（ストップロス処理：基準価格更新）\n",
        "                    # 基準価格を更新（リバランス時）\n",
        "                    if self.stop_loss_enabled:\n",
        "                        for asset in holdings:\n",
        "                            if asset != 'Cash' and asset in daily.columns:\n",
        "                                self.reference_prices[asset] = daily.loc[current_date, asset]\n",
        "                                logger.debug(f\"基準価格更新 (リバランス): {asset} = {self.reference_prices[asset]:.2f}\")\n",
        "\n",
        "                    logger.info(f\"{current_date.strftime('%Y-%m-%d')}: リバランス実行 - {holdings}（{self.trade_execution}）\")\n",
        "\n",
        "                    # 次のリバランスのための基準日を更新\n",
        "                    last_rebalance_date = current_date\n",
        "\n",
        "            # 最終日チェックと処理\n",
        "            if current_date == daily.index[-1]:\n",
        "                # 最終日時点でのモメンタム計算\n",
        "                final_momentum_results = self.calculate_momentum_ranks(current_date)\n",
        "                selected_assets = final_momentum_results.get(\"selected_assets\", [])\n",
        "                message = final_momentum_results.get(\"message\", \"\")\n",
        "\n",
        "                # 絶対モメンタム情報の取得\n",
        "                abs_info = final_momentum_results.get(\"abs_momentum_info\", {})\n",
        "                abs_return = abs_info.get(\"absolute_return\")\n",
        "                rfr_return = abs_info.get(\"risk_free_rate\")\n",
        "\n",
        "                # 同じポジションが既に記録されていないか確認\n",
        "                is_duplicate = False\n",
        "                if positions and positions[-1].get(\"signal_date\") == current_date:\n",
        "                    is_duplicate = True\n",
        "\n",
        "                # 重複していない場合のみ最終日のポジション情報を記録\n",
        "                if not is_duplicate:\n",
        "                    positions.append({\n",
        "                        \"signal_date\": current_date,\n",
        "                        \"start_date\": current_date,\n",
        "                        \"end_date\": current_date,\n",
        "                        \"assets\": selected_assets,\n",
        "                        \"return\": 0.0,  # 同日なのでリターンは0\n",
        "                        \"message\": message,\n",
        "                        \"abs_return\": abs_return,\n",
        "                        \"rfr_return\": rfr_return\n",
        "                    })\n",
        "                    logger.info(f\"{current_date.strftime('%Y-%m-%d')}: 最終日ポジション記録 - {selected_assets}\")\n",
        "\n",
        "            # 次のループのために現在の日付を保存\n",
        "            prev_date = current_date\n",
        "\n",
        "        # キャッシュ統計の出力\n",
        "        logger.info(f\"キャッシュ統計: ヒット {cache_hits}回, ミス {cache_misses}回\")\n",
        "        if cache_hits + cache_misses > 0:\n",
        "            hit_rate = cache_hits / (cache_hits + cache_misses) * 100\n",
        "            logger.info(f\"キャッシュヒット率: {hit_rate:.2f}%\")\n",
        "\n",
        "        # 1) まず 日次リターンを計算しておく\n",
        "        portfolio[\"Portfolio_Return\"] = portfolio[\"Portfolio_Value\"].pct_change()\n",
        "        portfolio[\"Benchmark_Return\"] = portfolio[\"Benchmark_Value\"].pct_change()\n",
        "\n",
        "        # 2) self.results_daily にコピー\n",
        "        self.results_daily = portfolio.copy()\n",
        "\n",
        "        # 月次結果を計算\n",
        "        monthly_result = portfolio.resample('ME').last()\n",
        "        self._calculate_portfolio_metrics(monthly_result)\n",
        "\n",
        "        # 全てのポジションの保有期間リターンを計算\n",
        "        for i, position in enumerate(positions):\n",
        "            start_date = position[\"start_date\"]\n",
        "            end_date = position[\"end_date\"]\n",
        "\n",
        "            if start_date in portfolio.index and end_date in portfolio.index:\n",
        "                start_value = portfolio.loc[start_date, \"Portfolio_Value\"]\n",
        "                end_value = portfolio.loc[end_date, \"Portfolio_Value\"]\n",
        "                ret = (end_value / start_value) - 1\n",
        "                ret_str = f\"{ret:.2%}\"\n",
        "\n",
        "                # ポジションオブジェクトにリターン情報を追加保存\n",
        "                position[\"return\"] = ret\n",
        "                position[\"portfolio_start\"] = start_value\n",
        "                position[\"portfolio_end\"] = end_value\n",
        "\n",
        "                # ベンチマークのリターンを計算\n",
        "                bench_start = portfolio.loc[start_date, \"Benchmark_Value\"]\n",
        "                bench_end = portfolio.loc[end_date, \"Benchmark_Value\"]\n",
        "                bench_ret = (bench_end / bench_start) - 1\n",
        "\n",
        "                # ポジションオブジェクトにベンチマーク情報を追加保存\n",
        "                position[\"benchmark_return\"] = bench_ret\n",
        "                position[\"benchmark_start\"] = bench_start\n",
        "                position[\"benchmark_end\"] = bench_end\n",
        "\n",
        "                # 超過リターン（差分）を計算\n",
        "                position[\"excess_return\"] = ret - bench_ret\n",
        "\n",
        "            else:\n",
        "                ret_str = \"N/A\"\n",
        "                position[\"return\"] = None\n",
        "                position[\"portfolio_start\"] = None\n",
        "                position[\"portfolio_end\"] = None\n",
        "\n",
        "            # サマリーテーブル用にデータを整形\n",
        "            summary.append({\n",
        "                \"シグナル判定日\": position[\"signal_date\"].date(),\n",
        "                \"保有開始日\": start_date.date(),\n",
        "                \"保有終了日\": end_date.date(),\n",
        "                \"保有資産\": ', '.join(position[\"assets\"]),\n",
        "                \"保有期間リターン\": ret_str,\n",
        "                \"モメンタム判定結果\": position[\"message\"],\n",
        "                \"絶対モメンタムリターン\": f\"{position.get('abs_return')*100:.2f}%\" if position.get('abs_return') is not None else \"N/A\",\n",
        "                \"リスクフリーレート\": f\"{position.get('rfr_return')*100:.2f}%\" if position.get('rfr_return') is not None else \"N/A\"\n",
        "            })\n",
        "\n",
        "        # 終了処理の前にストップロス履歴情報をポジションに反映\n",
        "        if self.stop_loss_enabled and hasattr(self, 'stop_loss_history') and self.stop_loss_history:\n",
        "            logger.info(f\"ストップロス履歴情報をポジションに反映します（{len(self.stop_loss_history)}件）\")\n",
        "\n",
        "            # 各ポジションについて対応するストップロス履歴を検索\n",
        "            for position in positions:\n",
        "                # ポジションの期間を取得\n",
        "                position_start = position.get(\"start_date\")\n",
        "                position_end = position.get(\"end_date\")\n",
        "\n",
        "                if position_start is None or position_end is None:\n",
        "                    continue  # 日付情報がない場合はスキップ\n",
        "\n",
        "                # 対応するストップロス履歴を検索\n",
        "                matching_history = []\n",
        "                for history in self.stop_loss_history:\n",
        "                    # ストップロス発動日\n",
        "                    stop_date = history.get(\"stop_loss_date\")\n",
        "                    if stop_date is None:\n",
        "                        continue  # 日付情報がない場合はスキップ\n",
        "\n",
        "                    # ポジションの期間内にストップロス発動があったかチェック\n",
        "                    if (position_start <= stop_date and position_end >= stop_date):\n",
        "                        # 履歴をコピーして追加（必要に応じて）\n",
        "                        history_copy = history.copy()\n",
        "                        matching_history.append(history_copy)\n",
        "\n",
        "                # 一致するストップロス履歴が見つかった場合、ポジションに情報を追加\n",
        "                if matching_history:\n",
        "                    position[\"stop_loss_triggered\"] = True\n",
        "                    position[\"stop_loss_details\"] = matching_history\n",
        "\n",
        "                    # デバッグログ\n",
        "                    assets_affected = [h.get(\"original_asset\", \"不明\") for h in matching_history]\n",
        "                    dates_affected = [h.get(\"stop_loss_date\").strftime('%Y-%m-%d') if h.get(\"stop_loss_date\") else \"不明\" for h in matching_history]\n",
        "                    logger.info(f\"ポジション（{position_start.strftime('%Y-%m-%d')}～{position_end.strftime('%Y-%m-%d')}）にストップロス情報を追加: {', '.join(assets_affected)}, 日付: {', '.join(dates_affected)}\")\n",
        "                else:\n",
        "                    # ストップロス発動なしを明示的に設定\n",
        "                    position[\"stop_loss_triggered\"] = False\n",
        "\n",
        "        # メモリ解放\n",
        "        try:\n",
        "            del daily\n",
        "        except NameError:\n",
        "            pass\n",
        "        gc.collect()\n",
        "\n",
        "        # ポジション情報をクラス変数として保存\n",
        "        self.positions = positions\n",
        "\n",
        "        return monthly_result\n",
        "\n",
        "\n",
        "    def _calculate_portfolio_metrics(self, portfolio):\n",
        "        portfolio = portfolio.sort_index().ffill()\n",
        "        portfolio[\"Portfolio_Return\"] = portfolio[\"Portfolio_Value\"].pct_change().astype(float)\n",
        "        portfolio[\"Benchmark_Return\"] = portfolio[\"Benchmark_Value\"].pct_change().astype(float)\n",
        "        portfolio = portfolio.infer_objects(copy=False)\n",
        "        portfolio[\"Portfolio_Cumulative\"] = (1 + portfolio[\"Portfolio_Return\"]).cumprod()\n",
        "        portfolio[\"Benchmark_Cumulative\"] = (1 + portfolio[\"Benchmark_Return\"]).cumprod()\n",
        "        portfolio[\"Portfolio_Peak\"] = portfolio[\"Portfolio_Value\"].cummax()\n",
        "        portfolio[\"Portfolio_Drawdown\"] = (portfolio[\"Portfolio_Value\"] / portfolio[\"Portfolio_Peak\"]) - 1\n",
        "        portfolio[\"Benchmark_Peak\"] = portfolio[\"Benchmark_Value\"].cummax()\n",
        "        portfolio[\"Benchmark_Drawdown\"] = (portfolio[\"Benchmark_Value\"] / portfolio[\"Benchmark_Peak\"]) - 1\n",
        "        self.results = portfolio\n",
        "\n",
        "    def calculate_performance_metrics(self):\n",
        "        if self.results is None:\n",
        "            logger.error(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return None\n",
        "        years = (self.results.index[-1] - self.results.index[0]).days / 365.25\n",
        "        if \"Portfolio_Cumulative\" in self.results.columns:\n",
        "            cumulative_return_portfolio = self.results[\"Portfolio_Cumulative\"].iloc[-1] - 1\n",
        "        else:\n",
        "            cumulative_return_portfolio = self.results[\"Portfolio_Value\"].iloc[-1] / self.results[\"Portfolio_Value\"].iloc[0] - 1\n",
        "        if \"Benchmark_Cumulative\" in self.results.columns:\n",
        "            cumulative_return_benchmark = self.results[\"Benchmark_Cumulative\"].iloc[-1] - 1\n",
        "        else:\n",
        "            cumulative_return_benchmark = self.results[\"Benchmark_Value\"].iloc[-1] / self.results[\"Benchmark_Value\"].iloc[0] - 1\n",
        "\n",
        "        # 初期値を$100,000として計算する\n",
        "        initial_investment = 100000.0\n",
        "        portfolio_total_return = self.results[\"Portfolio_Value\"].iloc[-1] / initial_investment - 1\n",
        "        benchmark_total_return = self.results[\"Benchmark_Value\"].iloc[-1] / initial_investment - 1\n",
        "\n",
        "        portfolio_cagr = (1 + portfolio_total_return) ** (1 / years) - 1\n",
        "        benchmark_cagr = (1 + benchmark_total_return) ** (1 / years) - 1\n",
        "        portfolio_vol = self.results[\"Portfolio_Return\"].std() * np.sqrt(12)\n",
        "        benchmark_vol = self.results[\"Benchmark_Return\"].std() * np.sqrt(12)\n",
        "        portfolio_max_dd = self.results[\"Portfolio_Drawdown\"].min()\n",
        "        benchmark_max_dd = self.results[\"Benchmark_Drawdown\"].min()\n",
        "        portfolio_sharpe = portfolio_cagr / portfolio_vol if portfolio_vol != 0 else np.nan\n",
        "        benchmark_sharpe = benchmark_cagr / benchmark_vol if benchmark_vol != 0 else np.nan\n",
        "        monthly_returns_portfolio = self.results[\"Portfolio_Return\"].dropna()\n",
        "        downside_returns_portfolio = monthly_returns_portfolio[monthly_returns_portfolio < 0]\n",
        "        downside_std_portfolio = downside_returns_portfolio.std() * np.sqrt(12) if len(downside_returns_portfolio) > 0 else np.nan\n",
        "        portfolio_sortino = portfolio_cagr / downside_std_portfolio if (downside_std_portfolio is not None and downside_std_portfolio != 0) else np.nan\n",
        "        monthly_returns_benchmark = self.results[\"Benchmark_Return\"].dropna()\n",
        "        downside_returns_benchmark = monthly_returns_benchmark[monthly_returns_benchmark < 0]\n",
        "        downside_std_benchmark = downside_returns_benchmark.std() * np.sqrt(12) if len(downside_returns_benchmark) > 0 else np.nan\n",
        "        benchmark_sortino = benchmark_cagr / downside_std_benchmark if (downside_std_benchmark is not None and downside_std_benchmark != 0) else np.nan\n",
        "        portfolio_mar = portfolio_cagr / abs(portfolio_max_dd) if (portfolio_max_dd is not None and portfolio_max_dd != 0) else np.nan\n",
        "        benchmark_mar = benchmark_cagr / abs(benchmark_max_dd) if (benchmark_max_dd is not None and benchmark_max_dd != 0) else np.nan\n",
        "        self.metrics = {\n",
        "            \"Cumulative Return\": {\"Portfolio\": cumulative_return_portfolio, \"Benchmark\": cumulative_return_benchmark},\n",
        "            \"CAGR\": {\"Portfolio\": portfolio_cagr, \"Benchmark\": benchmark_cagr},\n",
        "            \"Volatility\": {\"Portfolio\": portfolio_vol, \"Benchmark\": benchmark_vol},\n",
        "            \"Max Drawdown\": {\"Portfolio\": portfolio_max_dd, \"Benchmark\": benchmark_max_dd},\n",
        "            \"Sharpe Ratio\": {\"Portfolio\": portfolio_sharpe, \"Benchmark\": benchmark_sharpe},\n",
        "            \"Sortino Ratio\": {\"Portfolio\": portfolio_sortino, \"Benchmark\": benchmark_sortino},\n",
        "            \"MAR Ratio\": {\"Portfolio\": portfolio_mar, \"Benchmark\": benchmark_mar}\n",
        "        }\n",
        "        return self.metrics\n",
        "\n",
        "    def plot_performance(self, display_plot=True):\n",
        "        \"\"\"\n",
        "        パフォーマンスグラフを表示\n",
        "\n",
        "        Args:\n",
        "            display_plot (bool): グラフを表示するかどうか。False の場合、グラフは生成されません。\n",
        "                            デフォルトは True。\n",
        "\n",
        "        Returns:\n",
        "            None\n",
        "        \"\"\"\n",
        "        # 結果がない場合は早期リターン\n",
        "        if self.results is None:\n",
        "            if display_plot:  # 表示モードの場合のみエラーメッセージを表示\n",
        "                logger.error(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return\n",
        "\n",
        "        # 表示フラグがFalseなら何もせずに終了\n",
        "        if not display_plot:\n",
        "            return\n",
        "\n",
        "        if not hasattr(self, 'metrics') or self.metrics is None:\n",
        "            self.calculate_performance_metrics()\n",
        "        period_str = f\"{self.start_year}/{self.start_month:02d} - {self.end_year}/{self.end_month:02d}\"\n",
        "        fig_norm, ax_norm = plt.subplots(figsize=(9, 6))\n",
        "        ax_norm.plot(self.results.index, self.results[\"Portfolio_Value\"], label=\"Dual Momentum Portfolio\", color='navy')\n",
        "        ax_norm.plot(self.results.index, self.results[\"Benchmark_Value\"], label=f\"Benchmark ({self.benchmark_ticker})\", color='darkorange')\n",
        "        ax_norm.set_title(f\"Portfolio Performance (Normal Scale) | Test Period: {period_str}\", fontsize=14)\n",
        "        ax_norm.set_ylabel(\"Value ($)\")\n",
        "        ax_norm.legend()\n",
        "        ax_norm.grid(True, linestyle='-', linewidth=1, color='gray')\n",
        "        ax_norm.xaxis.set_major_locator(mdates.YearLocator())\n",
        "        ax_norm.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "        fig_log, ax_log = plt.subplots(figsize=(9, 6))\n",
        "        ax_log.plot(self.results.index, self.results[\"Portfolio_Value\"], label=\"Dual Momentum Portfolio\", color='navy')\n",
        "        ax_log.plot(self.results.index, self.results[\"Benchmark_Value\"], label=f\"Benchmark ({self.benchmark_ticker})\", color='darkorange')\n",
        "        ax_log.set_yscale(\"log\")\n",
        "        ax_log.set_title(f\"Portfolio Performance (Log Scale) | Test Period: {period_str}\", fontsize=14)\n",
        "        ax_log.set_ylabel(\"Value ($)\")\n",
        "        ax_log.legend()\n",
        "        major_locator = mticker.LogLocator(base=10.0, subs=(1.0,), numticks=10)\n",
        "        ax_log.yaxis.set_major_locator(major_locator)\n",
        "        ax_log.yaxis.set_major_formatter(mticker.FuncFormatter(lambda y, pos: f\"$10^{{{int(np.log10(y))}}}$\" if y > 0 else \"\"))\n",
        "        minor_locator = mticker.LogLocator(base=10.0, subs=np.arange(2, 10), numticks=10)\n",
        "        ax_log.yaxis.set_minor_locator(minor_locator)\n",
        "        ax_log.yaxis.set_minor_formatter(mticker.NullFormatter())\n",
        "        ax_log.grid(True, which='major', linestyle='-', linewidth=1, color='gray')\n",
        "        ax_log.grid(True, which='minor', linestyle='--', linewidth=0.5, color='lightgray')\n",
        "        ax_log.xaxis.set_major_locator(mdates.YearLocator())\n",
        "        ax_log.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "        fig_dd, ax_dd = plt.subplots(figsize=(9, 3))\n",
        "        ax_dd.plot(self.results.index, self.results[\"Portfolio_Drawdown\"], label=\"Portfolio Drawdown\", color='navy')\n",
        "        ax_dd.plot(self.results.index, self.results[\"Benchmark_Drawdown\"], label=\"Benchmark Drawdown\", color='darkorange')\n",
        "        ax_dd.set_title(\"Drawdown\", fontsize=14)\n",
        "        ax_dd.set_ylabel(\"Drawdown (%)\")\n",
        "        min_dd = min(self.results[\"Portfolio_Drawdown\"].min(), self.results[\"Benchmark_Drawdown\"].min())\n",
        "        ax_dd.set_ylim(min_dd * 1.1, 0.05)\n",
        "        ax_dd.legend()\n",
        "        ax_dd.grid(True, linestyle='-', linewidth=1, color='gray')\n",
        "        ax_dd.xaxis.set_major_locator(mdates.YearLocator())\n",
        "        ax_dd.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "    def generate_annual_returns_table(self, display_table=True):\n",
        "        \"\"\"\n",
        "        実際の保有期間リターンに基づいた年次リターンテーブルを生成\n",
        "\n",
        "        Args:\n",
        "            display_table (bool): テーブルをHTML形式で表示するかどうか。\n",
        "                                False の場合、計算は行われますがHTMLテーブルは表示されません。\n",
        "                                データ分析のみ必要な場合に便利です。\n",
        "                                デフォルトは True。\n",
        "\n",
        "        Returns:\n",
        "            pd.DataFrame: 年次リターンのデータフレーム。\n",
        "                        表示フラグに関わらず、データフレームは常に返されます。\n",
        "        \"\"\"\n",
        "        # 結果がない場合の早期リターン\n",
        "        if self.results is None:\n",
        "            if display_table:  # 表示モードの場合のみエラーメッセージを表示\n",
        "                logger.error(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return None\n",
        "\n",
        "        # まず月次リターンテーブルをクリアして強制的に再生成\n",
        "        if hasattr(self, 'pivot_monthly_returns'):\n",
        "            delattr(self, 'pivot_monthly_returns')\n",
        "\n",
        "        # 月次リターンテーブルを生成（表示しない）\n",
        "        self.generate_monthly_returns_table(display_table=False)\n",
        "\n",
        "        # 月次リターンから年次リターンを抽出\n",
        "        portfolio_annual_returns = {}\n",
        "        if hasattr(self, 'pivot_monthly_returns'):\n",
        "            for year in self.pivot_monthly_returns.index:\n",
        "                if pd.notnull(self.pivot_monthly_returns.loc[year, 'Annual']):\n",
        "                    portfolio_annual_returns[year] = self.pivot_monthly_returns.loc[year, 'Annual']\n",
        "\n",
        "        # ベンチマークの年次リターンは既存の計算通り\n",
        "        benchmark_annual_returns = {}\n",
        "        for year in range(self.start_year, self.end_year + 1):\n",
        "            year_data = self.results[self.results.index.year == year]\n",
        "            if not year_data.empty:\n",
        "                b_first_value = year_data[\"Benchmark_Value\"].iloc[0]\n",
        "                b_last_value = year_data[\"Benchmark_Value\"].iloc[-1]\n",
        "                benchmark_annual_returns[year] = (b_last_value / b_first_value) - 1\n",
        "\n",
        "        # 結果をテーブルにまとめる\n",
        "        all_years = sorted(set(list(portfolio_annual_returns.keys()) + list(benchmark_annual_returns.keys())))\n",
        "        annual_data = {\n",
        "            \"Year\": all_years,\n",
        "            \"Dual Momentum Portfolio\": [f\"{portfolio_annual_returns.get(y, 0):.2%}\" for y in all_years],\n",
        "            f\"Benchmark ({self.benchmark_ticker})\": [f\"{benchmark_annual_returns.get(y, 0):.2%}\" for y in all_years]\n",
        "        }\n",
        "\n",
        "        annual_df = pd.DataFrame(annual_data)\n",
        "\n",
        "        if display_table:\n",
        "            display(HTML(\"\"\"\n",
        "            <h2 style=\"color:#3367d6;\">Annual Returns</h2>\n",
        "            \"\"\" + annual_df.to_html(index=False, classes='table table-striped')))\n",
        "\n",
        "        return annual_df\n",
        "\n",
        "    def generate_monthly_returns_table(self, display_table=True):\n",
        "        \"\"\"実際の保有期間リターンに基づいた月次リターンテーブルを生成\n",
        "\n",
        "        Args:\n",
        "            display_table: HTMLテーブルを表示するかどうか (デフォルト: True)\n",
        "        \"\"\"\n",
        "\n",
        "        # 月次リターンデータを初期化（追加）\n",
        "        self.monthly_returns_data = {}\n",
        "        self.pivot_monthly_returns = None\n",
        "\n",
        "        if self.results is None:\n",
        "            if display_table:\n",
        "                logger.error(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return\n",
        "\n",
        "        # positionsが存在しない場合のチェック\n",
        "        if not hasattr(self, 'positions') or not self.positions:\n",
        "            if display_table:\n",
        "                logger.warning(\"保有期間データがありません。従来の月次リターン計算を使用します。\")\n",
        "\n",
        "            # 従来のコードを実行（省略）- 元のコードを残す場合はここに記述\n",
        "            monthly_returns = self.results[\"Portfolio_Return\"].copy()\n",
        "            # 以下省略...\n",
        "\n",
        "            return None\n",
        "\n",
        "        # 保有期間からの月次リターン計算\n",
        "        monthly_returns = {}\n",
        "\n",
        "        # 各月の日数を取得するヘルパー関数\n",
        "        def get_month_days(year, month):\n",
        "            return calendar.monthrange(year, month)[1]\n",
        "\n",
        "        # 各ポジションのリターンを日割りで各月に配分\n",
        "        for position in self.positions:\n",
        "            if position.get(\"return\") is None:\n",
        "                continue\n",
        "\n",
        "            start_date = position[\"start_date\"]\n",
        "            end_date = position[\"end_date\"]\n",
        "            position_return = position[\"return\"]\n",
        "\n",
        "            # 全期間の日数\n",
        "            total_days = (end_date - start_date).days + 1\n",
        "            if total_days <= 0:\n",
        "                logger.warning(f\"無効な保有期間: {start_date} - {end_date}\")\n",
        "                continue\n",
        "\n",
        "            # 開始月と終了月\n",
        "            start_year, start_month = start_date.year, start_date.month\n",
        "            end_year, end_month = end_date.year, end_date.month\n",
        "\n",
        "            # 同じ月内の場合\n",
        "            if start_year == end_year and start_month == end_month:\n",
        "                month_key = (start_year, start_month)\n",
        "                if month_key not in monthly_returns:\n",
        "                    monthly_returns[month_key] = []\n",
        "                monthly_returns[month_key].append(position_return)\n",
        "                continue\n",
        "\n",
        "            # 複数月にまたがる場合\n",
        "            current_year, current_month = start_year, start_month\n",
        "            while (current_year < end_year) or (current_year == end_year and current_month <= end_month):\n",
        "                month_key = (current_year, current_month)\n",
        "                if month_key not in monthly_returns:\n",
        "                    monthly_returns[month_key] = []\n",
        "\n",
        "                # 当月の日数計算\n",
        "                if current_year == start_year and current_month == start_month:\n",
        "                    # 開始月\n",
        "                    month_days = get_month_days(current_year, current_month)\n",
        "                    days_in_month = month_days - start_date.day + 1\n",
        "                    month_weight = days_in_month / total_days\n",
        "                    monthly_returns[month_key].append(position_return * month_weight)\n",
        "                elif current_year == end_year and current_month == end_month:\n",
        "                    # 終了月\n",
        "                    days_in_month = end_date.day\n",
        "                    month_weight = days_in_month / total_days\n",
        "                    monthly_returns[month_key].append(position_return * month_weight)\n",
        "                else:\n",
        "                    # 間の月\n",
        "                    month_days = get_month_days(current_year, current_month)\n",
        "                    month_weight = month_days / total_days\n",
        "                    monthly_returns[month_key].append(position_return * month_weight)\n",
        "\n",
        "                # 次の月へ\n",
        "                if current_month == 12:\n",
        "                    current_year += 1\n",
        "                    current_month = 1\n",
        "                else:\n",
        "                    current_month += 1\n",
        "\n",
        "        # 月次リターンの集計\n",
        "        month_names = {\n",
        "            1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',\n",
        "            7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'\n",
        "        }\n",
        "\n",
        "        # データ範囲内の全ての年月を抽出\n",
        "        all_years = sorted(set(year for year, _ in monthly_returns.keys()))\n",
        "        all_months = list(range(1, 13))\n",
        "\n",
        "        # 空のデータフレームを作成\n",
        "        pivot_table = pd.DataFrame(index=all_years, columns=[month_names[m] for m in all_months] + ['Annual'])\n",
        "\n",
        "        # 各月のリターンを計算\n",
        "        for (year, month), returns in monthly_returns.items():\n",
        "            monthly_return = sum(returns)  # 各ポジションから配分されたリターンの合計\n",
        "            pivot_table.loc[year, month_names[month]] = monthly_return\n",
        "\n",
        "        # 年間リターンを計算\n",
        "        for year in all_years:\n",
        "            year_returns = [pivot_table.loc[year, month_names[m]] for m in all_months if pd.notnull(pivot_table.loc[year, month_names[m]])]\n",
        "            if year_returns:\n",
        "                annual_return = ((1 + pd.Series(year_returns)).prod() - 1)\n",
        "                pivot_table.loc[year, 'Annual'] = annual_return\n",
        "\n",
        "        # 表示用にフォーマット\n",
        "        formatted_table = pivot_table.map(lambda x: f\"{x:.2%}\" if pd.notnull(x) else \"\")\n",
        "\n",
        "        # HTML表示（条件付き）\n",
        "        if display_table:\n",
        "            display(HTML(\"\"\"\n",
        "        <h2 style=\"color:#3367d6;\">Monthly Returns (Dual Momentum Portfolio)</h2>\n",
        "        \"\"\" + formatted_table.to_html(classes='table table-striped')))\n",
        "\n",
        "        # クラス変数として保存（他のメソッドで使用可能に）\n",
        "        self.monthly_returns_data = monthly_returns\n",
        "        self.pivot_monthly_returns = pivot_table\n",
        "\n",
        "        return pivot_table\n",
        "\n",
        "    # display_model_signals_dynamic メソッド内を修正\n",
        "    # 以下は、Single PeriodとMultiple Periods両方でIRXを表示するための変更です\n",
        "\n",
        "    def display_model_signals_dynamic(self, dummy=None):\n",
        "        \"\"\"\n",
        "        モデルシグナルを動的に表示する関数。\n",
        "        バックテスト結果がある場合はその最終ポジションを使用し、\n",
        "        ない場合は現在の設定に基づいて予測を行います。\n",
        "\n",
        "        Parameters:\n",
        "            dummy: ダミーパラメータ（UI連携用）\n",
        "        \"\"\"\n",
        "\n",
        "\n",
        "        # キャッシュ強制クリア前の状態を保存（結果には影響しない一時的なキャッシュクリア）\n",
        "        original_cache = self.momentum_cache.copy() if hasattr(self, 'momentum_cache') else {}\n",
        "        original_momentum_results = self.momentum_results\n",
        "\n",
        "        # キャッシュを強制的にクリア（一時的）\n",
        "        self.clear_cache()\n",
        "\n",
        "        # リスクフリーレートのソース情報を取得\n",
        "        rfr_source = self.get_risk_free_rate_source()\n",
        "        rfr_source_short = rfr_source.split(' ')[0] if ' ' in rfr_source else rfr_source  # \"DTB3\"または\"IRX\"部分のみを取得\n",
        "\n",
        "        # バックテスト結果が存在するかチェック\n",
        "        use_backtest_result = False\n",
        "        backtest_signal_date = None\n",
        "        backtest_assets = []\n",
        "        backtest_message = \"\"\n",
        "        abs_momentum_asset_return = None\n",
        "        risk_free_rate = None\n",
        "        excess_return = None\n",
        "\n",
        "        if hasattr(self, 'positions') and self.positions:\n",
        "            # 最終ポジション情報を使用\n",
        "            last_position = self.positions[-1]\n",
        "            backtest_signal_date = last_position.get(\"signal_date\")\n",
        "            backtest_assets = last_position.get(\"assets\", [])\n",
        "            backtest_message = last_position.get(\"message\", \"\")\n",
        "            use_backtest_result = True\n",
        "\n",
        "            # リスクフリーレート情報を計算（絶対モメンタムの設定に関わらず）\n",
        "            if backtest_signal_date is not None:\n",
        "                try:\n",
        "                    if self.performance_periods == \"Single Period\":\n",
        "                        # シングル期間モードの場合\n",
        "                        lookback = self.lookback_period\n",
        "                        if self.absolute_momentum_custom_period:\n",
        "                            lookback = self.absolute_momentum_period\n",
        "\n",
        "                        # リスクフリーレートは常に計算する\n",
        "                        risk_free_rate = self._calculate_cumulative_rfr_return(\n",
        "                            backtest_signal_date,\n",
        "                            lookback\n",
        "                        )\n",
        "\n",
        "                        # 絶対モメンタムが有効な場合のみ、資産のリターンを計算\n",
        "                        if self.single_absolute_momentum == \"Yes\" and self.absolute_momentum_asset is not None:\n",
        "                            abs_momentum_asset_return = self.calculate_monthly_momentum(\n",
        "                                self.absolute_momentum_asset,\n",
        "                                backtest_signal_date,\n",
        "                                lookback\n",
        "                            )\n",
        "\n",
        "                            if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                                excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "\n",
        "                        if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                            excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "\n",
        "                    else:\n",
        "                        # 複数期間の場合\n",
        "                        # 各期間の詳細情報を格納する配列\n",
        "                        period_returns = []\n",
        "                        period_weights = []\n",
        "                        period_rfr_returns = []\n",
        "\n",
        "                        # 各期間のモメンタム計算\n",
        "                        for period_idx, period in enumerate(self.multiple_periods):\n",
        "                            length, unit, weight = period.get(\"length\"), period.get(\"unit\"), period.get(\"weight\", 0)\n",
        "\n",
        "                            if length is None or weight <= 0:\n",
        "                                continue\n",
        "\n",
        "                            # 期間の重みを記録\n",
        "                            period_weights.append(weight / 100.0)  # パーセントから小数に変換\n",
        "\n",
        "                            # リターン計算 (統一された計算メソッドを使用)\n",
        "                            if unit == \"Months\":\n",
        "                                period_return = self.calculate_monthly_momentum(\n",
        "                                    self.absolute_momentum_asset,\n",
        "                                    backtest_signal_date,\n",
        "                                    length\n",
        "                                )\n",
        "                            else:  # Days\n",
        "                                # 日数を月数に近似\n",
        "                                approx_months = max(1, round(length / 30))\n",
        "                                period_return = self.calculate_monthly_momentum(\n",
        "                                    self.absolute_momentum_asset,\n",
        "                                    backtest_signal_date,\n",
        "                                    approx_months\n",
        "                                )\n",
        "\n",
        "                            # リスクフリーレート計算\n",
        "                            if unit == \"Months\":\n",
        "                                period_rfr = self._calculate_cumulative_rfr_return(\n",
        "                                    backtest_signal_date,\n",
        "                                    length\n",
        "                                )\n",
        "                            else:  # Days\n",
        "                                # 日数を月数に近似\n",
        "                                approx_months = max(1, round(length / 30))\n",
        "                                period_rfr = self._calculate_cumulative_rfr_return(\n",
        "                                    backtest_signal_date,\n",
        "                                    approx_months\n",
        "                                )\n",
        "\n",
        "                            # 結果を記録\n",
        "                            if period_return is not None and period_rfr is not None:\n",
        "                                period_returns.append(period_return)\n",
        "                                period_rfr_returns.append(period_rfr)\n",
        "\n",
        "                        # 重み付き平均を計算\n",
        "                        if period_returns and period_weights and period_rfr_returns:\n",
        "                            # 重みの正規化\n",
        "                            total_weight = sum(period_weights)\n",
        "                            if total_weight > 0:\n",
        "                                normalized_weights = [w/total_weight for w in period_weights]\n",
        "\n",
        "                                # 重み付きリターンとRFRを計算\n",
        "                                abs_momentum_asset_return = sum(r * w for r, w in zip(period_returns, normalized_weights))\n",
        "                                risk_free_rate = sum(rfr * w for rfr, w in zip(period_rfr_returns, normalized_weights))\n",
        "                                excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "\n",
        "                except Exception as e:\n",
        "                    logger.error(f\"絶対モメンタム情報の計算中にエラー: {e}\")\n",
        "                    abs_momentum_asset_return = None\n",
        "                    risk_free_rate = None\n",
        "                    excess_return = None\n",
        "\n",
        "        # 置換後のコード：バックテスト結果またはデータの最新日を使用\n",
        "        if not use_backtest_result:\n",
        "            # 常に最新の利用可能なデータ日を使用\n",
        "            if hasattr(self, 'price_data') and self.price_data is not None and not self.price_data.empty:\n",
        "                signal_date = self.price_data.index[-1]\n",
        "            else:\n",
        "                # データがない場合はフォールバック\n",
        "                import calendar\n",
        "                end_year_val = self.end_year\n",
        "                end_month_val = self.end_month\n",
        "                _, last_day = calendar.monthrange(end_year_val, end_month_val)\n",
        "                signal_date = pd.to_datetime(f\"{end_year_val}-{end_month_val}-{last_day}\")\n",
        "        else:\n",
        "            signal_date = backtest_signal_date\n",
        "\n",
        "        # MM/DD/YYYY形式の日付に変換\n",
        "        signal_date_str = signal_date.strftime(\"%m/%d/%Y\")\n",
        "\n",
        "        # モメンタム計算 (バックテスト結果がない場合のみ)\n",
        "        if not use_backtest_result:\n",
        "            # 計算日と前月末日を取得（前月末データが必要な場合）\n",
        "            if hasattr(self, 'price_data') and self.price_data is not None and not self.price_data.empty:\n",
        "                calculation_date = self.price_data.index[-1]\n",
        "\n",
        "                # 置換後のコード：常に最新日のデータを使用してシグナル計算\n",
        "                logger.info(f\"最新日 {calculation_date.strftime('%Y-%m-%d')} に基づくシグナル計算\")\n",
        "                momentum_results = self.calculate_momentum_ranks(calculation_date)\n",
        "\n",
        "            else:\n",
        "                # データがない場合は通常計算\n",
        "                momentum_results = self.calculate_momentum_ranks()\n",
        "\n",
        "            selected_assets = momentum_results.get(\"selected_assets\", [])\n",
        "            message = momentum_results.get(\"message\", \"\")\n",
        "\n",
        "            # リスクフリーレート情報の計算（予測用・絶対モメンタムの設定に関わらず）\n",
        "            try:\n",
        "                calculation_date = self.price_data.index[-1] if hasattr(self, 'price_data') and self.price_data is not None and not self.price_data.empty else pd.to_datetime(\"today\")\n",
        "\n",
        "                if self.performance_periods == \"Single Period\":\n",
        "                    # 単一期間の場合\n",
        "                    lookback = self.lookback_period\n",
        "                    if self.absolute_momentum_custom_period:\n",
        "                        lookback = self.absolute_momentum_period\n",
        "\n",
        "                    # リスクフリーレートは常に計算\n",
        "                    risk_free_rate = self._calculate_cumulative_rfr_return(\n",
        "                        calculation_date,\n",
        "                        lookback\n",
        "                    )\n",
        "\n",
        "                    # 絶対モメンタムが有効な場合のみ、資産のリターンを計算\n",
        "                    if self.single_absolute_momentum == \"Yes\":\n",
        "                        abs_momentum_asset_return = self.calculate_monthly_momentum(\n",
        "                            self.absolute_momentum_asset,\n",
        "                            calculation_date,\n",
        "                            lookback\n",
        "                        )\n",
        "\n",
        "                        if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                            excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "                else:\n",
        "                    # 複数期間の場合も同様（リスクフリーレートは常に計算）\n",
        "                    risk_free_rate = self._calculate_weighted_rfr_return(calculation_date)\n",
        "\n",
        "                    # 絶対モメンタムが有効な場合のみ\n",
        "                    if self.single_absolute_momentum == \"Yes\":\n",
        "                        abs_momentum_asset_return = self._calculate_weighted_absolute_momentum_unified(calculation_date)\n",
        "\n",
        "                        if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                            excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "\n",
        "                    if self.performance_periods == \"Single Period\":\n",
        "                        # 単一期間の場合\n",
        "                        lookback = self.lookback_period\n",
        "                        if self.absolute_momentum_custom_period:\n",
        "                            lookback = self.absolute_momentum_period\n",
        "\n",
        "                        abs_momentum_asset_return = self.calculate_monthly_momentum(\n",
        "                            self.absolute_momentum_asset,\n",
        "                            calculation_date,\n",
        "                            lookback\n",
        "                        )\n",
        "                        risk_free_rate = self._calculate_cumulative_rfr_return(\n",
        "                            calculation_date,\n",
        "                            lookback\n",
        "                        )\n",
        "                        if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                            excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "                    else:\n",
        "                        # 複数期間の場合（上記のバックテストと同様の処理）\n",
        "                        abs_momentum_asset_return = self._calculate_weighted_absolute_momentum_unified(calculation_date)\n",
        "                        risk_free_rate = self._calculate_weighted_rfr_return(calculation_date)\n",
        "                        if abs_momentum_asset_return is not None and risk_free_rate is not None:\n",
        "                            excess_return = abs_momentum_asset_return - risk_free_rate\n",
        "            except Exception as e:\n",
        "                    logger.error(f\"予測モードでの絶対モメンタム情報の計算中にエラー: {e}\")\n",
        "                    abs_momentum_asset_return = None\n",
        "                    risk_free_rate = None\n",
        "                    excess_return = None\n",
        "        else:\n",
        "            # バックテスト結果を使用\n",
        "            selected_assets = backtest_assets\n",
        "            message = backtest_message\n",
        "\n",
        "        # 判定結果を英語に変換\n",
        "        english_result = message\n",
        "\n",
        "        # アセット文字列の生成\n",
        "        if len(selected_assets) > 0:\n",
        "            # 退避先資産かどうかを判断（メッセージに \"Out of Market\" が含まれているか）\n",
        "            is_out_of_market = any(s in message for s in [\"Out of Market\", \"Failed\"])\n",
        "\n",
        "            if is_out_of_market and self.out_of_market_strategy == \"Top 1\" and len(selected_assets) == 1:\n",
        "                # Top 1戦略の場合は100%表示\n",
        "                assets_str_list = [f\"100.00% {selected_assets[0]}\"]\n",
        "            else:\n",
        "                # 通常の等分割表示\n",
        "                alloc_pct = 1.0 / len(selected_assets)\n",
        "                assets_str_list = [f\"{alloc_pct*100:.2f}% {asset}\" for asset in selected_assets]\n",
        "\n",
        "            final_assets_str = \", \".join(assets_str_list)\n",
        "        else:\n",
        "            final_assets_str = \"None\"\n",
        "\n",
        "        # 詳細テーブルの生成\n",
        "        relevant_assets = set(self.tickers + [self.absolute_momentum_asset] + self.out_of_market_assets)\n",
        "        relevant_assets = [a for a in relevant_assets if a and a.lower() != \"cash\"]\n",
        "\n",
        "        rows = []\n",
        "\n",
        "        if self.performance_periods == \"Single Period\":\n",
        "            lookback_period = self.lookback_period\n",
        "            lookback_unit = self.lookback_unit\n",
        "\n",
        "            # リターン計算の対象日（バックテスト結果があればその日付、なければ最新日）\n",
        "            calculation_date = signal_date if use_backtest_result else (\n",
        "                self.price_data.index[-1] if hasattr(self, 'price_data') and self.price_data is not None and not self.price_data.empty\n",
        "                else pd.to_datetime(\"today\")\n",
        "            )\n",
        "\n",
        "            # 各資産のリターン計算\n",
        "            returns_map = {}\n",
        "            for asset in relevant_assets:\n",
        "                ret = self.calculate_monthly_momentum(asset, calculation_date, lookback_period)\n",
        "                returns_map[asset] = ret\n",
        "\n",
        "            # リスクフリーレートを事前計算（新規追加）\n",
        "            rfr_return = self._calculate_cumulative_rfr_return(calculation_date, lookback_period)\n",
        "\n",
        "            # テーブル行の作成\n",
        "            for asset in relevant_assets:\n",
        "                r = returns_map.get(asset)\n",
        "                formatted_return = f\"{r*100:.2f}%\" if r is not None else \"N/A\"\n",
        "\n",
        "                row = {\n",
        "                    \"Asset\": asset,\n",
        "                    f\"{lookback_period}-{lookback_unit.lower()} return\": formatted_return,\n",
        "                    \"Score\": formatted_return\n",
        "                }\n",
        "                rows.append(row)\n",
        "\n",
        "            # RFRをテーブルに直接追加（新規追加）\n",
        "            formatted_rfr = f\"{rfr_return*100:.2f}%\" if rfr_return is not None else \"N/A\"\n",
        "            rows.append({\n",
        "                \"Asset\": f\"RFR ({rfr_source_short})\",\n",
        "                f\"{lookback_period}-{lookback_unit.lower()} return\": formatted_rfr,\n",
        "                \"Score\": formatted_rfr\n",
        "            })\n",
        "\n",
        "            columns = [\"Asset\", f\"{lookback_period}-{lookback_unit.lower()} return\", \"Score\"]\n",
        "\n",
        "        else:  # Multiple Periods\n",
        "            # リターン計算の対象日\n",
        "            calculation_date = signal_date if use_backtest_result else (\n",
        "                self.price_data.index[-1] if hasattr(self, 'price_data') and self.price_data is not None and not self.price_data.empty\n",
        "                else pd.to_datetime(\"today\")\n",
        "            )\n",
        "\n",
        "            # 期間ごとのカラム名と期間情報を準備\n",
        "            period_details = []\n",
        "            for idx, p in enumerate(self.multiple_periods):\n",
        "                length = p.get(\"length\", None)\n",
        "                unit = p.get(\"unit\", None)\n",
        "                weight = p.get(\"weight\", 0)\n",
        "\n",
        "                if length is None or length <= 0 or weight <= 0:\n",
        "                    continue\n",
        "\n",
        "                # ここで各期間の開始・終了日付を特定（表示用）\n",
        "                if unit == \"Months\":\n",
        "                    # 月数に基づき計算\n",
        "                    target_month = calculation_date.month\n",
        "                    target_year = calculation_date.year\n",
        "\n",
        "                    # 指定月数分遡る\n",
        "                    for _ in range(length):\n",
        "                        if target_month == 1:\n",
        "                            target_month = 12\n",
        "                            target_year -= 1\n",
        "                        else:\n",
        "                            target_month -= 1\n",
        "\n",
        "                    # おおよその日付範囲（表示用）\n",
        "                    start_date_approx = pd.Timestamp(year=target_year, month=target_month, day=1)\n",
        "                    date_range_str = f\"{start_date_approx.strftime('%Y/%m')}～{calculation_date.strftime('%Y/%m')}\"\n",
        "                else:  # Days\n",
        "                    # 日数に基づき計算\n",
        "                    start_date_approx = calculation_date - timedelta(days=length)\n",
        "                    date_range_str = f\"{start_date_approx.strftime('%Y/%m/%d')}～{calculation_date.strftime('%Y/%m/%d')}\"\n",
        "\n",
        "                colname = f\"{length}-{unit.lower()} return\\n({date_range_str})\"\n",
        "\n",
        "                period_details.append({\n",
        "                    \"idx\": idx,\n",
        "                    \"length\": length,\n",
        "                    \"unit\": unit,\n",
        "                    \"weight\": weight,\n",
        "                    \"colname\": colname\n",
        "                })\n",
        "\n",
        "            # 各期間・各資産のリターンを計算\n",
        "            period_returns = {}\n",
        "            for period in period_details:\n",
        "                idx = period[\"idx\"]\n",
        "                length = period[\"length\"]\n",
        "\n",
        "                # 単位を揃える（新メソッドは月単位のみ対応）\n",
        "                if period[\"unit\"] == \"Days\":\n",
        "                    # 日数を月数に近似変換（30日≒1ヶ月）\n",
        "                    months_approx = max(1, round(length / 30))\n",
        "                    logger.info(f\"{length}日間を約{months_approx}ヶ月として計算\")\n",
        "\n",
        "                    period_returns[idx] = {}\n",
        "                    for asset in relevant_assets:\n",
        "                        ret = self.calculate_monthly_momentum(asset, calculation_date, months_approx)\n",
        "                        period_returns[idx][asset] = ret\n",
        "\n",
        "                else:\n",
        "                    period_returns[idx] = {}\n",
        "                    for asset in relevant_assets:\n",
        "                        ret = self.calculate_monthly_momentum(asset, calculation_date, length)\n",
        "                        period_returns[idx][asset] = ret\n",
        "\n",
        "            # 重み付け結果の計算\n",
        "            if self.weighting_method == \"Weight Performance\":\n",
        "                weighted_result = self._calculate_weighted_performance(period_returns, relevant_assets)\n",
        "            else:  # \"Weight Rank Orders\"\n",
        "                weighted_result = self._calculate_weighted_ranks(period_returns, relevant_assets)\n",
        "\n",
        "            # 表示用のカラムを準備\n",
        "            period_columns = [p[\"colname\"] for p in period_details]\n",
        "\n",
        "            # 各資産の結果をテーブルに追加\n",
        "            for asset in relevant_assets:\n",
        "                row_data = {\"Asset\": asset}\n",
        "\n",
        "                # 各期間のリターンを追加\n",
        "                for period in period_details:\n",
        "                    idx = period[\"idx\"]\n",
        "                    colname = period[\"colname\"]\n",
        "\n",
        "                    if idx in period_returns and asset in period_returns[idx]:\n",
        "                        val = period_returns[idx][asset]\n",
        "                        row_data[colname] = f\"{val*100:.2f}%\" if val is not None else \"N/A\"\n",
        "                    else:\n",
        "                        row_data[colname] = \"N/A\"\n",
        "\n",
        "                # 重み付け結果\n",
        "                w_val = weighted_result.get(asset)\n",
        "                row_data[\"Weighted\"] = f\"{w_val*100:.2f}%\" if w_val is not None else \"N/A\"\n",
        "                row_data[\"Score\"] = f\"{w_val*100:.2f}%\" if w_val is not None else \"N/A\"\n",
        "\n",
        "                rows.append(row_data)\n",
        "\n",
        "            # IRXを計算して追加（複数期間用に追加）\n",
        "            # 各期間のリスクフリーレートを計算\n",
        "            rfr_row = {\"Asset\": f\"RFR ({rfr_source_short})\"}\n",
        "\n",
        "            # 各期間のRFRを計算\n",
        "            for period in period_details:\n",
        "                idx = period[\"idx\"]\n",
        "                colname = period[\"colname\"]\n",
        "                length = period[\"length\"]\n",
        "                unit = period[\"unit\"]\n",
        "\n",
        "                # 期間に応じたRFRを計算\n",
        "                if unit == \"Months\":\n",
        "                    period_rfr = self._calculate_cumulative_rfr_return(calculation_date, length)\n",
        "                else:  # Days\n",
        "                    # 日数を月数に近似変換\n",
        "                    months_approx = max(1, round(length / 30))\n",
        "                    period_rfr = self._calculate_cumulative_rfr_return(calculation_date, months_approx)\n",
        "\n",
        "                # 表示用フォーマット\n",
        "                rfr_row[colname] = f\"{period_rfr*100:.2f}%\" if period_rfr is not None else \"N/A\"\n",
        "\n",
        "            # 重み付きRFR\n",
        "            rfr_weighted = self._calculate_weighted_rfr_return(calculation_date)\n",
        "            rfr_row[\"Weighted\"] = f\"{rfr_weighted*100:.2f}%\" if rfr_weighted is not None else \"N/A\"\n",
        "            rfr_row[\"Score\"] = f\"{rfr_weighted*100:.2f}%\" if rfr_weighted is not None else \"N/A\"\n",
        "\n",
        "            # リスクフリーレート行を追加\n",
        "            rows.append(rfr_row)\n",
        "\n",
        "            columns = [\"Asset\"] + period_columns + [\"Weighted\", \"Score\"]\n",
        "\n",
        "        # 詳細テーブルの作成\n",
        "        df_details = pd.DataFrame(rows)\n",
        "        if columns:\n",
        "            df_details = df_details[columns]\n",
        "\n",
        "        # HTMLの生成\n",
        "        html = f\"\"\"\n",
        "        <h2 style=\"color:#3367d6;\">Model Signals</h2>\n",
        "        <table style=\"border-collapse: collapse; width:600px;\">\n",
        "        <tr>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\"><b>Signal Date</b></td>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\">{signal_date_str}</td>\n",
        "        </tr>\n",
        "        <tr>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\"><b>Assets</b></td>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\">{final_assets_str}</td>\n",
        "        </tr>\n",
        "        <tr>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\"><b>Details</b></td>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\">\n",
        "            {df_details.to_html(index=False, classes='table table-striped')}\n",
        "            </td>\n",
        "        </tr>\n",
        "        \"\"\"\n",
        "\n",
        "        # リスクフリーレートは常に表示、絶対モメンタム情報は条件付きで表示\n",
        "        if risk_free_rate is not None:\n",
        "            html += f\"\"\"\n",
        "        <tr>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\"><b>{\"Absolute Momentum\" if self.single_absolute_momentum == \"Yes\" else \"Risk-Free Rate\"}</b></td>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\">\n",
        "            <table style=\"width:100%; border-collapse: collapse;\">\n",
        "            \"\"\"\n",
        "\n",
        "            # 絶対モメンタムが有効で資産リターンがある場合\n",
        "            if self.single_absolute_momentum == \"Yes\" and abs_momentum_asset_return is not None:\n",
        "                html += f\"\"\"\n",
        "                <tr>\n",
        "                <td style=\"padding: 4px; width: 150px;\">Absolute({self.absolute_momentum_asset}):</td>\n",
        "                <td style=\"padding: 4px;\">{abs_momentum_asset_return:.2%}</td>\n",
        "                </tr>\n",
        "                \"\"\"\n",
        "\n",
        "            # リスクフリーレートは常に表示\n",
        "            html += f\"\"\"\n",
        "                <tr>\n",
        "                <td style=\"padding: 4px;\">Risk-Free Rate ({rfr_source_short}):</td>\n",
        "                <td style=\"padding: 4px;\">{risk_free_rate:.2%}</td>\n",
        "                </tr>\n",
        "            \"\"\"\n",
        "\n",
        "            # 超過リターンも条件付きで表示\n",
        "            if self.single_absolute_momentum == \"Yes\" and abs_momentum_asset_return is not None and excess_return is not None:\n",
        "                html += f\"\"\"\n",
        "                <tr>\n",
        "                <td style=\"padding: 4px;\">Excess Return:</td>\n",
        "                <td style=\"padding: 4px;\">{excess_return:.2%}</td>\n",
        "                </tr>\n",
        "                \"\"\"\n",
        "\n",
        "            html += \"\"\"\n",
        "            </table>\n",
        "            </td>\n",
        "        </tr>\n",
        "    \"\"\"\n",
        "\n",
        "        # 判定結果\n",
        "        html += f\"\"\"\n",
        "        <tr>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\"><b>Decision Result</b></td>\n",
        "            <td style=\"padding:4px; border:1px solid #ccc;\">{english_result}</td>\n",
        "        </tr>\n",
        "        </table>\n",
        "        \"\"\"\n",
        "\n",
        "        # 元のキャッシュと結果を復元\n",
        "        if hasattr(self, 'momentum_cache'):\n",
        "            self.momentum_cache = original_cache\n",
        "        self.momentum_results = original_momentum_results\n",
        "\n",
        "        display(HTML(html))\n",
        "\n",
        "    def display_performance_summary(self, display_summary=True):\n",
        "        \"\"\"\n",
        "        バックテストのパフォーマンスサマリーを表示するメソッド。\n",
        "        display_summary=False の場合は出力を抑制し、内部計算のみ行うなどの拡張も可能。\n",
        "        \"\"\"\n",
        "        if self.results is None:\n",
        "            if display_summary:\n",
        "                print(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return\n",
        "\n",
        "        # 表示フラグがFalseなら計算と表示をスキップ\n",
        "        if not display_summary:\n",
        "            # メトリクスが既に計算されていれば返す、なければ計算して返す\n",
        "            if hasattr(self, 'metrics') and self.metrics is not None:\n",
        "                return self.metrics\n",
        "            else:\n",
        "                return self.calculate_performance_metrics()\n",
        "\n",
        "        # 既存の年次リターンテーブルを強制的にクリアして再生成\n",
        "        if hasattr(self, 'pivot_monthly_returns'):\n",
        "            delattr(self, 'pivot_monthly_returns')\n",
        "\n",
        "        # 修正：先に月次リターンテーブルを生成（未生成の場合）、表示しない\n",
        "        self.generate_monthly_returns_table(display_table=False)\n",
        "\n",
        "        # バックテストの実際の開始日を使用\n",
        "        if hasattr(self, 'positions') and self.positions:\n",
        "            # 最初のポジションの開始日を取得\n",
        "            start_date = self.positions[0]['start_date']\n",
        "        else:\n",
        "            # フォールバックとして結果の最初のインデックスを使用\n",
        "            start_date = self.results.index[0]\n",
        "\n",
        "        if self.price_data is not None and not self.price_data.empty:\n",
        "            end_date = self.price_data.index[-1]\n",
        "        else:\n",
        "            end_date = self.results.index[-1]\n",
        "\n",
        "        metrics = self.calculate_performance_metrics()\n",
        "\n",
        "        # 修正：先に月次リターンテーブルを生成（未生成の場合）、表示しない\n",
        "        if not hasattr(self, 'pivot_monthly_returns'):\n",
        "            self.generate_monthly_returns_table(display_table=False)\n",
        "\n",
        "        # 修正：保有期間ベースの年次リターンを使用\n",
        "        annual_returns = {}\n",
        "        if hasattr(self, 'pivot_monthly_returns'):\n",
        "            for year in self.pivot_monthly_returns.index:\n",
        "                if pd.notnull(self.pivot_monthly_returns.loc[year, 'Annual']):\n",
        "                    annual_returns[year] = self.pivot_monthly_returns.loc[year, 'Annual']\n",
        "\n",
        "        # ベンチマークは従来通り\n",
        "        benchmark_annual_returns = {}\n",
        "        for year in range(self.start_year, self.end_year + 1):\n",
        "            year_data = self.results[self.results.index.year == year]\n",
        "            if not year_data.empty:\n",
        "                b_first_value = year_data[\"Benchmark_Value\"].iloc[0]\n",
        "                b_last_value = year_data[\"Benchmark_Value\"].iloc[-1]\n",
        "                benchmark_annual_returns[year] = (b_last_value / b_first_value) - 1\n",
        "\n",
        "        best_year = max(annual_returns.items(), key=lambda x: x[1]) if annual_returns else (\"N/A\", np.nan)\n",
        "        worst_year = min(annual_returns.items(), key=lambda x: x[1]) if annual_returns else (\"N/A\", np.nan)\n",
        "        best_year_benchmark = max(benchmark_annual_returns.items(), key=lambda x: x[1]) if benchmark_annual_returns else (\"N/A\", np.nan)\n",
        "        worst_year_benchmark = min(benchmark_annual_returns.items(), key=lambda x: x[1]) if benchmark_annual_returns else (\"N/A\", np.nan)\n",
        "        if \"Portfolio_Return\" in self.results.columns and \"Benchmark_Return\" in self.results.columns:\n",
        "            benchmark_corr = self.results[\"Portfolio_Return\"].corr(self.results[\"Benchmark_Return\"])\n",
        "        else:\n",
        "            benchmark_corr = np.nan\n",
        "        summary_data = {\n",
        "        \"Metric\": [\"Start Balance\", \"End Balance\", \"Annualized Return (CAGR)\", \"Standard Deviation\",\n",
        "                \"Best Year\", \"Worst Year\", \"Maximum Drawdown\", \"Sharpe Ratio\", \"Sortino Ratio\", \"MAR Ratio\",\n",
        "                \"Benchmark Correlation\", \"退避先資産戦略\"],  # 追加\n",
        "        \"Dual Momentum Model\": [\n",
        "            \"$100,000.00\",\n",
        "            f\"${self.results['Portfolio_Value'].iloc[-1]:,.2f}\",\n",
        "            f\"{metrics['CAGR']['Portfolio']*100:.2f}%\",\n",
        "            f\"{metrics['Volatility']['Portfolio']*100:.2f}%\",\n",
        "            f\"{best_year[0]}: {best_year[1]*100:.2f}%\" if best_year[0] != \"N/A\" else \"N/A\",\n",
        "            f\"{worst_year[0]}: {worst_year[1]*100:.2f}%\" if worst_year[0] != \"N/A\" else \"N/A\",\n",
        "            f\"{metrics['Max Drawdown']['Portfolio']*100:.2f}%\",\n",
        "            f\"{metrics['Sharpe Ratio']['Portfolio']:.2f}\",\n",
        "            f\"{metrics['Sortino Ratio']['Portfolio']:.2f}\",\n",
        "            f\"{metrics['MAR Ratio']['Portfolio']:.2f}\",\n",
        "            f\"{benchmark_corr:.2f}\",\n",
        "            f\"{self.out_of_market_strategy}\"  # 追加\n",
        "        ],\n",
        "            \"Benchmark (\" + self.benchmark_ticker + \")\": [\n",
        "                \"$100,000.00\",\n",
        "                f\"${self.results['Benchmark_Value'].iloc[-1]:,.2f}\",\n",
        "                f\"{metrics['CAGR']['Benchmark']*100:.2f}%\",\n",
        "                f\"{metrics['Volatility']['Benchmark']*100:.2f}%\",\n",
        "                f\"{best_year_benchmark[0]}: {best_year_benchmark[1]*100:.2f}%\" if best_year_benchmark[0] != \"N/A\" else \"N/A\",\n",
        "                f\"{worst_year_benchmark[0]}: {worst_year_benchmark[1]*100:.2f}%\" if worst_year_benchmark[0] != \"N/A\" else \"N/A\",\n",
        "                f\"{metrics['Max Drawdown']['Benchmark']*100:.2f}%\",\n",
        "                f\"{metrics['Sharpe Ratio']['Benchmark']:.2f}\",\n",
        "                f\"{metrics['Sortino Ratio']['Benchmark']:.2f}\",\n",
        "                f\"{metrics['MAR Ratio']['Benchmark']:.2f}\",\n",
        "                \"1.00\",\n",
        "                \"N/A\"\n",
        "            ]\n",
        "        }\n",
        "\n",
        "        summary_df = pd.DataFrame(summary_data)\n",
        "        html = f\"\"\"\n",
        "        <h2 style=\"color:#3367d6;\">Performance Summary</h2>\n",
        "        <p><strong>({start_date.strftime('%m/%d/%Y')} - {end_date.strftime('%m/%d/%Y')})</strong></p>\n",
        "        \"\"\" + summary_df.to_html(index=False, classes='table table-striped')\n",
        "        display(HTML(html))\n",
        "\n",
        "        return metrics\n",
        "\n",
        "    def display_model_signals_dynamic_ui(self):\n",
        "        \"\"\"\n",
        "        UI用のシグナル表示関数（一時的にキャッシュをクリアしてシグナルを計算）\n",
        "        \"\"\"\n",
        "        # 一時的にキャッシュをクリアしてシグナルを表示（元のキャッシュは自動的に復元される）\n",
        "        self.display_model_signals_dynamic()\n",
        "\n",
        "    def export_to_excel(self, filename=None, auto_download=False):\n",
        "        \"\"\"\n",
        "        バックテスト結果をエクセルファイルに出力する\n",
        "\n",
        "        Parameters:\n",
        "        filename (str, optional): 出力ファイル名。指定がない場合は自動生成\n",
        "        auto_download (bool): Colabの場合に自動ダウンロードするかどうか\n",
        "\n",
        "        Returns:\n",
        "        dict または None: 成功した場合は情報辞書、失敗の場合はNone\n",
        "        \"\"\"\n",
        "        import pandas as pd\n",
        "        from datetime import datetime\n",
        "        import json\n",
        "        import os\n",
        "\n",
        "        # ファイル名が指定されていない場合は自動生成\n",
        "        if filename is None:\n",
        "            now = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "            filename = f\"DM_{now}.xlsx\"\n",
        "\n",
        "        # 拡張子の確認と追加\n",
        "        if not filename.endswith('.xlsx'):\n",
        "            filename += '.xlsx'\n",
        "\n",
        "        # バックテスト結果が存在するか確認\n",
        "        if self.results is None:\n",
        "            logger.error(\"バックテスト結果がありません。run_backtest()を実行してください。\")\n",
        "            return None\n",
        "\n",
        "        try:\n",
        "            # 日付範囲の取得\n",
        "            start_date = self.results.index[0]\n",
        "            end_date = self.results.index[-1]\n",
        "\n",
        "            # Excel Writerの作成\n",
        "            with pd.ExcelWriter(filename, engine='openpyxl') as writer:\n",
        "                #------------------------------------------------------\n",
        "                # 1. 設定シート (Settings)\n",
        "                #------------------------------------------------------\n",
        "                settings_data = []\n",
        "\n",
        "                # バックテスト期間情報\n",
        "                settings_data.append([\"バックテスト期間情報\", \"\"])\n",
        "                settings_data.append([\"設定開始日\", f\"{self.start_year}/{self.start_month:02d}/01\"])\n",
        "\n",
        "                # 終了日は月の最終日を取得\n",
        "                import calendar\n",
        "                _, last_day = calendar.monthrange(self.end_year, self.end_month)\n",
        "                settings_data.append([\"設定終了日\", f\"{self.end_year}/{self.end_month:02d}/{last_day}\"])\n",
        "\n",
        "                # 実際のバックテスト期間\n",
        "                settings_data.append([\"実際のバックテスト開始日\", start_date.strftime('%Y/%m/%d')])\n",
        "                settings_data.append([\"実際のバックテスト終了日\", end_date.strftime('%Y/%m/%d')])\n",
        "\n",
        "                # 期間計算\n",
        "                days_diff = (end_date - start_date).days\n",
        "                years = days_diff // 365\n",
        "                months = (days_diff % 365) // 30\n",
        "                settings_data.append([\"有効バックテスト期間\", f\"{years}年{months}ヶ月\"])\n",
        "\n",
        "                # ルックバック期間\n",
        "                if self.performance_periods == \"Single Period\":\n",
        "                    lb_info = f\"{self.lookback_period} {self.lookback_unit}\"\n",
        "                else:\n",
        "                    # 最長のルックバック期間を表示\n",
        "                    max_lb = 0\n",
        "                    max_unit = \"\"\n",
        "                    for period in self.multiple_periods:\n",
        "                        if period.get(\"length\") and period.get(\"weight\", 0) > 0:\n",
        "                            if period.get(\"length\") > max_lb:\n",
        "                                max_lb = period.get(\"length\")\n",
        "                                max_unit = period.get(\"unit\")\n",
        "                    lb_info = f\"{max_lb} {max_unit}\"\n",
        "                settings_data.append([\"ルックバック期間\", lb_info])\n",
        "\n",
        "                # 資産設定\n",
        "                settings_data.append([\"\", \"\"])\n",
        "                settings_data.append([\"資産設定\", \"\"])\n",
        "                settings_data.append([\"投資対象銘柄\", \", \".join(self.tickers)])\n",
        "                settings_data.append([\"絶対モメンタム\", self.single_absolute_momentum])\n",
        "                settings_data.append([\"絶対モメンタム資産\", self.absolute_momentum_asset])\n",
        "                settings_data.append([\"市場退避先資産\", \", \".join(self.out_of_market_assets)])\n",
        "\n",
        "                # モメンタム設定\n",
        "                settings_data.append([\"\", \"\"])\n",
        "                settings_data.append([\"モメンタム設定\", \"\"])\n",
        "                settings_data.append([\"パフォーマンス期間\", self.performance_periods])\n",
        "\n",
        "                if self.performance_periods == \"Single Period\":\n",
        "                    settings_data.append([\"ルックバック期間\", f\"{self.lookback_period} {self.lookback_unit}\"])\n",
        "                    if self.absolute_momentum_custom_period:\n",
        "                        settings_data.append([\"絶対モメンタム期間\", f\"{self.absolute_momentum_period} {self.lookback_unit}\"])\n",
        "                else:\n",
        "                    # 複数期間の設定\n",
        "                    for idx, period in enumerate(self.multiple_periods, start=1):\n",
        "                        if period.get(\"length\") and period.get(\"weight\", 0) > 0:\n",
        "                            settings_data.append([f\"期間{idx}\",\n",
        "                                                f\"{period.get('length')} {period.get('unit')} ({period.get('weight')}%)\"])\n",
        "                    settings_data.append([\"重み付け方法\", self.weighting_method])\n",
        "\n",
        "                settings_data.append([\"保有資産数\", self.assets_to_hold])\n",
        "\n",
        "                # 取引設定\n",
        "                settings_data.append([\"\", \"\"])\n",
        "                settings_data.append([\"取引設定\", \"\"])\n",
        "                settings_data.append([\"取引頻度\", self.trading_frequency])\n",
        "                settings_data.append([\"取引実行\", self.trade_execution])\n",
        "                settings_data.append([\"ベンチマーク\", self.benchmark_ticker])\n",
        "\n",
        "                # データフレームに変換して出力\n",
        "                settings_df = pd.DataFrame(settings_data, columns=[\"パラメータ\", \"値\"])\n",
        "\n",
        "                # 1. Settingsシート\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"settings\", True):\n",
        "                    settings_df.to_excel(writer, sheet_name=\"Settings\", index=False)\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 2. パフォーマンスシート (Performance)\n",
        "                #------------------------------------------------------\n",
        "                # メトリクスが計算されていなければ計算\n",
        "                if not hasattr(self, 'metrics') or self.metrics is None:\n",
        "                    self.calculate_performance_metrics()\n",
        "\n",
        "                perf_data = []\n",
        "\n",
        "                # バックテスト期間情報\n",
        "                perf_data.append([\"バックテスト期間\", f\"{start_date.strftime('%Y/%m/%d')} - {end_date.strftime('%Y/%m/%d')}\", \"\"])\n",
        "                perf_data.append([\"\", \"\", \"\"])\n",
        "\n",
        "                # パフォーマンス指標\n",
        "                perf_data.append([\"指標\", \"Dual Momentum Portfolio\", f\"Benchmark ({self.benchmark_ticker})\"])\n",
        "\n",
        "                # 基本指標\n",
        "                initial_investment = 100000.0\n",
        "                perf_data.append([\"開始金額\", f\"${initial_investment:,.2f}\", f\"${initial_investment:,.2f}\"])\n",
        "                perf_data.append([\"終了金額\",\n",
        "                                f\"${self.results['Portfolio_Value'].iloc[-1]:,.2f}\",\n",
        "                                f\"${self.results['Benchmark_Value'].iloc[-1]:,.2f}\"])\n",
        "\n",
        "                # その他の指標\n",
        "                for metric_name, metric_values in self.metrics.items():\n",
        "                    # パーセント表示が必要な指標\n",
        "                    if metric_name in [\"Cumulative Return\", \"CAGR\", \"Volatility\", \"Max Drawdown\"]:\n",
        "                        perf_data.append([metric_name,\n",
        "                                        f\"{metric_values['Portfolio']*100:.2f}%\",\n",
        "                                        f\"{metric_values['Benchmark']*100:.2f}%\"])\n",
        "                    else:\n",
        "                        perf_data.append([metric_name,\n",
        "                                        f\"{metric_values['Portfolio']:.2f}\",\n",
        "                                        f\"{metric_values['Benchmark']:.2f}\"])\n",
        "\n",
        "                # 年次リターン情報\n",
        "                if hasattr(self, 'pivot_monthly_returns'):\n",
        "                    best_year_portfolio = None\n",
        "                    worst_year_portfolio = None\n",
        "                    best_return = -float('inf')\n",
        "                    worst_return = float('inf')\n",
        "\n",
        "                    for year in self.pivot_monthly_returns.index:\n",
        "                        if 'Annual' in self.pivot_monthly_returns.columns and pd.notnull(self.pivot_monthly_returns.loc[year, 'Annual']):\n",
        "                            annual_return = self.pivot_monthly_returns.loc[year, 'Annual']\n",
        "                            if annual_return > best_return:\n",
        "                                best_return = annual_return\n",
        "                                best_year_portfolio = year\n",
        "                            if annual_return < worst_return:\n",
        "                                worst_return = annual_return\n",
        "                                worst_year_portfolio = year\n",
        "\n",
        "                    if best_year_portfolio is not None:\n",
        "                        perf_data.append([\"最良年 (Portfolio)\",\n",
        "                                        f\"{best_year_portfolio}: {best_return*100:.2f}%\",\n",
        "                                        \"\"])\n",
        "\n",
        "                    if worst_year_portfolio is not None:\n",
        "                        perf_data.append([\"最悪年 (Portfolio)\",\n",
        "                                        f\"{worst_year_portfolio}: {worst_return*100:.2f}%\",\n",
        "                                        \"\"])\n",
        "\n",
        "                # ベンチマークの年次リターン\n",
        "                benchmark_annual_returns = {}\n",
        "                for year in range(start_date.year, end_date.year + 1):\n",
        "                    year_data = self.results[self.results.index.year == year]\n",
        "                    if not year_data.empty:\n",
        "                        b_first_value = year_data[\"Benchmark_Value\"].iloc[0]\n",
        "                        b_last_value = year_data[\"Benchmark_Value\"].iloc[-1]\n",
        "                        benchmark_annual_returns[year] = (b_last_value / b_first_value) - 1\n",
        "\n",
        "                if benchmark_annual_returns:\n",
        "                    best_year_bench = max(benchmark_annual_returns.items(), key=lambda x: x[1])\n",
        "                    worst_year_bench = min(benchmark_annual_returns.items(), key=lambda x: x[1])\n",
        "\n",
        "                    perf_data.append([\"最良年 (Benchmark)\",\n",
        "                                    \"\",\n",
        "                                    f\"{best_year_bench[0]}: {best_year_bench[1]*100:.2f}%\"])\n",
        "\n",
        "                    perf_data.append([\"最悪年 (Benchmark)\",\n",
        "                                    \"\",\n",
        "                                    f\"{worst_year_bench[0]}: {worst_year_bench[1]*100:.2f}%\"])\n",
        "\n",
        "                # 相関係数\n",
        "                if \"Portfolio_Return\" in self.results.columns and \"Benchmark_Return\" in self.results.columns:\n",
        "                    benchmark_corr = self.results[\"Portfolio_Return\"].corr(self.results[\"Benchmark_Return\"])\n",
        "                    perf_data.append([\"ベンチマーク相関\", f\"{benchmark_corr:.2f}\", \"1.00\"])\n",
        "\n",
        "                # データフレームに変換して出力\n",
        "                perf_df = pd.DataFrame(perf_data)\n",
        "\n",
        "                # 2. Performanceシート\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"performance\", True):\n",
        "                    perf_df.to_excel(writer, sheet_name=\"Performance\", index=False, header=False)\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 3. 簡易日次データシート (Daily Returns Simple)\n",
        "                #------------------------------------------------------\n",
        "                # 必要なのは日付とリターンのみ\n",
        "                # リターンは小数表示 (+3.57% -> 1.0357, -15.7% -> 0.843)\n",
        "\n",
        "                # 3. 簡易日次データシート (Daily Returns Simple)\n",
        "                daily_simple_data = []\n",
        "\n",
        "                daily_simple_data.append([\"日付\", \"ポートフォリオリターン\", \"ベンチマークリターン\"])\n",
        "\n",
        "                # ★ここで self.results_daily に切り替える\n",
        "                if not hasattr(self, 'results_daily') or self.results_daily is None:\n",
        "                    # results_daily がまだ存在しない場合の警告\n",
        "                    logger.warning(\"results_daily が存在しないため、Daily Returns Simpleを出力できません。\")\n",
        "                else:\n",
        "                    for idx, date in enumerate(self.results_daily.index):\n",
        "                        if idx == 0:\n",
        "                            continue  # 最初の行はリターンなし\n",
        "\n",
        "                        if (\"Portfolio_Return\" in self.results_daily.columns and\n",
        "                            \"Benchmark_Return\" in self.results_daily.columns):\n",
        "                            port_ret = self.results_daily[\"Portfolio_Return\"].iloc[idx]\n",
        "                            bench_ret = self.results_daily[\"Benchmark_Return\"].iloc[idx]\n",
        "\n",
        "                            # 欠損値処理など挿入する場合はここ\n",
        "\n",
        "                            daily_simple_data.append([\n",
        "                                date.strftime('%Y/%m/%d'),\n",
        "                                port_ret,\n",
        "                                bench_ret\n",
        "                            ])\n",
        "\n",
        "                # データフレームに変換して出力\n",
        "                daily_simple_df = pd.DataFrame(daily_simple_data[1:], columns=daily_simple_data[0])\n",
        "                # 3. Daily Returns Simple\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"daily_simple\", True):\n",
        "                    daily_simple_df.to_excel(writer, sheet_name=\"Daily Returns Simple\", index=False)\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 4. JSON設定シート (JSON Config)\n",
        "                #------------------------------------------------------\n",
        "                json_data = []\n",
        "\n",
        "                # モデル設定をJSONに変換\n",
        "                config = {\n",
        "                    \"time\": {\n",
        "                        \"start_year\": self.start_year,\n",
        "                        \"start_month\": self.start_month,\n",
        "                        \"end_year\": self.end_year,\n",
        "                        \"end_month\": self.end_month\n",
        "                    },\n",
        "                    \"assets\": {\n",
        "                        \"tickers\": self.tickers,  # 修正: self.tickers を使用\n",
        "                        \"single_absolute_momentum\": self.single_absolute_momentum,\n",
        "                        \"absolute_momentum_asset\": self.absolute_momentum_asset,\n",
        "                        \"out_of_market_assets\": self.out_of_market_assets,\n",
        "                        \"out_of_market_strategy\": self.out_of_market_strategy\n",
        "                    },\n",
        "                    \"performance\": {\n",
        "                        \"performance_periods\": self.performance_periods,\n",
        "                        \"lookback_period\": self.lookback_period,\n",
        "                        \"lookback_unit\": self.lookback_unit,\n",
        "                        \"multiple_periods\": [\n",
        "                            {\n",
        "                                \"length\": p.get(\"length\"),\n",
        "                                \"unit\": p.get(\"unit\"),\n",
        "                                \"weight\": p.get(\"weight\")\n",
        "                            } for p in self.multiple_periods if p.get(\"length\") is not None\n",
        "                        ],\n",
        "                        \"weighting_method\": self.weighting_method,\n",
        "                        \"assets_to_hold\": self.assets_to_hold\n",
        "                    },\n",
        "                    \"trade\": {\n",
        "                        \"trading_frequency\": self.trading_frequency,\n",
        "                        \"trade_execution\": self.trade_execution,\n",
        "                        \"benchmark_ticker\": self.benchmark_ticker\n",
        "                    },\n",
        "                    \"absolute_momentum\": {\n",
        "                        \"custom_period\": self.absolute_momentum_custom_period,\n",
        "                        \"period\": self.absolute_momentum_period\n",
        "                    }\n",
        "                }\n",
        "\n",
        "                # 生のJSON文字列\n",
        "                json_str = json.dumps(config, indent=2, ensure_ascii=False)\n",
        "                json_data.append([\"生のJSON設定:\"])\n",
        "                json_data.append([json_str])\n",
        "                json_data.append([\"\"])\n",
        "                json_data.append([\"\"])\n",
        "\n",
        "                # フラット化したJSON設定\n",
        "                json_data.append([\"フラット化した設定情報:\"])\n",
        "                json_data.append([\"パラメータ\", \"値\"])\n",
        "\n",
        "                # 再帰的にJSONをフラット化する関数\n",
        "                def flatten_json(json_obj, prefix=\"\"):\n",
        "                    items = []\n",
        "                    for key, value in json_obj.items():\n",
        "                        new_key = f\"{prefix}{key}\" if prefix else key\n",
        "                        if isinstance(value, dict):\n",
        "                            items.extend(flatten_json(value, f\"{new_key}.\"))\n",
        "                        elif isinstance(value, list):\n",
        "                            for i, item in enumerate(value):\n",
        "                                if isinstance(item, dict):\n",
        "                                    items.extend(flatten_json(item, f\"{new_key}[{i}].\"))\n",
        "                                else:\n",
        "                                    items.append((f\"{new_key}[{i}]\", item))\n",
        "                        else:\n",
        "                            items.append((new_key, value))\n",
        "                    return items\n",
        "\n",
        "                # フラット化したJSON設定を追加\n",
        "                for key, value in flatten_json(config):\n",
        "                    json_data.append([key, value])\n",
        "\n",
        "                # データフレームに変換して出力\n",
        "                json_df = pd.DataFrame(json_data)\n",
        "                # 4. JSON Config\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"json_config\", True):\n",
        "                    json_df.to_excel(writer, sheet_name=\"JSON Config\", index=False, header=False)\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 5. 月次リターンシート (Monthly Returns)\n",
        "                #------------------------------------------------------\n",
        "                # 5. 月次リターンシート (Monthly Returns)\n",
        "                # もし UI 側で monthly_returns がオフならシートを作らない\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"monthly_returns\", True):\n",
        "\n",
        "                    # 月次リターンテーブルをまだ生成していない場合、生成を試みる\n",
        "                    if not hasattr(self, 'pivot_monthly_returns') or self.pivot_monthly_returns is None:\n",
        "                        self.generate_monthly_returns_table(display_table=False)\n",
        "\n",
        "                    if hasattr(self, 'pivot_monthly_returns') and self.pivot_monthly_returns is not None:\n",
        "                        # 月次リターンをパーセント表示形式でコピー\n",
        "                        monthly_returns_df = self.pivot_monthly_returns.copy()\n",
        "\n",
        "                        # データフレームを出力\n",
        "                        monthly_returns_df.to_excel(writer, sheet_name=\"Monthly Returns\")\n",
        "                    else:\n",
        "                        # 月次リターンが生成できない場合は空のシートを作成\n",
        "                        pd.DataFrame().to_excel(writer, sheet_name=\"Monthly Returns\")\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 6. 詳細な日次データシート (Daily Returns Detailed)\n",
        "                #------------------------------------------------------\n",
        "                # すべての日次データを含む\n",
        "                daily_detailed_df = self.results.copy()\n",
        "\n",
        "                # カラム名を日本語に変更\n",
        "                column_mapping = {\n",
        "                    \"Portfolio_Value\": \"ポートフォリオ値\",\n",
        "                    \"Benchmark_Value\": \"ベンチマーク値\",\n",
        "                    \"Portfolio_Return\": \"ポートフォリオリターン\",\n",
        "                    \"Benchmark_Return\": \"ベンチマークリターン\",\n",
        "                    \"Portfolio_Cumulative\": \"ポートフォリオ累積\",\n",
        "                    \"Benchmark_Cumulative\": \"ベンチマーク累積\",\n",
        "                    \"Portfolio_Drawdown\": \"ポートフォリオドローダウン\",\n",
        "                    \"Benchmark_Drawdown\": \"ベンチマークドローダウン\",\n",
        "                    \"Portfolio_Peak\": \"ポートフォリオピーク\",\n",
        "                    \"Benchmark_Peak\": \"ベンチマークピーク\"\n",
        "                }\n",
        "\n",
        "                daily_detailed_df = daily_detailed_df.rename(columns=column_mapping)\n",
        "\n",
        "                # 相対リターンを追加\n",
        "                if \"ポートフォリオリターン\" in daily_detailed_df.columns and \"ベンチマークリターン\" in daily_detailed_df.columns:\n",
        "                    daily_detailed_df[\"相対リターン\"] = daily_detailed_df[\"ポートフォリオリターン\"] - daily_detailed_df[\"ベンチマークリターン\"]\n",
        "\n",
        "                # データフレームを出力\n",
        "                # 6. Daily Returns Detailed\n",
        "                if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"daily_detailed\", True):\n",
        "                    daily_detailed_df.to_excel(writer, sheet_name=\"Daily Returns Detailed\")\n",
        "\n",
        "                #------------------------------------------------------\n",
        "                # 7. 取引シート (Trades)\n",
        "                #------------------------------------------------------\n",
        "                if hasattr(self, 'positions') and self.positions:\n",
        "                    trades_data = []\n",
        "\n",
        "                    # ヘッダー行\n",
        "                    trades_data.append([\n",
        "                        \"シグナル判定日\", \"保有開始日\", \"保有終了日\", \"保有資産\",\n",
        "                        \"保有期間リターン\", \"モメンタム判定結果\",\n",
        "                        \"絶対モメンタムリターン\", \"リスクフリーレート\"\n",
        "                    ])\n",
        "\n",
        "                    # データ行\n",
        "                    for position in self.positions:\n",
        "                        signal_date = position.get(\"signal_date\").strftime('%Y/%m/%d') if position.get(\"signal_date\") else \"\"\n",
        "                        start_date = position.get(\"start_date\").strftime('%Y/%m/%d') if position.get(\"start_date\") else \"\"\n",
        "                        end_date = position.get(\"end_date\").strftime('%Y/%m/%d') if position.get(\"end_date\") else \"\"\n",
        "                        assets = \", \".join(position.get(\"assets\", []))\n",
        "                        ret = f\"{position.get('return')*100:.2f}%\" if position.get(\"return\") is not None else \"N/A\"\n",
        "                        message = position.get(\"message\", \"\")\n",
        "                        abs_return = f\"{position.get('abs_return')*100:.2f}%\" if position.get(\"abs_return\") is not None else \"N/A\"\n",
        "                        rfr_return = f\"{position.get('rfr_return')*100:.2f}%\" if position.get(\"rfr_return\") is not None else \"N/A\"\n",
        "\n",
        "                        trades_data.append([\n",
        "                            signal_date, start_date, end_date, assets,\n",
        "                            ret, message, abs_return, rfr_return\n",
        "                        ])\n",
        "\n",
        "                    # データフレームに変換して出力\n",
        "                    trades_df = pd.DataFrame(trades_data[1:], columns=trades_data[0])\n",
        "                    # 7. Trades\n",
        "                    if hasattr(self, 'excel_sheets_to_export') and self.excel_sheets_to_export.get(\"trades\", True):\n",
        "                        trades_df.to_excel(writer, sheet_name=\"Trades\", index=False)\n",
        "\n",
        "                else:\n",
        "                    # 取引情報がない場合は空のシートを作成\n",
        "                    pd.DataFrame().to_excel(writer, sheet_name=\"Trades\")\n",
        "\n",
        "            logger.info(f\"エクセルファイルを出力しました: {filename}\")\n",
        "\n",
        "            # ここが重要な変更部分：自動ダウンロード処理を削除し、代わりに情報を返す\n",
        "            return {\"filename\": filename, \"should_download\": auto_download}\n",
        "\n",
        "        except Exception as e:\n",
        "            logger.error(f\"エクセルファイル出力中にエラーが発生しました: {e}\")\n",
        "            import traceback\n",
        "            logger.error(traceback.format_exc())\n",
        "            return None\n",
        "\n",
        "# =============================================================================\n",
        "# 4. UI構築などの補助関数\n",
        "# =============================================================================\n",
        "# 4-1. 年月セレクター（時間設定）の作成\n",
        "def create_year_month_picker(year_value, month_value, description):\n",
        "    \"\"\"年と月を選択するカスタムウィジェットを作成\"\"\"\n",
        "    today = datetime.now()\n",
        "    years = list(range(1990, today.year + 1))\n",
        "    months = list(range(1, 13))\n",
        "\n",
        "    year_dropdown = widgets.Dropdown(\n",
        "        options=years,\n",
        "        value=year_value,\n",
        "        description='Year:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    month_dropdown = widgets.Dropdown(\n",
        "        options=months,\n",
        "        value=month_value,\n",
        "        description='Month:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    label = widgets.HTML(value=f\"<b>{description}</b>\")\n",
        "    return widgets.VBox([label, widgets.HBox([year_dropdown, month_dropdown])])\n",
        "\n",
        "# 4-2. 複数期間設定（Multiple Periods）のテーブル形式レイアウトの作成\n",
        "def create_multiple_periods_table(model):\n",
        "    \"\"\"複数期間設定をテーブル形式で表示するウィジェットを作成\"\"\"\n",
        "    # テーブルのスタイル定義 (変更なし)\n",
        "    table_style = \"\"\"\n",
        "    <style>\n",
        "    .periods-table {\n",
        "        border-collapse: collapse;\n",
        "        width: 100%;\n",
        "    }\n",
        "    .periods-table th, .periods-table td {\n",
        "        text-align: left;\n",
        "        padding: 8px;\n",
        "        border-bottom: 1px solid #ddd;\n",
        "    }\n",
        "    </style>\n",
        "    \"\"\"\n",
        "\n",
        "    # テーブルヘッダー (変更なし)\n",
        "    table_header = \"\"\"\n",
        "    <div style=\"overflow-x: auto;\">\n",
        "      <table class=\"periods-table\">\n",
        "        <thead>\n",
        "          <tr>\n",
        "            <th>Period</th>\n",
        "            <th>Length</th>\n",
        "            <th>Unit</th>\n",
        "            <th>Weights (%)</th>\n",
        "          </tr>\n",
        "        </thead>\n",
        "      </table>\n",
        "    </div>\n",
        "    \"\"\"\n",
        "\n",
        "    header_html = widgets.HTML(value=table_style + table_header)\n",
        "\n",
        "    # 行ウィジェットを作成 (変更なし)\n",
        "    rows = []\n",
        "    periods_count = min(5, len(model.multiple_periods))\n",
        "\n",
        "    for i in range(periods_count):\n",
        "        # 各期間の現在の設定値を取得\n",
        "        period = model.multiple_periods[i] if i < len(model.multiple_periods) else {\"length\": 3, \"unit\": \"Months\", \"weight\": 0}\n",
        "        length_val = period.get(\"length\", 3)\n",
        "        unit_val = period.get(\"unit\", \"Months\")\n",
        "        weight_val = period.get(\"weight\", 0)\n",
        "\n",
        "        # 期間番号\n",
        "        period_num = widgets.HTML(value=f\"#{i+1}\")\n",
        "\n",
        "        # 期間長（ドロップダウン）\n",
        "        length = widgets.Dropdown(\n",
        "            options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "            value=length_val,\n",
        "            layout=widgets.Layout(width='100px')\n",
        "        )\n",
        "\n",
        "        # 単位（ドロップダウン）\n",
        "        unit = widgets.Dropdown(\n",
        "            options=['Months', 'Days'],\n",
        "            value=unit_val,\n",
        "            layout=widgets.Layout(width='100px')\n",
        "        )\n",
        "\n",
        "        # 重み（数値入力）\n",
        "        weight = widgets.IntText(\n",
        "            value=weight_val,\n",
        "            min=0,\n",
        "            max=100,\n",
        "            step=5,\n",
        "            layout=widgets.Layout(width='80px')\n",
        "        )\n",
        "\n",
        "        # 値変更時のコールバック (変更なし)\n",
        "        def create_callback(idx, length_w, unit_w, weight_w):\n",
        "            def callback(change):\n",
        "                if idx >= len(model.multiple_periods):\n",
        "                    # 配列の拡張が必要な場合\n",
        "                    while len(model.multiple_periods) <= idx:\n",
        "                        model.multiple_periods.append({\"length\": None, \"unit\": None, \"weight\": 0})\n",
        "                model.multiple_periods[idx] = {\n",
        "                    \"length\": length_w.value,\n",
        "                    \"unit\": unit_w.value,\n",
        "                    \"weight\": weight_w.value\n",
        "                }\n",
        "            return callback\n",
        "\n",
        "        callback_fn = create_callback(i, length, unit, weight)\n",
        "        length.observe(callback_fn, names='value')\n",
        "        unit.observe(callback_fn, names='value')\n",
        "        weight.observe(callback_fn, names='value')\n",
        "\n",
        "        # 行を作成\n",
        "        row = widgets.HBox(\n",
        "            [period_num, length, unit, weight],\n",
        "            layout=widgets.Layout(\n",
        "                border_bottom='1px solid #ddd',\n",
        "                padding='8px',\n",
        "                align_items='center'\n",
        "            )\n",
        "        )\n",
        "        rows.append(row)\n",
        "\n",
        "    # その他の設定項目\n",
        "    weighting_method_label = widgets.HTML(value=\"<div style='margin-top: 20px'><b>Period Weighting:</b></div>\")\n",
        "    weighting_method = widgets.Dropdown(\n",
        "        options=['Weight Performance', 'Weight Rank Orders'],\n",
        "        value=model.weighting_method,\n",
        "        layout=widgets.Layout(width='200px')\n",
        "    )\n",
        "\n",
        "    def update_weighting_method(change):\n",
        "        model.weighting_method = change['new']\n",
        "\n",
        "    weighting_method.observe(update_weighting_method, names='value')\n",
        "\n",
        "    # すべてを組み合わせる\n",
        "    return widgets.VBox(\n",
        "        [header_html] + rows + [\n",
        "            weighting_method_label,\n",
        "            weighting_method\n",
        "        ]\n",
        "    )\n",
        "\n",
        "\n",
        "# =============================================================================\n",
        "# 5. Dual Momentum Model UI の作成（UI修正済み）\n",
        "# =============================================================================\n",
        "def create_dual_momentum_ui():\n",
        "    model = DualMomentumModel()\n",
        "    today = datetime.now()\n",
        "    # 時間設定：スライダーから年月セレクターに変更\n",
        "    start_picker = create_year_month_picker(2010, 1, 'Start Year')\n",
        "    end_picker = create_year_month_picker(today.year, today.month, 'End Year')\n",
        "\n",
        "    tickers = widgets.SelectMultiple(\n",
        "        options=['TQQQ', 'TECL', 'XLU', 'SPXL', 'QQQ'],\n",
        "        value=('TQQQ', 'TECL'),\n",
        "        description='Tickers:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    specify_tickers = widgets.Text(\n",
        "        value='',\n",
        "        description='Specify Tickers:',\n",
        "        placeholder='例: TQQQ,TECL,UPRO',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    single_absolute_momentum = widgets.RadioButtons(\n",
        "        options=['Yes', 'No'],\n",
        "        value='Yes',\n",
        "        description='Single absolute momentum:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    negative_relative_momentum = widgets.RadioButtons(\n",
        "        options=['Yes', 'No'],\n",
        "        value='No',\n",
        "        description='Negative relative momentum:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    absolute_momentum_asset = widgets.Dropdown(\n",
        "        options=['LQD', '^VIX', 'TMF'],\n",
        "        value='LQD',\n",
        "        description='Absolute momentum asset:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    specify_absolute_momentum_asset = widgets.Text(\n",
        "        value='',\n",
        "        description='Specify absolute momentum asset:',\n",
        "        placeholder='例: TLT',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    out_of_market_assets = widgets.SelectMultiple(\n",
        "        options=['XLU', 'GLD', 'SHY' ,'TMV' ,'TQQQ','Cash'],\n",
        "        value=(\"XLU\",),\n",
        "        description='Out of Market Assets:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    # 退避先資産の選択戦略（新規追加）\n",
        "    out_of_market_strategy = widgets.RadioButtons(\n",
        "        options=['Equal Weight', 'Top 1'],\n",
        "        value='Equal Weight',\n",
        "        description='退避先資産の選択:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    specify_out_of_market_asset = widgets.Text(\n",
        "        value='',\n",
        "        description='Specify out of market asset:',\n",
        "        placeholder='例: TQQQ,IEF',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    performance_periods = widgets.RadioButtons(\n",
        "        options=['Single Period', 'Multiple Periods'],\n",
        "        value='Multiple Periods',\n",
        "        description='Performance Periods:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_period = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=12,\n",
        "        description='Lookback period:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit:',\n",
        "        disabled=False\n",
        "    )\n",
        "    absolute_momentum_custom_period_checkbox = widgets.Checkbox(\n",
        "        value=False,\n",
        "        description='絶対モメンタムの期間をカスタマイズ',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    absolute_momentum_period = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=12,\n",
        "        description='Absolute Momentum period:',\n",
        "        style={'description_width': 'initial'},\n",
        "        disabled=True\n",
        "    )\n",
        "    lookback_period1 = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=2,\n",
        "        description='Length #1:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit1 = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit #1:',\n",
        "        disabled=False\n",
        "    )\n",
        "    weight1 = widgets.IntSlider(\n",
        "        value=20,\n",
        "        min=0,\n",
        "        max=100,\n",
        "        step=5,\n",
        "        description='Weight #1 (%):',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_period2 = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=6,\n",
        "        description='Length #2:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit2 = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit #2:',\n",
        "        disabled=False\n",
        "    )\n",
        "    weight2 = widgets.IntSlider(\n",
        "        value=20,\n",
        "        min=0,\n",
        "        max=100,\n",
        "        step=5,\n",
        "        description='Weight #2 (%):',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_period3 = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=12,\n",
        "        description='Length #3:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit3 = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit #3:',\n",
        "        disabled=False\n",
        "    )\n",
        "    weight3 = widgets.IntSlider(\n",
        "        value=60,\n",
        "        min=0,\n",
        "        max=100,\n",
        "        step=5,\n",
        "        description='Weight #3 (%):',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_period4 = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=3,\n",
        "        description='Length #4:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit4 = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit #4:',\n",
        "        disabled=False\n",
        "    )\n",
        "    weight4 = widgets.IntSlider(\n",
        "        value=0,\n",
        "        min=0,\n",
        "        max=100,\n",
        "        step=5,\n",
        "        description='Weight #4 (%):',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_period5 = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6,7,8,9,10,11,12,15,18,24,30,36],\n",
        "        value=3,\n",
        "        description='Length #5:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    lookback_unit5 = widgets.RadioButtons(\n",
        "        options=['Months', 'Days'],\n",
        "        value='Months',\n",
        "        description='Unit #5:',\n",
        "        disabled=False\n",
        "    )\n",
        "    weight5 = widgets.IntSlider(\n",
        "        value=0,\n",
        "        min=0,\n",
        "        max=100,\n",
        "        step=5,\n",
        "        description='Weight #5 (%):',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    assets_to_hold = widgets.Dropdown(\n",
        "        options=[1,2,3,4,5,6],\n",
        "        value=1,\n",
        "        description='Assets to hold:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    excel_export_checkbox = widgets.Checkbox(\n",
        "        value=False,\n",
        "        description='バックテスト後にエクセル出力',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    # Excel出力用のチェックボックス群\n",
        "    excel_label = widgets.HTML(value=\"<b>Excel Output Sheets:</b>\")\n",
        "\n",
        "    excel_cb_settings = widgets.Checkbox(value=True, description=\"Settingsシート\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_performance = widgets.Checkbox(value=True, description=\"Performanceシート\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_daily_simple = widgets.Checkbox(value=True, description=\"Daily Returns Simple\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_json_config = widgets.Checkbox(value=True, description=\"JSON Config\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_monthly_returns = widgets.Checkbox(value=True, description=\"Monthly Returns\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_daily_detailed = widgets.Checkbox(value=True, description=\"Daily Returns Detailed\", layout=widgets.Layout(width='250px'))\n",
        "    excel_cb_trades = widgets.Checkbox(value=True, description=\"Trades\", layout=widgets.Layout(width='250px'))\n",
        "\n",
        "    excel_sheets_vbox = widgets.VBox([\n",
        "        excel_label,\n",
        "        excel_cb_settings,\n",
        "        excel_cb_performance,\n",
        "        excel_cb_daily_simple,\n",
        "        excel_cb_json_config,\n",
        "        excel_cb_monthly_returns,\n",
        "        excel_cb_daily_detailed,\n",
        "        excel_cb_trades\n",
        "    ])\n",
        "\n",
        "    output_options = widgets.VBox([\n",
        "        widgets.HTML(value=\"<b>出力オプション:</b>\"),\n",
        "        widgets.Checkbox(value=True, description='パフォーマンスグラフ', layout=widgets.Layout(width='250px')),\n",
        "        widgets.Checkbox(value=True, description='年次リターンテーブル', layout=widgets.Layout(width='250px')),\n",
        "        widgets.Checkbox(value=True, description='月次リターンテーブル', layout=widgets.Layout(width='250px')),\n",
        "        widgets.Checkbox(value=True, description='モデルシグナル表示', layout=widgets.Layout(width='250px')),\n",
        "        widgets.Checkbox(value=True, description='パフォーマンスサマリー', layout=widgets.Layout(width='250px')),\n",
        "        widgets.Checkbox(value=True, description='取引履歴テーブル', layout=widgets.Layout(width='250px')),\n",
        "        excel_sheets_vbox  # 追加\n",
        "    ])\n",
        "\n",
        "    trading_frequency = widgets.Dropdown(\n",
        "        options=[\n",
        "            'Monthly',\n",
        "            'Bimonthly (hold: 1,3,5,7,9,11)',\n",
        "            'Bimonthly (hold: 2,4,6,8,10,12)',\n",
        "            'Quarterly (hold: 1,4,7,10)',\n",
        "            'Quarterly (hold: 2,5,8,11)',\n",
        "            'Quarterly (hold: 3,6,9,12)'\n",
        "        ],\n",
        "        value='Monthly',\n",
        "        description='Trading Frequency:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "\n",
        "    trade_execution_label = widgets.HTML(value='<p style=\"font-weight: bold;\">Trade Execution:</p>')\n",
        "    trade_execution_at_end = widgets.Checkbox(value=False, description='Trade at end of month price')\n",
        "    trade_execution_at_next = widgets.Checkbox(value=False, description='Trade at next close price')\n",
        "    trade_execution_at_next_open = widgets.Checkbox(value=True, description='Trade at next open price')\n",
        "\n",
        "    def update_trade_execution(change):\n",
        "        if change['owner'] == trade_execution_at_end and change['new']:\n",
        "            trade_execution_at_next.value = False\n",
        "            trade_execution_at_next_open.value = False\n",
        "        elif change['owner'] == trade_execution_at_next and change['new']:\n",
        "            trade_execution_at_end.value = False\n",
        "            trade_execution_at_next_open.value = False\n",
        "        elif change['owner'] == trade_execution_at_next_open and change['new']:\n",
        "            trade_execution_at_end.value = False\n",
        "            trade_execution_at_next.value = False\n",
        "        # いずれかが選択されていることを確認\n",
        "        if not (trade_execution_at_end.value or trade_execution_at_next.value or trade_execution_at_next_open.value):\n",
        "            change['owner'].value = True\n",
        "    trade_execution_at_end.observe(update_trade_execution, names='value')\n",
        "    trade_execution_at_next.observe(update_trade_execution, names='value')\n",
        "    trade_execution_at_next_open.observe(update_trade_execution, names='value')\n",
        "\n",
        "    def get_trade_execution():\n",
        "        if trade_execution_at_end.value:\n",
        "            return 'Trade at end of month price'\n",
        "        elif trade_execution_at_next_open.value:\n",
        "            return 'Trade at next open price'\n",
        "        else:\n",
        "            return 'Trade at next close price'\n",
        "\n",
        "    benchmark_ticker = widgets.Text(\n",
        "        value='SPY',\n",
        "        description='Benchmark Ticker:',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    # ストップロス設定のUIを追加（英語表記に統一）\n",
        "    # ストップロス設定のUIを追加（英語表記に統一）\n",
        "    stop_loss_enabled = widgets.Checkbox(\n",
        "        value=False,\n",
        "        description='Enable Stop Loss',\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    # スライダーから数値入力に変更\n",
        "    stop_loss_threshold = widgets.FloatText(\n",
        "        value=-0.10,\n",
        "        min=-0.99,\n",
        "        max=0.0,\n",
        "        step=0.01,\n",
        "        description='Stop Loss Threshold (%):',\n",
        "        disabled=True,\n",
        "        style={'description_width': 'initial'},\n",
        "        layout=widgets.Layout(width='250px')\n",
        "    )\n",
        "\n",
        "    # Keep Cash Position を配置変更\n",
        "    stop_loss_keep_cash = widgets.Checkbox(\n",
        "        value=False,\n",
        "        description='Keep Cash Position',\n",
        "        disabled=True,  # 初期状態は無効\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "\n",
        "    # 一部キャッシュ化の割合設定を追加\n",
        "    stop_loss_cash_percentage = widgets.Dropdown(\n",
        "        options=[10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n",
        "        value=50,\n",
        "        description='Cash Conversion Percentage (%):',\n",
        "        disabled=True,  # 初期状態は無効\n",
        "        style={'description_width': 'initial'},\n",
        "        layout=widgets.Layout(width='250px')\n",
        "    )\n",
        "\n",
        "    # ストップロス有効/無効の切り替え時の処理\n",
        "    def update_stop_loss_enabled(change):\n",
        "        stop_loss_threshold.disabled = not change['new']\n",
        "        stop_loss_keep_cash.disabled = not change['new']  # Keep Cash Positionも連動\n",
        "        stop_loss_cash_percentage.disabled = not change['new'] or not stop_loss_keep_cash.value  # キャッシュ割合も連動\n",
        "        model.stop_loss_enabled = change['new']\n",
        "\n",
        "    stop_loss_enabled.observe(update_stop_loss_enabled, names='value')\n",
        "\n",
        "    # Keep Cash Position オプションの切り替え時の処理 (修正)\n",
        "    def update_stop_loss_keep_cash(change):\n",
        "        stop_loss_cash_percentage.disabled = not change['new']  # キャッシュ割合の有効/無効を切り替え\n",
        "        model.stop_loss_keep_cash = change['new']\n",
        "\n",
        "    stop_loss_keep_cash.observe(update_stop_loss_keep_cash, names='value')\n",
        "\n",
        "    # キャッシュ割合変更時の処理 (追加)\n",
        "    def update_stop_loss_cash_percentage(change):\n",
        "        model.stop_loss_cash_percentage = change['new']\n",
        "\n",
        "    stop_loss_cash_percentage.observe(update_stop_loss_cash_percentage, names='value')\n",
        "\n",
        "    # ストップロス閾値変更時の処理\n",
        "    def update_stop_loss_threshold(change):\n",
        "        # 値の範囲確認（-0.99 ～ 0.0の範囲に収める）\n",
        "        value = change['new']\n",
        "        if value < -0.99:\n",
        "            stop_loss_threshold.value = -0.99\n",
        "        elif value > 0.0:\n",
        "            stop_loss_threshold.value = 0.0\n",
        "        else:\n",
        "            model.stop_loss_threshold = value\n",
        "\n",
        "    stop_loss_threshold.observe(update_stop_loss_threshold, names='value')\n",
        "\n",
        "    # ストップロス設定をボックスにまとめる\n",
        "    stop_loss_box = widgets.VBox([\n",
        "        widgets.HTML(value=\"<b>Stop Loss Settings:</b>\"),\n",
        "        stop_loss_enabled,\n",
        "        stop_loss_threshold,\n",
        "        stop_loss_keep_cash,\n",
        "        stop_loss_cash_percentage\n",
        "    ])\n",
        "\n",
        "    config_textarea = widgets.Textarea(\n",
        "        value=\"\",\n",
        "        description=\"Config JSON:\",\n",
        "        layout=widgets.Layout(width=\"100%\", height=\"150px\")\n",
        "    )\n",
        "    config_textarea.disabled = True\n",
        "    save_button = widgets.Button(\n",
        "        description=\"Save Settings\",\n",
        "        button_style=\"info\",\n",
        "        icon=\"save\"\n",
        "    )\n",
        "    load_button = widgets.Button(\n",
        "        description=\"Load Settings\",\n",
        "        button_style=\"warning\",\n",
        "        icon=\"upload\"\n",
        "    )\n",
        "    file_upload = widgets.FileUpload(\n",
        "        accept=\".json\",\n",
        "        multiple=False\n",
        "    )\n",
        "    uploaded_portfolio_names = set()\n",
        "    portfolio_list_label = widgets.HTML(value=\"<b>Uploaded Portfolios:</b><br>None\")\n",
        "    def update_portfolio_list_display():\n",
        "        if uploaded_portfolio_names:\n",
        "            portfolio_list_label.value = (\n",
        "                \"<b>Uploaded Portfolios:</b><br>\" +\n",
        "                \"<br>\".join(sorted(uploaded_portfolio_names))\n",
        "            )\n",
        "        else:\n",
        "            portfolio_list_label.value = \"<b>Uploaded Portfolios:</b><br>None\"\n",
        "    fetch_button = widgets.Button(\n",
        "        description='Fetch Data',\n",
        "        button_style='primary',\n",
        "        icon='download'\n",
        "    )\n",
        "    run_button = widgets.Button(\n",
        "        description='Run Backtest',\n",
        "        button_style='success',\n",
        "        icon='play'\n",
        "    )\n",
        "    output = widgets.Output()\n",
        "    def update_absolute_momentum_period(change):\n",
        "        absolute_momentum_period.disabled = not change['new']\n",
        "        model.absolute_momentum_custom_period = change['new']\n",
        "    absolute_momentum_custom_period_checkbox.observe(update_absolute_momentum_period, names='value')\n",
        "    validation_state = {\n",
        "        'start_year': True,\n",
        "        'start_month': True,\n",
        "        'end_year': True,\n",
        "        'end_month': True,\n",
        "        'tickers': True,\n",
        "        'single_absolute_momentum': True,\n",
        "        'absolute_momentum_asset': True,\n",
        "        'out_of_market_assets': True,\n",
        "        'lookback_period': True,\n",
        "        'lookback_unit': True,\n",
        "        'absolute_momentum_period': True,\n",
        "        'lookback_period1': True,\n",
        "        'lookback_unit1': True,\n",
        "        'weight1': True,\n",
        "        'lookback_period2': True,\n",
        "        'lookback_unit2': True,\n",
        "        'weight2': True,\n",
        "        'lookback_period3': True,\n",
        "        'lookback_unit3': True,\n",
        "        'weight3': True,\n",
        "        'lookback_period4': True,\n",
        "        'lookback_unit4': True,\n",
        "        'weight4': True,\n",
        "        'lookback_period5': True,\n",
        "        'lookback_unit5': True,\n",
        "        'weight5': True,\n",
        "        'benchmark_ticker': True,\n",
        "    }\n",
        "    validation_message = widgets.HTML(\n",
        "        value=\"\",\n",
        "        description=\"\",\n",
        "        style={'description_width': 'initial'}\n",
        "    )\n",
        "    def update_validation_message():\n",
        "        error_messages = []\n",
        "        warning_messages = []\n",
        "        valid, message = InputValidator.validate_date_range(\n",
        "            start_picker.children[1].children[0].value, start_picker.children[1].children[1].value,\n",
        "            end_picker.children[1].children[0].value, end_picker.children[1].children[1].value\n",
        "        )\n",
        "        if not valid:\n",
        "            error_messages.append(f\"📅 {message}\")\n",
        "            validation_state['start_year'] = False\n",
        "            validation_state['start_month'] = False\n",
        "            validation_state['end_year'] = False\n",
        "            validation_state['end_month'] = False\n",
        "        else:\n",
        "            validation_state['start_year'] = True\n",
        "            validation_state['start_month'] = True\n",
        "            validation_state['end_year'] = True\n",
        "            validation_state['end_month'] = True\n",
        "        if specify_tickers.value.strip():\n",
        "            ticker_list = [t.strip() for t in specify_tickers.value.split(',') if t.strip()]\n",
        "        else:\n",
        "            ticker_list = list(tickers.value)\n",
        "        valid, message = InputValidator.validate_ticker_symbols(ticker_list)\n",
        "        if not valid:\n",
        "            error_messages.append(f\"🏷️ {message}\")\n",
        "            validation_state['tickers'] = False\n",
        "        else:\n",
        "            validation_state['tickers'] = True\n",
        "        if single_absolute_momentum.value == 'Yes':\n",
        "            valid, message = InputValidator.validate_absolute_momentum_asset(absolute_momentum_asset.value)\n",
        "            if not valid:\n",
        "                error_messages.append(f\"🔄 {message}\")\n",
        "                validation_state['absolute_momentum_asset'] = False\n",
        "            else:\n",
        "                validation_state['absolute_momentum_asset'] = True\n",
        "        else:\n",
        "            validation_state['absolute_momentum_asset'] = True\n",
        "        out_assets = list(out_of_market_assets.value)\n",
        "        if specify_out_of_market_asset.value.strip():\n",
        "            out_assets = [s.strip() for s in specify_out_of_market_asset.value.split(',') if s.strip()]\n",
        "        valid, message = InputValidator.validate_out_of_market_assets(out_assets)\n",
        "        if not valid:\n",
        "            warning_messages.append(f\"⚠️ {message}\")\n",
        "            validation_state['out_of_market_assets'] = False\n",
        "        else:\n",
        "            validation_state['out_of_market_assets'] = True\n",
        "        if performance_periods.value == 'Single Period':\n",
        "            valid, message = InputValidator.validate_lookback_period(\n",
        "                lookback_period.value, lookback_unit.value\n",
        "            )\n",
        "            if not valid:\n",
        "                error_messages.append(f\"📊 {message}\")\n",
        "                validation_state['lookback_period'] = False\n",
        "            else:\n",
        "                validation_state['lookback_period'] = True\n",
        "            if absolute_momentum_custom_period_checkbox.value:\n",
        "                valid, message = InputValidator.validate_lookback_period(\n",
        "                    absolute_momentum_period.value, lookback_unit.value\n",
        "                )\n",
        "                if not valid:\n",
        "                    error_messages.append(f\"🔄 絶対モメンタム期間: {message}\")\n",
        "                    validation_state['absolute_momentum_period'] = False\n",
        "                else:\n",
        "                    validation_state['absolute_momentum_period'] = True\n",
        "        else:\n",
        "            period_widgets = [\n",
        "                (lookback_period1, lookback_unit1, weight1, 'lookback_period1', 'weight1'),\n",
        "                (lookback_period2, lookback_unit2, weight2, 'lookback_period2', 'weight2'),\n",
        "                (lookback_period3, lookback_unit3, weight3, 'lookback_period3', 'weight3'),\n",
        "                (lookback_period4, lookback_unit4, weight4, 'lookback_period4', 'weight4'),\n",
        "                (lookback_period5, lookback_unit5, weight5, 'lookback_period5', 'weight5')\n",
        "            ]\n",
        "            period_weights = []\n",
        "            for i, (period, unit, weight, period_key, weight_key) in enumerate(period_widgets):\n",
        "                if weight.value > 0:\n",
        "                    valid, message = InputValidator.validate_lookback_period(period.value, unit.value)\n",
        "                    if not valid:\n",
        "                        error_messages.append(f\"📊 期間 #{i+1}: {message}\")\n",
        "                        validation_state[period_key] = False\n",
        "                    else:\n",
        "                        validation_state[period_key] = True\n",
        "                    period_weights.append(weight.value)\n",
        "                    validation_state[weight_key] = True\n",
        "                else:\n",
        "                    validation_state[period_key] = True\n",
        "                    validation_state[weight_key] = True\n",
        "            if period_weights:\n",
        "                valid, message = InputValidator.validate_weights(period_weights)\n",
        "                if not valid:\n",
        "                    warning_messages.append(f\"⚠️ {message}\")\n",
        "                    for _, _, _, _, weight_key in period_widgets:\n",
        "                        validation_state[weight_key] = False\n",
        "            else:\n",
        "                error_messages.append(\"📊 複数期間モードでは、少なくとも1つの期間に正の重みを設定する必要があります。\")\n",
        "                for _, _, _, _, weight_key in period_widgets:\n",
        "                    validation_state[weight_key] = False\n",
        "        valid, message = InputValidator.validate_benchmark_ticker(benchmark_ticker.value)\n",
        "        if not valid:\n",
        "            error_messages.append(f\"📈 {message}\")\n",
        "            validation_state['benchmark_ticker'] = False\n",
        "        else:\n",
        "            validation_state['benchmark_ticker'] = True\n",
        "        update_widget_styles()\n",
        "        if error_messages:\n",
        "            error_html = \"<div style='color: red; margin-bottom: 10px;'><strong>⛔ エラー:</strong><ul>\"\n",
        "            for msg in error_messages:\n",
        "                error_html += f\"<li>{msg}</li>\"\n",
        "            error_html += \"</ul></div>\"\n",
        "            if warning_messages:\n",
        "                error_html += \"<div style='color: orange; margin-bottom: 10px;'><strong>⚠️ 警告:</strong><ul>\"\n",
        "                for msg in warning_messages:\n",
        "                    error_html += f\"<li>{msg}</li>\"\n",
        "                error_html += \"</ul></div>\"\n",
        "            validation_message.value = error_html\n",
        "        elif warning_messages:\n",
        "            warning_html = \"<div style='color: orange; margin-bottom: 10px;'><strong>⚠️ 警告:</strong><ul>\"\n",
        "            for msg in warning_messages:\n",
        "                warning_html += f\"<li>{msg}</li>\"\n",
        "            warning_html += \"</ul></div>\"\n",
        "            validation_message.value = warning_html\n",
        "        else:\n",
        "            validation_message.value = \"<div style='color: green; margin-bottom: 10px;'><strong>✅ 全ての入力が有効です</strong></div>\"\n",
        "    error_style = {'description_width': 'initial', 'border': '1px solid red'}\n",
        "    normal_style = {'description_width': 'initial'}\n",
        "    def update_widget_styles():\n",
        "        # 時間設定：start_pickerとend_pickerの子ウィジェットのスタイル更新\n",
        "        start_year_widget = start_picker.children[1].children[0]\n",
        "        start_month_widget = start_picker.children[1].children[1]\n",
        "        end_year_widget = end_picker.children[1].children[0]\n",
        "        end_month_widget = end_picker.children[1].children[1]\n",
        "        start_year_widget.style = error_style if not validation_state['start_year'] else normal_style\n",
        "        start_year_widget.description = '❌ Year:' if not validation_state['start_year'] else 'Year:'\n",
        "        start_month_widget.style = error_style if not validation_state['start_month'] else normal_style\n",
        "        start_month_widget.description = '❌ Month:' if not validation_state['start_month'] else 'Month:'\n",
        "        end_year_widget.style = error_style if not validation_state['end_year'] else normal_style\n",
        "        end_year_widget.description = '❌ Year:' if not validation_state['end_year'] else 'Year:'\n",
        "        end_month_widget.style = error_style if not validation_state['end_month'] else normal_style\n",
        "        end_month_widget.description = '❌ Mon:' if not validation_state['end_month'] else 'Month:'\n",
        "        tickers.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state['tickers'] else {'description_width': 'initial'}\n",
        "        tickers.description = '❌ Tickers:' if not validation_state['tickers'] else 'Tickers:'\n",
        "        if single_absolute_momentum.value == 'Yes':\n",
        "            absolute_momentum_asset.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state['absolute_momentum_asset'] else {'description_width': 'initial'}\n",
        "            absolute_momentum_asset.description = '❌ Absolute momentum asset:' if not validation_state['absolute_momentum_asset'] else 'Absolute momentum asset:'\n",
        "        else:\n",
        "            absolute_momentum_asset.style = normal_style\n",
        "        benchmark_ticker.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state['benchmark_ticker'] else {'description_width': 'initial'}\n",
        "        benchmark_ticker.description = '❌ Benchmark Ticker:' if not validation_state['benchmark_ticker'] else 'Benchmark Ticker:'\n",
        "        if performance_periods.value == 'Single Period':\n",
        "            lookback_period.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state['lookback_period'] else {'description_width': 'initial'}\n",
        "            lookback_period.description = '❌ Lookback period:' if not validation_state['lookback_period'] else 'Lookback period:'\n",
        "            if absolute_momentum_custom_period_checkbox.value:\n",
        "                absolute_momentum_period.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state['absolute_momentum_period'] else {'description_width': 'initial'}\n",
        "                absolute_momentum_period.description = '❌ Absolute Momentum period:' if not validation_state['absolute_momentum_period'] else 'Absolute Momentum period:'\n",
        "        else:\n",
        "            period_widgets = [\n",
        "                (lookback_period1, 'lookback_period1', 'Length #1:'),\n",
        "                (lookback_period2, 'lookback_period2', 'Length #2:'),\n",
        "                (lookback_period3, 'lookback_period3', 'Length #3:'),\n",
        "                (lookback_period4, 'lookback_period4', 'Length #4:'),\n",
        "                (lookback_period5, 'lookback_period5', 'Length #5:')\n",
        "            ]\n",
        "            for widget, key, desc in period_widgets:\n",
        "                widget.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state[key] else {'description_width': 'initial'}\n",
        "                widget.description = f'❌ {desc.replace(\"❌ \", \"\")}' if not validation_state[key] else desc\n",
        "            weight_widgets = [\n",
        "                (weight1, 'weight1', 'Weight #1 (%):'),\n",
        "                (weight2, 'weight2', 'Weight #2 (%):'),\n",
        "                (weight3, 'weight3', 'Weight #3 (%):'),\n",
        "                (weight4, 'weight4', 'Weight #4 (%):'),\n",
        "                (weight5, 'weight5', 'Weight #5 (%):')\n",
        "            ]\n",
        "            for widget, key, desc in weight_widgets:\n",
        "                widget.style = {'description_width': 'initial', 'border': '1px solid red'} if not validation_state[key] else {'description_width': 'initial'}\n",
        "                widget.description = f'❌ {desc.replace(\"❌ \", \"\")}' if not validation_state[key] else desc\n",
        "    def connect_validation_callbacks():\n",
        "        start_picker.children[1].children[0].observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        start_picker.children[1].children[1].observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        end_picker.children[1].children[0].observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        end_picker.children[1].children[1].observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        tickers.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        single_absolute_momentum.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        absolute_momentum_asset.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        out_of_market_assets.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        specify_out_of_market_asset.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        performance_periods.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        lookback_period.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        lookback_unit.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        absolute_momentum_custom_period_checkbox.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        absolute_momentum_period.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        period_widgets = [\n",
        "            (lookback_period1, lookback_unit1, weight1),\n",
        "            (lookback_period2, lookback_unit2, weight2),\n",
        "            (lookback_period3, lookback_unit3, weight3),\n",
        "            (lookback_period4, lookback_unit4, weight4),\n",
        "            (lookback_period5, lookback_unit5, weight5)\n",
        "        ]\n",
        "        for period, unit, weight in period_widgets:\n",
        "            period.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "            unit.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "            weight.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "        benchmark_ticker.observe(lambda change: update_validation_message() if change['name'] == 'value' else None, names='value')\n",
        "    connect_validation_callbacks()\n",
        "    update_validation_message()\n",
        "\n",
        "    def on_save_clicked(b):\n",
        "        config = {\n",
        "            \"time\": {\n",
        "                \"start_year\": start_picker.children[1].children[0].value,\n",
        "                \"start_month\": start_picker.children[1].children[1].value,\n",
        "                \"end_year\": end_picker.children[1].children[0].value,\n",
        "                \"end_month\": end_picker.children[1].children[1].value\n",
        "            },\n",
        "            \"assets\": {\n",
        "                \"tickers\": tickers.value,\n",
        "                \"single_absolute_momentum\": single_absolute_momentum.value,\n",
        "                \"absolute_momentum_asset\": absolute_momentum_asset.value,\n",
        "                \"out_of_market_assets\": list(out_of_market_assets.value),\n",
        "                \"specify_out_of_market_asset\": specify_out_of_market_asset.value,\n",
        "                \"out_of_market_strategy\": out_of_market_strategy.value\n",
        "            },\n",
        "            \"performance\": {\n",
        "                \"performance_periods\": performance_periods.value,\n",
        "                \"lookback_period\": lookback_period.value,\n",
        "                \"lookback_unit\": lookback_unit.value,\n",
        "                \"multiple_periods\": {\n",
        "                    \"period1\": {\"lookback_period\": lookback_period1.value, \"lookback_unit\": lookback_unit1.value, \"weight\": weight1.value},\n",
        "                    \"period2\": {\"lookback_period\": lookback_period2.value, \"lookback_unit\": lookback_unit2.value, \"weight\": weight2.value},\n",
        "                    \"period3\": {\"lookback_period\": lookback_period3.value, \"lookback_unit\": lookback_unit3.value, \"weight\": weight3.value},\n",
        "                    \"period4\": {\"lookback_period\": lookback_period4.value, \"lookback_unit\": lookback_unit4.value, \"weight\": weight4.value},\n",
        "                    \"period5\": {\"lookback_period\": lookback_period5.value, \"lookback_unit\": lookback_unit5.value, \"weight\": weight5.value}\n",
        "                },\n",
        "                \"weighting_method\": performance_periods.value == 'Single Period' and lookback_period.value or model.weighting_method,\n",
        "                \"assets_to_hold\": assets_to_hold.value\n",
        "            },\n",
        "            \"trade\": {\n",
        "                \"trading_frequency\": trading_frequency.value,\n",
        "                \"trade_execution\": get_trade_execution(),\n",
        "                \"benchmark_ticker\": benchmark_ticker.value\n",
        "            },\n",
        "            \"absolute_momentum\": {\n",
        "                \"custom_period\": model.absolute_momentum_custom_period,\n",
        "                \"period\": absolute_momentum_period.value\n",
        "            },\n",
        "            \"stop_loss\": {\n",
        "                \"enabled\": stop_loss_enabled.value,\n",
        "                \"threshold\": stop_loss_threshold.value,\n",
        "                \"keep_cash\": stop_loss_keep_cash.value,\n",
        "                \"cash_percentage\": stop_loss_cash_percentage.value\n",
        "            }\n",
        "        }\n",
        "        json_str = json.dumps(config, ensure_ascii=False, indent=2)\n",
        "        config_textarea.value = json_str\n",
        "        with output:\n",
        "            clear_output()\n",
        "            print(\"✅ Settings saved in JSON format.\")\n",
        "    save_button.on_click(on_save_clicked)\n",
        "    def on_load_clicked(b):\n",
        "        nonlocal file_upload\n",
        "        if len(file_upload.value) == 0:\n",
        "            with output:\n",
        "                clear_output()\n",
        "                print(\"❌ Please upload a settings file first.\")\n",
        "            return\n",
        "        filename = list(file_upload.value.keys())[0]\n",
        "        uploaded_file = file_upload.value[filename]\n",
        "        portfolio_name = os.path.splitext(filename.strip().lower())[0]\n",
        "        if portfolio_name in uploaded_portfolio_names:\n",
        "            with output:\n",
        "                clear_output()\n",
        "                print(\"⚠️ This portfolio has already been uploaded.\")\n",
        "            return\n",
        "        uploaded_portfolio_names.add(portfolio_name)\n",
        "        try:\n",
        "            config = json.loads(uploaded_file['content'].decode(\"utf-8\"))\n",
        "        except Exception as e:\n",
        "            with output:\n",
        "                clear_output()\n",
        "                print(f\"❌ Failed to load settings file: {e}\")\n",
        "            return\n",
        "        apply_config_to_ui(config)\n",
        "        update_portfolio_list_display()\n",
        "        with output:\n",
        "            clear_output()\n",
        "            print(\"✅ Settings loaded successfully.\")\n",
        "        new_file_upload = widgets.FileUpload(accept=\".json\", multiple=False)\n",
        "        config_buttons.children = [save_button, load_button, new_file_upload]\n",
        "        file_upload = new_file_upload\n",
        "    load_button.on_click(on_load_clicked)\n",
        "\n",
        "    def apply_config_to_ui(config):\n",
        "        if \"time\" in config:\n",
        "            start_picker.children[1].children[0].value = config[\"time\"].get(\"start_year\", start_picker.children[1].children[0].value)\n",
        "            start_picker.children[1].children[1].value = config[\"time\"].get(\"start_month\", start_picker.children[1].children[1].value)\n",
        "            end_picker.children[1].children[0].value = config[\"time\"].get(\"end_year\", end_picker.children[1].children[0].value)\n",
        "            end_picker.children[1].children[1].value = config[\"time\"].get(\"end_month\", end_picker.children[1].children[1].value)\n",
        "\n",
        "        if \"assets\" in config:\n",
        "            # タプルに変換して設定（SelectMultipleはタプルを期待）\n",
        "            tickers_list = config[\"assets\"].get(\"tickers\", [])\n",
        "            # リストでない場合は変換\n",
        "            if not isinstance(tickers_list, list):\n",
        "                tickers_list = [tickers_list] if tickers_list else []\n",
        "            tickers.value = tuple(tickers_list)\n",
        "\n",
        "            # Specify Tickersの設定\n",
        "            specify_tickers.value = config[\"assets\"].get(\"specify_tickers\", \"\")\n",
        "\n",
        "            specify_tickers.value = config[\"assets\"].get(\"specify_tickers\", specify_tickers.value)\n",
        "\n",
        "            single_absolute_momentum.value = config[\"assets\"].get(\"single_absolute_momentum\", single_absolute_momentum.value)\n",
        "\n",
        "            # シンプルな実装\n",
        "            absolute_momentum_asset.value = config[\"assets\"].get(\"absolute_momentum_asset\", absolute_momentum_asset.value)\n",
        "            specify_absolute_momentum_asset.value = config[\"assets\"].get(\"specify_absolute_momentum_asset\", specify_absolute_momentum_asset.value)\n",
        "\n",
        "            out_of_market_assets.value = tuple(config[\"assets\"].get(\"out_of_market_assets\", list(out_of_market_assets.value)))\n",
        "            specify_out_of_market_asset.value = config[\"assets\"].get(\"specify_out_of_market_asset\", specify_out_of_market_asset.value)\n",
        "            out_of_market_strategy.value = config[\"assets\"].get(\"out_of_market_strategy\", out_of_market_strategy.value)\n",
        "        if \"performance\" in config:\n",
        "            performance_periods.value = config[\"performance\"].get(\"performance_periods\", performance_periods.value)\n",
        "            lookback_period.value = config[\"performance\"].get(\"lookback_period\", lookback_period.value)\n",
        "            lookback_unit.value = config[\"performance\"].get(\"lookback_unit\", lookback_unit.value)\n",
        "            if \"multiple_periods\" in config[\"performance\"]:\n",
        "                mp = config[\"performance\"][\"multiple_periods\"]\n",
        "                period1 = mp.get(\"period1\", {})\n",
        "                lookback_period1.value = period1.get(\"lookback_period\", lookback_period1.value)\n",
        "                lookback_unit1.value = period1.get(\"lookback_unit\", lookback_unit1.value)\n",
        "                weight1.value = period1.get(\"weight\", weight1.value)\n",
        "                period2 = mp.get(\"period2\", {})\n",
        "                lookback_period2.value = period2.get(\"lookback_period\", lookback_period2.value)\n",
        "                lookback_unit2.value = period2.get(\"lookback_unit\", lookback_unit2.value)\n",
        "                weight2.value = period2.get(\"weight\", weight2.value)\n",
        "                period3 = mp.get(\"period3\", {})\n",
        "                lookback_period3.value = period3.get(\"lookback_period\", lookback_period3.value)\n",
        "                lookback_unit3.value = period3.get(\"lookback_unit\", lookback_unit3.value)\n",
        "                weight3.value = period3.get(\"weight\", weight3.value)\n",
        "                period4 = mp.get(\"period4\", {})\n",
        "                lookback_period4.value = period4.get(\"lookback_period\", lookback_period4.value)\n",
        "                lookback_unit4.value = period4.get(\"lookback_unit\", lookback_unit4.value)\n",
        "                weight4.value = period4.get(\"weight\", weight4.value)\n",
        "                period5 = mp.get(\"period5\", {})\n",
        "                lookback_period5.value = period5.get(\"lookback_period\", lookback_period5.value)\n",
        "                lookback_unit5.value = period5.get(\"lookback_unit\", lookback_unit5.value)\n",
        "                weight5.value = period5.get(\"weight\", weight5.value)\n",
        "\n",
        "        if \"trade\" in config:\n",
        "            trading_frequency.value = config[\"trade\"].get(\"trading_frequency\", trading_frequency.value)\n",
        "            trade_exec = config[\"trade\"].get(\"trade_execution\", \"Trade at end of month price\")\n",
        "\n",
        "            # すべてのチェックボックスをリセット\n",
        "            trade_execution_at_end.value = False\n",
        "            trade_execution_at_next.value = False\n",
        "            trade_execution_at_next_open.value = False\n",
        "\n",
        "            # 該当するオプションを選択\n",
        "            if trade_exec == \"Trade at end of month price\":\n",
        "                trade_execution_at_end.value = True\n",
        "            elif trade_exec == \"Trade at next open price\":\n",
        "                trade_execution_at_next_open.value = True\n",
        "            else:  # \"Trade at next close price\"がデフォルト\n",
        "                trade_execution_at_next.value = True\n",
        "\n",
        "            benchmark_ticker.value = config[\"trade\"].get(\"benchmark_ticker\", benchmark_ticker.value)\n",
        "\n",
        "        if \"absolute_momentum\" in config:\n",
        "            abs_config = config[\"absolute_momentum\"]\n",
        "            absolute_momentum_custom_period_checkbox.value = abs_config.get(\"custom_period\", model.absolute_momentum_custom_period)\n",
        "            absolute_momentum_period.value = abs_config.get(\"period\", absolute_momentum_period.value)\n",
        "\n",
        "        if \"stop_loss\" in config:\n",
        "            stop_loss_enabled.value = config[\"stop_loss\"].get(\"enabled\", False)\n",
        "            stop_loss_threshold.value = config[\"stop_loss\"].get(\"threshold\", -0.10)\n",
        "            stop_loss_keep_cash.value = config[\"stop_loss\"].get(\"keep_cash\", False)\n",
        "            stop_loss_cash_percentage.value = config[\"stop_loss\"].get(\"cash_percentage\", 50)\n",
        "\n",
        "            model.absolute_momentum_custom_period = absolute_momentum_custom_period_checkbox.value\n",
        "            model.absolute_momentum_period = absolute_momentum_period.value\n",
        "\n",
        "    def on_fetch_clicked(b):\n",
        "        with output:\n",
        "            clear_output()\n",
        "            update_validation_message()\n",
        "            if any(not state for state in validation_state.values()):\n",
        "                print(\"⛔ 入力エラーがあります。エラーを修正してから再試行してください。\")\n",
        "                display(validation_message)\n",
        "                return\n",
        "            model.momentum_cache = {}\n",
        "            # 時間設定の取得：カスタム年月セレクターから値を取得\n",
        "            model.start_year = start_picker.children[1].children[0].value\n",
        "            model.start_month = start_picker.children[1].children[1].value\n",
        "            model.end_year = end_picker.children[1].children[0].value\n",
        "            model.end_month = end_picker.children[1].children[1].value\n",
        "            if specify_tickers.value.strip():\n",
        "                model.tickers = [t.strip() for t in specify_tickers.value.split(',') if t.strip()]\n",
        "            else:\n",
        "                model.tickers = list(tickers.value)\n",
        "\n",
        "            model.single_absolute_momentum = single_absolute_momentum.value\n",
        "            # 絶対モメンタム資産の設定（Out of Market Assetsと同じロジック）\n",
        "            if specify_absolute_momentum_asset.value.strip():\n",
        "                model.absolute_momentum_asset = specify_absolute_momentum_asset.value.strip()\n",
        "            else:\n",
        "                model.absolute_momentum_asset = absolute_momentum_asset.value\n",
        "            model.negative_relative_momentum = negative_relative_momentum.value\n",
        "            if specify_out_of_market_asset.value.strip():\n",
        "                model.out_of_market_assets = [s.strip() for s in specify_out_of_market_asset.value.split(',') if s.strip()]\n",
        "            else:\n",
        "                model.out_of_market_assets = list(out_of_market_assets.value)\n",
        "\n",
        "            model.out_of_market_strategy = out_of_market_strategy.value\n",
        "            model.performance_periods = performance_periods.value\n",
        "            if model.performance_periods == 'Single Period':\n",
        "                model.lookback_period = lookback_period.value\n",
        "                model.lookback_unit = lookback_unit.value\n",
        "            else:\n",
        "                # 複数期間設定はcreate_multiple_periods_tableウィジェットのコールバックでmodel.multiple_periodsが更新されているため追加処理不要\n",
        "                model.multiple_periods_count = sum(1 for p in model.multiple_periods if p.get(\"weight\", 0) > 0)\n",
        "            model.assets_to_hold = assets_to_hold.value\n",
        "            model.trading_frequency = trading_frequency.value\n",
        "            model.trade_execution = get_trade_execution()\n",
        "            model.benchmark_ticker = benchmark_ticker.value\n",
        "            model.absolute_momentum_custom_period = absolute_momentum_custom_period_checkbox.value\n",
        "            model.absolute_momentum_period = absolute_momentum_period.value\n",
        "\n",
        "            model.stop_loss_enabled = stop_loss_enabled.value\n",
        "            model.stop_loss_threshold = stop_loss_threshold.value\n",
        "            model.stop_loss_keep_cash = stop_loss_keep_cash.value\n",
        "\n",
        "            valid, errors, warnings_list = model.validate_parameters()\n",
        "            if not valid:\n",
        "                print(\"⚠️ Parameter validation failed. Please correct the following errors:\")\n",
        "                for error in errors:\n",
        "                    print(f\"  ❌ {error}\")\n",
        "                return\n",
        "            if warnings_list:\n",
        "                print(\"⚠️ Warnings:\")\n",
        "                for warning in warnings_list:\n",
        "                    print(f\"  ⚠️ {warning}\")\n",
        "                print(\"\")\n",
        "            print(\"🔄 Fetching data...\")\n",
        "            success = model.fetch_data()\n",
        "            if not success:\n",
        "                print(\"❌ Data fetch failed. Please review your settings.\")\n",
        "                return\n",
        "            cache_info = model.diagnose_cache()\n",
        "            if cache_info[\"status\"] != \"ok\" and cache_info[\"status\"] != \"empty\":\n",
        "                print(f\"\\n⚠️ キャッシュ警告: {cache_info['message']}\")\n",
        "    fetch_button.on_click(on_fetch_clicked)\n",
        "\n",
        "    def on_run_clicked(b):\n",
        "        with output:\n",
        "            clear_output()\n",
        "            update_validation_message()\n",
        "            if any(not state for state in validation_state.values()):\n",
        "                print(\"⛔ 入力エラーがあります。エラーを修正してから再試行してください。\")\n",
        "                display(validation_message)\n",
        "                return\n",
        "\n",
        "            # (★) ここで全結果をまとめてクリア\n",
        "            model.clear_results()\n",
        "\n",
        "            print(\"🧹 前回の結果データを完全にクリアしています...\")\n",
        "\n",
        "            # ---- 以下は各種パラメータを model に設定する流れ ----\n",
        "            model.start_year = start_picker.children[1].children[0].value\n",
        "            model.start_month = start_picker.children[1].children[1].value\n",
        "            model.end_year = end_picker.children[1].children[0].value\n",
        "            model.end_month = end_picker.children[1].children[1].value\n",
        "\n",
        "            if specify_tickers.value.strip():\n",
        "                model.tickers = [t.strip() for t in specify_tickers.value.split(',') if t.strip()]\n",
        "            else:\n",
        "                model.tickers = list(tickers.value)\n",
        "\n",
        "            model.single_absolute_momentum = single_absolute_momentum.value\n",
        "            # 絶対モメンタム資産の設定（Out of Market Assetsと同じロジック）\n",
        "            if specify_absolute_momentum_asset.value.strip():\n",
        "                model.absolute_momentum_asset = specify_absolute_momentum_asset.value.strip()\n",
        "            else:\n",
        "                model.absolute_momentum_asset = absolute_momentum_asset.value\n",
        "\n",
        "            if specify_out_of_market_asset.value.strip():\n",
        "                model.out_of_market_assets = [\n",
        "                    s.strip() for s in specify_out_of_market_asset.value.split(',')\n",
        "                    if s.strip()\n",
        "                ]\n",
        "            else:\n",
        "                model.out_of_market_assets = list(out_of_market_assets.value)\n",
        "            model.out_of_market_strategy = out_of_market_strategy.value\n",
        "            model.performance_periods = performance_periods.value\n",
        "            if model.performance_periods == 'Single Period':\n",
        "                model.lookback_period = lookback_period.value\n",
        "                model.lookback_unit = lookback_unit.value\n",
        "            else:\n",
        "                model.multiple_periods_count = sum(\n",
        "                    1 for p in model.multiple_periods if p.get(\"weight\", 0) > 0\n",
        "                )\n",
        "\n",
        "            model.assets_to_hold = assets_to_hold.value\n",
        "            model.trading_frequency = trading_frequency.value\n",
        "            model.trade_execution = get_trade_execution()\n",
        "            model.benchmark_ticker = benchmark_ticker.value\n",
        "\n",
        "            model.absolute_momentum_custom_period = absolute_momentum_custom_period_checkbox.value\n",
        "            model.absolute_momentum_period = absolute_momentum_period.value\n",
        "\n",
        "            summary_lines = []\n",
        "            summary_lines.append(\"--- Running Backtest ---\")\n",
        "            summary_lines.append(f\"Period: {start_picker.children[1].children[0].value}/{start_picker.children[1].children[1].value} - {end_picker.children[1].children[0].value}/{end_picker.children[1].children[1].value}\")\n",
        "            summary_lines.append(f\"Tickers: {model.tickers}\")\n",
        "            summary_lines.append(f\"Single absolute momentum: {model.single_absolute_momentum}\")\n",
        "            summary_lines.append(f\"Absolute momentum asset: {model.absolute_momentum_asset}\")\n",
        "            summary_lines.append(f\"Out of market assets: {model.out_of_market_assets}\")\n",
        "            summary_lines.append(f\"Performance periods: {model.performance_periods}\")\n",
        "            if model.performance_periods == \"Multiple Periods\":\n",
        "                summary_lines.append(\"Multiple period evaluation:\")\n",
        "                for idx, period in enumerate(model.multiple_periods, start=1):\n",
        "                    if period[\"length\"] is not None and period[\"weight\"] > 0:\n",
        "                        summary_lines.append(f\"  Period #{idx}: {period['length']} {period['unit']} (Weight: {period['weight']}%)\")\n",
        "            else:\n",
        "                summary_lines.append(f\"Lookback period: {model.lookback_period} {model.lookback_unit}\")\n",
        "                if model.absolute_momentum_custom_period:\n",
        "                    summary_lines.append(f\"Absolute momentum period: {model.absolute_momentum_period} {model.lookback_unit}\")\n",
        "\n",
        "            summary_lines.append(f\"Weighting method: {model.weighting_method}\")\n",
        "            summary_lines.append(f\"Assets to hold: {model.assets_to_hold}\")\n",
        "            summary_lines.append(f\"Trading frequency: {model.trading_frequency}\")\n",
        "            summary_lines.append(f\"Trade execution: {model.trade_execution}\")\n",
        "            summary_lines.append(f\"Benchmark: {model.benchmark_ticker}\")\n",
        "\n",
        "            # ストップロス設定の表示\n",
        "            if model.stop_loss_enabled:\n",
        "                stop_loss_info = f\"Stop Loss: Enabled ({model.stop_loss_threshold*100:.1f}%)\"\n",
        "                if model.stop_loss_keep_cash:\n",
        "                    stop_loss_info += \", Keep Cash Position\"\n",
        "                summary_lines.append(stop_loss_info)\n",
        "            else:\n",
        "                summary_lines.append(f\"Stop Loss: Disabled\")\n",
        "\n",
        "            user_start = datetime(model.start_year, model.start_month, 1)\n",
        "            _, last_day = calendar.monthrange(model.end_year, model.end_month)\n",
        "            user_end = datetime(model.end_year, model.end_month, last_day)\n",
        "\n",
        "            if model.valid_period_start is not None:\n",
        "                if model.performance_periods == \"Single Period\" and model.lookback_unit == \"Months\":\n",
        "                    effective_start = model.valid_period_start + relativedelta(months=model.lookback_period)\n",
        "                elif model.performance_periods == \"Multiple Periods\":\n",
        "                    candidates = []\n",
        "                    for period in model.multiple_periods:\n",
        "                        if period[\"length\"] is not None and period[\"weight\"] > 0:\n",
        "                            if period[\"unit\"] == \"Months\":\n",
        "                                candidate = model.valid_period_start + relativedelta(months=period[\"length\"])\n",
        "                            else:\n",
        "                                candidate = model.valid_period_start + timedelta(days=period[\"length\"])\n",
        "                            candidates.append(candidate)\n",
        "                    effective_start = max(candidates) if candidates else model.valid_period_start\n",
        "                else:\n",
        "                    effective_start = model.valid_period_start\n",
        "\n",
        "                if user_start < effective_start:\n",
        "                    summary_lines.append(f\"\\nWarning: The user-specified start date {user_start.strftime('%Y-%m-%d')} is\")\n",
        "                    if model.performance_periods == \"Single Period\":\n",
        "                        summary_lines.append(f\"earlier than required for the lookback period ({model.lookback_period} months).\")\n",
        "                    else:\n",
        "                        summary_lines.append(f\"earlier than required for the longest lookback period.\")\n",
        "                    summary_lines.append(f\"Calculations will start from {effective_start.strftime('%Y-%m-%d')}.\")\n",
        "                    user_start = effective_start\n",
        "                    model.start_year = user_start.year\n",
        "                    model.start_month = user_start.month\n",
        "\n",
        "                if model.valid_period_end is not None and user_end > model.valid_period_end:\n",
        "                    summary_lines.append(f\"\\nWarning: The user-specified end date {user_end.strftime('%Y-%m-%d')} is\")\n",
        "                    summary_lines.append(f\"later than the common data end date {model.valid_period_end.strftime('%Y-%m-%d')}.\")\n",
        "            print(\"\\n\".join(summary_lines))\n",
        "            print(\"--- Running Backtest ---\")\n",
        "\n",
        "            results = model._run_backtest_next_close(user_start.strftime(\"%Y-%m-%d\"), user_end.strftime(\"%Y-%m-%d\"))\n",
        "\n",
        "            if results is not None:\n",
        "                # チェックボックスの状態を取得\n",
        "                checkboxes = output_options.children[1:]  # 最初のHTML要素をスキップ\n",
        "\n",
        "                if checkboxes[0].value:  # パフォーマンスグラフ\n",
        "                    model.plot_performance(display_plot=True)\n",
        "                if checkboxes[1].value:  # 年次リターンテーブル\n",
        "                    model.generate_annual_returns_table(display_table=True)\n",
        "                if checkboxes[2].value:  # 月次リターンテーブル\n",
        "                    model.generate_monthly_returns_table(display_table=True)\n",
        "                if checkboxes[3].value:  # モデルシグナル表示\n",
        "                    model.display_model_signals_dynamic_ui()\n",
        "                if checkboxes[4].value:  # パフォーマンスサマリー\n",
        "                    if hasattr(model, 'display_performance_summary_ui'):\n",
        "                        model.display_performance_summary_ui()\n",
        "                    else:\n",
        "                        model.display_performance_summary(display_summary=True)\n",
        "                if checkboxes[5].value:  # 取引履歴テーブル\n",
        "                    model.display_trade_history_with_benchmark(display_table=True)\n",
        "                    #model.display_trade_history(display_table=True)\n",
        "\n",
        "                model.excel_sheets_to_export = {\n",
        "                    \"settings\": excel_cb_settings.value,\n",
        "                    \"performance\": excel_cb_performance.value,\n",
        "                    \"daily_simple\": excel_cb_daily_simple.value,\n",
        "                    \"json_config\": excel_cb_json_config.value,\n",
        "                    \"monthly_returns\": excel_cb_monthly_returns.value,\n",
        "                    \"daily_detailed\": excel_cb_daily_detailed.value,\n",
        "                    \"trades\": excel_cb_trades.value\n",
        "                }\n",
        "\n",
        "                if excel_export_checkbox.value:\n",
        "                    try:\n",
        "                        print(\"\\n---エクセルファイルを出力中...---\")\n",
        "                        result = model.export_to_excel(auto_download=False)\n",
        "                        if result and \"filename\" in result:\n",
        "                            print(f\"✅ エクセルファイルが正常に出力されました: {result['filename']}\")\n",
        "                            try:\n",
        "                                from google.colab import files\n",
        "                                print(f\"🔄 ファイルをダウンロードしています...\")\n",
        "                                files.download(result['filename'])\n",
        "                            except ImportError:\n",
        "                                pass\n",
        "                        else:\n",
        "                            print(\"❌ エクセルファイルの出力に失敗しました\")\n",
        "                    except Exception as e:\n",
        "                        print(f\"❌ エクセル出力中にエラーが発生しました: {e}\")\n",
        "\n",
        "            else:\n",
        "                print(\"❌ Backtest failed. Please check your data period and ticker settings.\")\n",
        "\n",
        "\n",
        "    run_button.on_click(on_run_clicked)\n",
        "    def update_ui_visibility():\n",
        "        if performance_periods.value == 'Single Period':\n",
        "            single_period_settings.layout.display = 'block'\n",
        "            multiple_periods_settings.layout.display = 'none'\n",
        "        else:\n",
        "            single_period_settings.layout.display = 'none'\n",
        "            multiple_periods_settings.layout.display = 'block'\n",
        "    performance_periods.observe(lambda change: update_ui_visibility() if change['name'] == 'value' else None, names='value')\n",
        "\n",
        "    # タブの構成\n",
        "    time_tab = widgets.VBox([start_picker, end_picker])\n",
        "    assets_tab = widgets.VBox([\n",
        "        tickers,\n",
        "        specify_tickers,\n",
        "        single_absolute_momentum,\n",
        "        negative_relative_momentum,\n",
        "        absolute_momentum_asset,\n",
        "        specify_absolute_momentum_asset,\n",
        "        out_of_market_assets,\n",
        "        specify_out_of_market_asset,\n",
        "        out_of_market_strategy  # 新しいウィジェットを追加\n",
        "    ])\n",
        "\n",
        "    # 単一期間設定はそのまま\n",
        "    single_period_settings = widgets.VBox([lookback_period, lookback_unit, widgets.HBox([absolute_momentum_custom_period_checkbox]), widgets.HBox([absolute_momentum_period])])\n",
        "\n",
        "    # 複数期間設定をテーブル形式に変更\n",
        "    multiple_periods_settings = create_multiple_periods_table(model)\n",
        "    performance_tab = widgets.VBox([performance_periods, single_period_settings, multiple_periods_settings, assets_to_hold])\n",
        "\n",
        "    # 取引設定タブ\n",
        "    trade_tab = widgets.VBox([\n",
        "        trading_frequency,\n",
        "        trade_execution_label,\n",
        "        trade_execution_at_end,\n",
        "        trade_execution_at_next,\n",
        "        trade_execution_at_next_open,\n",
        "        benchmark_ticker,\n",
        "        widgets.HTML(value=\"<br>\"),  # 空白行を追加\n",
        "        stop_loss_box  # ストップロス設定を追加\n",
        "    ])\n",
        "\n",
        "    # 出力設定タブ - 既存のoutput_optionsを使用\n",
        "    # output_optionsはすでに定義されています\n",
        "\n",
        "    # タブウィジェットを作成し、すべてのタブを含めるように設定\n",
        "    tab = widgets.Tab()\n",
        "    # これが重要: 5つのタブをすべて明示的に含める\n",
        "    tab.children = [time_tab, assets_tab, performance_tab, trade_tab, output_options]\n",
        "    tab.set_title(0, 'Time Period')\n",
        "    tab.set_title(1, 'Assets')\n",
        "    tab.set_title(2, 'Performance Period')\n",
        "    tab.set_title(3, 'Trading Settings')\n",
        "    tab.set_title(4, 'Output Settings')  # 5つ目のタブには出力設定\n",
        "\n",
        "    # UIの可視性を更新\n",
        "    update_ui_visibility()\n",
        "\n",
        "    # 設定ボタン\n",
        "    config_buttons = widgets.HBox([save_button, load_button, file_upload])\n",
        "\n",
        "    # メインレイアウト - output_optionsは含めない\n",
        "    main_layout = widgets.VBox([\n",
        "        tab,\n",
        "        validation_message,\n",
        "        widgets.HBox([fetch_button, run_button]),\n",
        "        excel_export_checkbox,\n",
        "        config_buttons,\n",
        "        config_textarea,\n",
        "        portfolio_list_label,\n",
        "        output\n",
        "    ])\n",
        "\n",
        "    display(main_layout)\n",
        "    with output:\n",
        "        print(\"After configuring settings, click 'Fetch Data' to download price data.\")\n",
        "    return model\n",
        "\n",
        "def display_all_signals_for_patterns(model):\n",
        "    patterns = [\n",
        "        {\"title\": \"24-month return\", \"lookback_period\": 24, \"lookback_unit\": \"Months\", \"performance_periods\": \"Single Period\"},\n",
        "        {\"title\": \"15-day return\",   \"lookback_period\": 15, \"lookback_unit\": \"Days\", \"performance_periods\": \"Single Period\"},\n",
        "        {\"title\": \"1-month return\",  \"lookback_period\": 1,  \"lookback_unit\": \"Months\", \"performance_periods\": \"Single Period\"}\n",
        "    ]\n",
        "    for pat in patterns:\n",
        "        model.performance_periods = pat[\"performance_periods\"]\n",
        "        model.lookback_period = pat[\"lookback_period\"]\n",
        "        model.lookback_unit = pat[\"lookback_unit\"]\n",
        "        model.display_model_signals_dynamic()\n",
        "        display(HTML(\"<hr>\"))\n",
        "\n",
        "def display_performance_summary_ui(model):\n",
        "    display_performance_summary(model)\n",
        "\n",
        "def display_model_signals_dynamic_ui(model):\n",
        "    model.display_model_signals_dynamic()\n",
        "\n",
        "try:\n",
        "    import google.colab\n",
        "    print(\"Google Colab environment detected.\")\n",
        "    !pip install -q yfinance pandas numpy matplotlib seaborn ipywidgets tqdm pandas_market_calendars openpyxl\n",
        "    print(\"必要なパッケージをインストールしました（openpyxlを含む）\")\n",
        "except Exception as e:\n",
        "    print(\"Running in local environment.\")\n",
        "    # ローカル環境でもopenpyxlが必要\n",
        "    try:\n",
        "        import openpyxl\n",
        "    except ImportError:\n",
        "        print(\"openpyxlパッケージが必要です。pip install openpyxlでインストールしてください。\")\n",
        "\n",
        "# Run the Dual Momentum Model UI\n",
        "model = create_dual_momentum_ui()"
      ]
    }
  ]
}
